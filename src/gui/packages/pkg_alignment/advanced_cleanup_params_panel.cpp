/*  $Id: advanced_cleanup_params_panel.cpp 44058 2019-10-17 16:50:04Z katargir $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors: Roman Katargin
 *
 * File Description:
 *
 */

// Generated by DialogBlocks (unregistered), 16/09/2019 14:29:11

#include <ncbi_pch.hpp>

#include "advanced_cleanup_params_panel.hpp"

#include <gui/widgets/object_list/object_list_widget.hpp>

#include <wx/sizer.h>
#include <wx/statbox.h>
#include <wx/stattext.h>
#include <wx/checkbox.h>

BEGIN_NCBI_SCOPE

IMPLEMENT_DYNAMIC_CLASS( CAdvancedCleanupParamsPanel, CAlgoToolManagerParamsPanel )

BEGIN_EVENT_TABLE( CAdvancedCleanupParamsPanel, CAlgoToolManagerParamsPanel )

////@begin CAdvancedCleanupParamsPanel event table entries
////@end CAdvancedCleanupParamsPanel event table entries

END_EVENT_TABLE()

CAdvancedCleanupParamsPanel::CAdvancedCleanupParamsPanel()
{
    Init();
}

CAdvancedCleanupParamsPanel::CAdvancedCleanupParamsPanel( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}

bool CAdvancedCleanupParamsPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CAdvancedCleanupParamsPanel creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    CAlgoToolManagerParamsPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CAdvancedCleanupParamsPanel creation
    return true;
}

CAdvancedCleanupParamsPanel::~CAdvancedCleanupParamsPanel()
{
////@begin CAdvancedCleanupParamsPanel destruction
////@end CAdvancedCleanupParamsPanel destruction
}

void CAdvancedCleanupParamsPanel::Init()
{
////@begin CAdvancedCleanupParamsPanel member initialisation
    m_ObjectList = NULL;
////@end CAdvancedCleanupParamsPanel member initialisation
}

void CAdvancedCleanupParamsPanel::CreateControls()
{    
////@begin CAdvancedCleanupParamsPanel content construction
    CAdvancedCleanupParamsPanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxStaticBox* itemStaticBoxSizer1Static = new wxStaticBox(itemPanel1, wxID_ANY, _("Choose a set of alignments"));
    wxStaticBoxSizer* itemStaticBoxSizer1 = new wxStaticBoxSizer(itemStaticBoxSizer1Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer1, 1, wxGROW|wxALL, 5);

    m_ObjectList = new CObjectListWidget( itemStaticBoxSizer1->GetStaticBox(), ID_LISTCTRL2, wxDefaultPosition, wxSize(300, 200), wxLC_REPORT );
    itemStaticBoxSizer1->Add(m_ObjectList, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer4, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText1 = new wxStaticText( itemPanel1, wxID_STATIC, _("Query type:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(itemStaticText1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString itemChoice2Strings;
    itemChoice2Strings.Add(_("Infer"));
    itemChoice2Strings.Add(_("Genomic"));
    itemChoice2Strings.Add(_("RNA"));
    itemChoice2Strings.Add(_("Protein"));
    wxChoice* itemChoice2 = new wxChoice( itemPanel1, ID_CHOICE, wxDefaultPosition, wxDefaultSize, itemChoice2Strings, 0 );
    itemChoice2->SetStringSelection(_("Infer"));
    itemBoxSizer4->Add(itemChoice2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText3 = new wxStaticText( itemPanel1, wxID_STATIC, _("Splign direction:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(itemStaticText3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString itemChoice4Strings;
    itemChoice4Strings.Add(_("Sense"));
    itemChoice4Strings.Add(_("Antisense"));
    itemChoice4Strings.Add(_("Both"));
    wxChoice* itemChoice4 = new wxChoice( itemPanel1, ID_CHOICE1, wxDefaultPosition, wxDefaultSize, itemChoice4Strings, 0 );
    itemChoice4->SetStringSelection(_("Both"));
    itemBoxSizer4->Add(itemChoice4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxCheckBox* itemCheckBox5 = new wxCheckBox( itemPanel1, ID_CHECKBOX, _("Invoke best placement"), wxDefaultPosition, wxDefaultSize, 0 );
    itemCheckBox5->SetValue(true);
    itemBoxSizer4->Add(itemCheckBox5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    // Set validators
    itemChoice2->SetValidator( wxGenericValidator(& GetData().m_QueryType) );
    itemChoice4->SetValidator( wxGenericValidator(& GetData().m_SplignDirection) );
    itemCheckBox5->SetValidator( wxGenericValidator(& GetData().m_InvokeBest) );
////@end CAdvancedCleanupParamsPanel content construction
}

bool CAdvancedCleanupParamsPanel::ShowToolTips()
{
    return true;
}
wxBitmap CAdvancedCleanupParamsPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CAdvancedCleanupParamsPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CAdvancedCleanupParamsPanel bitmap retrieval
}
wxIcon CAdvancedCleanupParamsPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CAdvancedCleanupParamsPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CAdvancedCleanupParamsPanel icon retrieval
}

void CAdvancedCleanupParamsPanel::SetRegistryPath(const string& path)
{
    m_RegPath = path;
}

static const char* kTableTag = "Table";

void CAdvancedCleanupParamsPanel::SaveSettings() const
{
    if( ! m_RegPath.empty())   {
        CGuiRegistry& gui_reg = CGuiRegistry::GetInstance();
        string reg_path = CGuiRegistryUtil::MakeKey(m_RegPath, kTableTag);

        CRegistryWriteView table_view = gui_reg.GetWriteView(reg_path);
        m_ObjectList->SaveTableSettings(table_view);
    }
}


void CAdvancedCleanupParamsPanel::LoadSettings()
{
    if( ! m_RegPath.empty()) {
        CGuiRegistry& gui_reg = CGuiRegistry::GetInstance();
        string reg_path = CGuiRegistryUtil::MakeKey(m_RegPath, kTableTag);

        CRegistryReadView table_view = gui_reg.GetReadView(reg_path);
        m_ObjectList->LoadTableSettings(table_view);
    }
}

void CAdvancedCleanupParamsPanel::RestoreDefaults()
{
    GetData().Init();
    TransferDataToWindow();
}

bool CAdvancedCleanupParamsPanel::TransferDataToWindow()
{
    return CAlgoToolManagerParamsPanel::TransferDataToWindow();
}

bool CAdvancedCleanupParamsPanel::TransferDataFromWindow()
{
    if (!CAlgoToolManagerParamsPanel::TransferDataFromWindow())
        return false;

    GetData().m_Objects.clear();
    m_ObjectList->GetSelection(GetData().m_Objects);

    return true;
}

void CAdvancedCleanupParamsPanel::SetObjects(TConstScopedObjects* objects)
{
    m_ObjectList->SetObjects(*objects);
    m_ObjectList->SelectAll();
}

END_NCBI_SCOPE
