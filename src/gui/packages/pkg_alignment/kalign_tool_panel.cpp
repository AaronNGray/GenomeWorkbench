/*  $Id: kalign_tool_panel.cpp 43794 2019-08-30 19:15:21Z katargir $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors: Vladislav Evgeniev
 *
 * File Description:
 *
 */

#include <ncbi_pch.hpp>

#include <gui/widgets/object_list/object_list_widget_sel.hpp>
#include <gui/widgets/wx/exe_file_validator.hpp>

#include "kalign_tool_panel.hpp"

#include <wx/sizer.h>
#include <wx/stattext.h>
#include <wx/choice.h>
#include <wx/bmpbuttn.h>
#include <wx/checkbox.h>
#include <wx/valgen.h>
#include <wx/valtext.h>
#include <wx/msgdlg.h>
#include <wx/filedlg.h>
#include <wx/filename.h>
#include <wx/artprov.h>
#include <wx/bitmap.h>
#include <wx/icon.h>

////@begin includes
////@end includes

BEGIN_NCBI_SCOPE
USING_SCOPE(ncbi::objects);

IMPLEMENT_DYNAMIC_CLASS( CKalignToolPanel, CAlgoToolManagerParamsPanel )

BEGIN_EVENT_TABLE( CKalignToolPanel, CAlgoToolManagerParamsPanel )

////@begin CKalignToolPanel event table entries
    EVT_BUTTON( ID_BITMAPBUTTON1, CKalignToolPanel::OnKalignPathClick )
////@end CKalignToolPanel event table entries

END_EVENT_TABLE()

CKalignToolPanel::CKalignToolPanel()
{
    Init();
}

CKalignToolPanel::CKalignToolPanel(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style, bool visible)
{
    Init();
    Create(parent, id, pos, size, style, visible);
}

bool CKalignToolPanel::Create(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style, bool visible )
{
////@begin CKalignToolPanel creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    CAlgoToolManagerParamsPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CKalignToolPanel creation
    if (!visible) {
        Hide();
    }
    return true;
}

CKalignToolPanel::~CKalignToolPanel()
{
////@begin CKalignToolPanel destruction
////@end CKalignToolPanel destruction
}

void CKalignToolPanel::Init()
{
////@begin CKalignToolPanel member initialisation
    m_LocationSel = NULL;
////@end CKalignToolPanel member initialisation
}

void CKalignToolPanel::CreateControls()
{    
////@begin CKalignToolPanel content construction
    // Generated by DialogBlocks, 30/08/2019 15:08:21 (unregistered)

    CKalignToolPanel* itemCAlgoToolManagerParamsPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemCAlgoToolManagerParamsPanel1->SetSizer(itemBoxSizer2);

    m_LocationSel = new CObjectListWidgetSel( itemCAlgoToolManagerParamsPanel1, ID_PANEL, wxDefaultPosition, wxDefaultSize, wxNO_BORDER|wxTAB_TRAVERSAL );
    itemBoxSizer2->Add(m_LocationSel, 1, wxGROW|wxALL, 0);

    wxCheckBox* itemCheckBox4 = new wxCheckBox( itemCAlgoToolManagerParamsPanel1, ID_CHECKBOX, _("Quiet mode (prints nothing to the console)"), wxDefaultPosition, wxDefaultSize, 0 );
    itemCheckBox4->SetValue(true);
    itemBoxSizer2->Add(itemCheckBox4, 0, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer5, 0, wxGROW|wxALL, 0);

    wxStaticText* itemStaticText6 = new wxStaticText( itemCAlgoToolManagerParamsPanel1, wxID_STATIC, _("Command line options"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemStaticText6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxTextCtrl* itemTextCtrl7 = new wxTextCtrl( itemCAlgoToolManagerParamsPanel1, ID_TEXTCTRL11, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemTextCtrl7, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer8 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer8, 0, wxGROW|wxALL, 0);

    wxStaticText* itemStaticText9 = new wxStaticText( itemCAlgoToolManagerParamsPanel1, wxID_STATIC, _("Path to executable"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer8->Add(itemStaticText9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxTextCtrl* itemTextCtrl10 = new wxTextCtrl( itemCAlgoToolManagerParamsPanel1, ID_TEXTCTRL12, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer8->Add(itemTextCtrl10, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBitmapButton* itemBitmapButton11 = new wxBitmapButton( itemCAlgoToolManagerParamsPanel1, ID_BITMAPBUTTON1, itemCAlgoToolManagerParamsPanel1->GetBitmapResource(wxT("menu::open")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW );
    itemBitmapButton11->SetHelpText(_("Select Kalign executable"));
    if (CKalignToolPanel::ShowToolTips())
        itemBitmapButton11->SetToolTip(_("Select Kalign executable"));
    itemBoxSizer8->Add(itemBitmapButton11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    // Set validators
    itemCheckBox4->SetValidator( wxGenericValidator(& GetData().m_QuietFlag) );
    itemTextCtrl7->SetValidator( wxTextValidator(wxFILTER_NONE, & GetData().m_CommandLine) );
    itemTextCtrl10->SetValidator( CExeFileValidator(& GetData().m_KalignPath, wxT("Kalign")) );
////@end CKalignToolPanel content construction

    m_LocationSel->SetTitle(wxT("Select Locations"));
    m_LocationSel->SetDoSelectAll(true);
    m_LocationSel->ShowNuclProtButtons();
    m_LocationSel->EnableGroups(false);
    m_LocationSel->SetDefaultSelection("Genomic Location (total range)");
}

bool CKalignToolPanel::ShowToolTips()
{
    return true;
}

wxBitmap CKalignToolPanel::GetBitmapResource( const wxString& name )
{
    return wxArtProvider::GetBitmap(name);
}

wxIcon CKalignToolPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CKalignToolPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CKalignToolPanel icon retrieval
}

bool CKalignToolPanel::TransferDataFromWindow()
{
    if (!CAlgoToolManagerParamsPanel::TransferDataFromWindow())
        return false;

    GetData().SetObjects() = m_LocationSel->GetSelection();

    return true;
}

static const char* kLocationSel = ".LocationSel";

void CKalignToolPanel::SetRegistryPath(const string& path)
{
    m_RegPath = path;
    m_LocationSel->SetRegistryPath(m_RegPath + kLocationSel);
}

void CKalignToolPanel::SaveSettings() const
{
    m_LocationSel->SaveSettings();
}

void CKalignToolPanel::LoadSettings()
{
    m_LocationSel->LoadSettings();
}

void CKalignToolPanel::OnKalignPathClick(wxCommandEvent& WXUNUSED(event))
{
    wxTextCtrl* textCtrl = dynamic_cast<wxTextCtrl*>(FindWindow(ID_TEXTCTRL12));
    _ASSERT(nullptr != textCtrl);

    wxString path = textCtrl->GetValue();

    wxFileDialog dlg(this, wxT("Select a file"), wxT(""), wxT(""), wxT("*"),
        wxFD_OPEN|wxFD_FILE_MUST_EXIST);

    dlg.SetPath(path);

    if (dlg.ShowModal() != wxID_OK)
        return;

    path = dlg.GetPath();
    textCtrl->SetValue(path);
}

void CKalignToolPanel::RestoreDefaults()
{
    GetData().Init();
    TransferDataToWindow();
}

void CKalignToolPanel::SetObjects(map<string, TConstScopedObjects>* objects)
{
    m_LocationSel->SetObjects(objects);
}

END_NCBI_SCOPE
