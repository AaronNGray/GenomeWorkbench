/*  $Id: string_constraint_select.cpp 37302 2016-12-21 21:25:04Z asztalos $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Igor Filippov
 */


// Generated by DialogBlocks (unregistered), 14/05/2014 15:44:27

#include <ncbi_pch.hpp>

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include <gui/packages/pkg_sequence_edit/string_constraint_select.hpp>

BEGIN_NCBI_SCOPE

////@begin XPM images
////@end XPM images


/*
 * CStringConstraintSelect type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CStringConstraintSelect, wxPanel )


/*
 * CStringConstraintSelect event table definition
 */

BEGIN_EVENT_TABLE( CStringConstraintSelect, wxPanel )

////@begin CStringConstraintSelect event table entries
////@end CStringConstraintSelect event table entries


    EVT_BUTTON( ID_CSTRINGCONSTRAINTSELECT_BUTTON, CStringConstraintSelect::OnSelectAll )
    EVT_BUTTON( ID_CSTRINGCONSTRAINTSELECT_BUTTON1, CStringConstraintSelect::OnUnselectAll )
    EVT_BUTTON( ID_CSTRINGCONSTRAINTSELECT_BUTTON2, CStringConstraintSelect::OnApply )

END_EVENT_TABLE()


/*
 * CStringConstraintSelect constructors
 */

CStringConstraintSelect::CStringConstraintSelect()
{
    Init();
}

CStringConstraintSelect::CStringConstraintSelect( wxWindow* parent, CSeqTableGridPanel* grid_panel, wxArrayString &choices, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
    : m_GridPanel(grid_panel), m_Grid(grid_panel->GetGrid()), m_Choices(&choices)
{
    Init();
    Create(parent, id, pos, size, style);
}


/*
 * CStringConstraintSelect creator
 */

bool CStringConstraintSelect::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CStringConstraintSelect creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CStringConstraintSelect creation
    return true;
}


/*
 * CStringConstraintSelect destructor
 */

CStringConstraintSelect::~CStringConstraintSelect()
{
////@begin CStringConstraintSelect destruction
////@end CStringConstraintSelect destruction
}


/*
 * Member initialisation
 */

void CStringConstraintSelect::Init()
{
////@begin CStringConstraintSelect member initialisation
////@end CStringConstraintSelect member initialisation
}


/*
 * Control creation for CStringConstraintSelect
 */

void CStringConstraintSelect::CreateControls()
{    
////@begin CStringConstraintSelect content construction
    // Generated by DialogBlocks, 14/05/2014 15:57:15 (unregistered)

    CStringConstraintSelect* itemPanel1 = this;

    wxStaticBox* itemStaticBoxSizer2Static = new wxStaticBox(itemPanel1, wxID_ANY, _("Select Rows"));
    wxStaticBoxSizer* itemStaticBoxSizer2 = new wxStaticBoxSizer(itemStaticBoxSizer2Static, wxVERTICAL);
    itemPanel1->SetSizer(itemStaticBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_LEFT|wxEXPAND|wxALL, 0);

    wxButton* itemButton4 = new wxButton( itemStaticBoxSizer2->GetStaticBox(), ID_CSTRINGCONSTRAINTSELECT_BUTTON, _("Select All"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemButton4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton5 = new wxButton( itemStaticBoxSizer2->GetStaticBox(), ID_CSTRINGCONSTRAINTSELECT_BUTTON1, _("Unselect All"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemButton5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemBoxSizer3->AddStretchSpacer(1);

    m_AddButton = new wxRadioButton( itemStaticBoxSizer2->GetStaticBox(), wxID_ANY, _("Add To Selection"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    m_AddButton->SetValue(true);
    itemBoxSizer3->Add(m_AddButton, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_ExtractButton = new wxRadioButton( itemStaticBoxSizer2->GetStaticBox(), wxID_ANY, _("Extract From Selection"), wxDefaultPosition, wxDefaultSize, 0 );
    m_ExtractButton->SetValue(false);
    itemBoxSizer3->Add(m_ExtractButton, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer6 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer2->Add(itemBoxSizer6, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0);

    wxBoxSizer* itemBoxSizer7 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer6->Add(itemBoxSizer7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_CheckWhereButton = new wxRadioButton( itemStaticBoxSizer2->GetStaticBox(), ID_CSTRINGCONSTRAINTSELECT_RADIOBUTTON, _("Select Where"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    m_CheckWhereButton->SetValue(true);
    itemBoxSizer7->Add(m_CheckWhereButton, 0, wxALIGN_LEFT|wxALL, 5);

    m_UncheckWhereButton = new wxRadioButton( itemStaticBoxSizer2->GetStaticBox(), ID_CSTRINGCONSTRAINTSELECT_RADIOBUTTON1, _("Unselect Where"), wxDefaultPosition, wxDefaultSize, 0 );
    m_UncheckWhereButton->SetValue(false);
    itemBoxSizer7->Add(m_UncheckWhereButton, 0, wxALIGN_LEFT|wxALL, 5);

    m_ChoiceList = new wxChoice( itemStaticBoxSizer2->GetStaticBox(), ID_CSTRINGCONSTRAINTSELECT_CHOICE, wxDefaultPosition, wxDefaultSize, *m_Choices, 0 );
    m_ChoiceList->SetSelection(0);
    itemBoxSizer6->Add(m_ChoiceList, 0, wxALIGN_TOP|wxALL, 5);

    m_StringConstraintPanel = new CStringConstraintPanel( itemStaticBoxSizer2->GetStaticBox(), false, ID_CSTRINGCONSTRAINTSELECT_PANEL, wxDefaultPosition, wxDefaultSize, 0, true);
    itemBoxSizer6->Add(m_StringConstraintPanel, 0, wxALIGN_TOP|wxALL|wxFIXED_MINSIZE, 0);
    
    wxButton* itemButton12 = new wxButton( itemStaticBoxSizer2->GetStaticBox(), ID_CSTRINGCONSTRAINTSELECT_BUTTON2, _("Select"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer6->Add(itemButton12, 0, wxALIGN_TOP|wxALL, 5);

    m_Num = new wxStaticText( itemStaticBoxSizer2->GetStaticBox(), wxID_STATIC, wxEmptyString, wxDefaultPosition, wxSize(itemStaticBoxSizer2->GetStaticBox()->ConvertDialogToPixels(wxSize(100, -1)).x, -1), wxNO_BORDER );
    itemStaticBoxSizer2->Add(m_Num, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
////@end CStringConstraintSelect content construction
}


/*
 * Should we show tooltips?
 */

bool CStringConstraintSelect::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CStringConstraintSelect::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CStringConstraintSelect bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CStringConstraintSelect bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CStringConstraintSelect::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CStringConstraintSelect icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CStringConstraintSelect icon retrieval
}

void CStringConstraintSelect::OnSelectAll( wxCommandEvent& event )
{
    int collapsed_col = m_GridPanel->GetCollapseColAndExpand();
    m_Grid->SelectAll();
    int num = m_Grid->GetNumberRows();
    m_GridPanel->CollapseByCol(collapsed_col);
    UpdateCountSelectedDisplay(num);   
}

void CStringConstraintSelect::OnUnselectAll( wxCommandEvent& event )
{
    int collapsed_col = m_GridPanel->GetCollapseColAndExpand();
    m_Grid->ClearSelection();
    m_GridPanel->CollapseByCol(collapsed_col);
    UpdateCountSelectedDisplay(0);
}

int CStringConstraintSelect::GetConstrainedColumn()
{
    int col = -1;
    int sel = m_ChoiceList->GetSelection();
    if (sel == wxNOT_FOUND) return col;
    for (unsigned int i=0; i < m_Grid->GetNumberCols(); i++)
        if (m_Grid->GetColLabelValue(i) == m_ChoiceList->GetString(sel))
        {
            col = i;
            break;
        }
    return col;
}

void CStringConstraintSelect::GetSelectedRows(set<int> &selected)
{
    wxArrayInt wx_selected = m_Grid->GetSelectedRows();
    if (wx_selected.IsEmpty())
    {
        if (m_Grid->GetSelectionBlockTopLeft().size() == 1 &&  m_Grid->GetSelectionBlockTopLeft().size() == m_Grid->GetSelectionBlockBottomRight().size())
        {
            int top_row = m_Grid->GetSelectionBlockTopLeft()[0].GetRow();
            int bot_row = m_Grid->GetSelectionBlockBottomRight()[0].GetRow();
            for (unsigned int i = top_row; i <= bot_row; i++)
            {
                selected.insert(i);
            }
        }
    }
    else
    {
        for (unsigned int i = 0; i < wx_selected.GetCount(); i++)
        {
            selected.insert(wx_selected.Item(i));
        }
    }
}

void CStringConstraintSelect::OnApply( wxCommandEvent& event )
{ 
    int col = GetConstrainedColumn();
    if (col < 0) return;

    int collapsed_col = m_GridPanel->GetCollapseColAndExpand();
    set<int> selected;
    GetSelectedRows(selected);

    bool select = m_CheckWhereButton->GetValue();
    bool add_selection = m_AddButton->GetValue();
    if (add_selection)
    {
        for (unsigned i=0; i < m_Grid->GetNumberRows(); i++)
        {
            wxString cell = m_Grid->GetCellValue(i,col);
            if (m_StringConstraintPanel->Match(cell.ToStdString()))
            {          
                if (select)
                    selected.insert(i);
                else
                    selected.erase(i);                
            }
        }
    }
    else
    {
        set<int> extracted;
        for (set<int>::iterator i = selected.begin(); i != selected.end(); ++i)
        { 
            wxString cell = m_Grid->GetCellValue(*i,col);
            if (m_StringConstraintPanel->Match(cell.ToStdString()))
            {
                if (select)                   // Only keep those which match the constraint
                    extracted.insert(*i);
            }
            else
            {
                if (!select)                // only keep those that do not match the constraint
                    extracted.insert(*i);
            }                    
        }
        swap(selected,extracted);
    }
    int num = 0;
    m_Grid->ClearSelection();
    for (set<int>::iterator i = selected.begin(); i != selected.end(); ++i)
    {
        m_Grid->SelectRow(*i,true);
        num++;
    } 
    m_GridPanel->CollapseByCol(collapsed_col);
    UpdateCountSelectedDisplay(num);   
}

void CStringConstraintSelect::UpdateCountSelectedDisplay(int num)
{
    if (num > 0)
    {
        wxString label;
        label << num << " rows currently selected";
        m_Num->SetLabel(label);
    }
    else
    {
        m_Num->SetLabel(wxEmptyString);
    }
}

END_NCBI_SCOPE
