/*  $Id: autodef_opt_feat_panel.cpp 37956 2017-03-08 13:58:01Z bollin $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Colleen Bollin
 */


// Generated by DialogBlocks (unregistered), 21/06/2013 14:54:07

#include <ncbi_pch.hpp>

////@begin includes
////@end includes

#include <objtools/edit/autodef_with_tax.hpp>

#include <gui/packages/pkg_sequence_edit/autodef_opt_feat_panel.hpp>

#include <wx/sizer.h>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE

/*!
 * CAutodefOptFeatPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CAutodefOptFeatPanel, wxPanel )


/*!
 * CAutodefOptFeatPanel event table definition
 */

BEGIN_EVENT_TABLE( CAutodefOptFeatPanel, wxPanel )

////@begin CAutodefOptFeatPanel event table entries
    EVT_CHECKBOX( ID_KEEP_MISC_FEATS, CAutodefOptFeatPanel::OnKeepMiscFeatsClick )

////@end CAutodefOptFeatPanel event table entries

END_EVENT_TABLE()


/*!
 * CAutodefOptFeatPanel constructors
 */

CAutodefOptFeatPanel::CAutodefOptFeatPanel()
{
    Init();
}

CAutodefOptFeatPanel::CAutodefOptFeatPanel( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*!
 * CAutodefOptFeatPanel creator
 */

bool CAutodefOptFeatPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CAutodefOptFeatPanel creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CAutodefOptFeatPanel creation
    return true;
}


/*!
 * CAutodefOptFeatPanel destructor
 */

CAutodefOptFeatPanel::~CAutodefOptFeatPanel()
{
////@begin CAutodefOptFeatPanel destruction
////@end CAutodefOptFeatPanel destruction
}


/*!
 * Member initialisation
 */

void CAutodefOptFeatPanel::Init()
{
////@begin CAutodefOptFeatPanel member initialisation
    m_KeepExons = NULL;
    m_KeepIntrons = NULL;
    m_KeepMiscRecomb = NULL;
    m_KeepRepeatRegion = NULL;
    m_Keep5UTRs = NULL;
    m_Keep3UTRs = NULL;
    m_KeepMiscFeats = NULL;
    m_MiscFeatParseRule = NULL;
    m_RegulatoryFeatures = NULL;
    m_UseFakePromoters = NULL;
////@end CAutodefOptFeatPanel member initialisation
}


/*!
 * Control creation for CAutodefOptFeatPanel
 */

void CAutodefOptFeatPanel::CreateControls()
{    
////@begin CAutodefOptFeatPanel content construction
    CAutodefOptFeatPanel* itemPanel1 = this;

    wxStaticBox* itemStaticBoxSizer2Static = new wxStaticBox(itemPanel1, wxID_ANY, _("Optional Features"));
    wxStaticBoxSizer* itemStaticBoxSizer2 = new wxStaticBoxSizer(itemStaticBoxSizer2Static, wxVERTICAL);
    itemPanel1->SetSizer(itemStaticBoxSizer2);

    wxFlexGridSizer* itemFlexGridSizer3 = new wxFlexGridSizer(0, 4, 0, 0);
    itemStaticBoxSizer2->Add(itemFlexGridSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0);

    m_KeepExons = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_AD_FEAT_EXONS, _("Exons"), wxDefaultPosition, wxDefaultSize, 0 );
    m_KeepExons->SetValue(false);
    itemFlexGridSizer3->Add(m_KeepExons, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_KeepIntrons = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_AD_FEAT_INTRONS, _("Introns"), wxDefaultPosition, wxDefaultSize, 0 );
    m_KeepIntrons->SetValue(false);
    itemFlexGridSizer3->Add(m_KeepIntrons, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxCheckBox* itemCheckBox6 = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_AD_FEAT_PRERNA, _("Precursor RNAs"), wxDefaultPosition, wxDefaultSize, 0 );
    itemCheckBox6->SetValue(false);
    itemFlexGridSizer3->Add(itemCheckBox6, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxCheckBox* itemCheckBox7 = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_AD_FEAT_NCRNA, _("ncRNAs that overlap precursor RNAs"), wxDefaultPosition, wxDefaultSize, 0 );
    itemCheckBox7->SetValue(false);
    itemFlexGridSizer3->Add(itemCheckBox7, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_KeepMiscRecomb = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_CHECKBOX2, _("Misc_recomb"), wxDefaultPosition, wxDefaultSize, 0 );
    m_KeepMiscRecomb->SetValue(false);
    itemFlexGridSizer3->Add(m_KeepMiscRecomb, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxCheckBox* itemCheckBox9 = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_AD_FEAT_UORF, _("uORFs"), wxDefaultPosition, wxDefaultSize, 0 );
    itemCheckBox9->SetValue(false);
    itemFlexGridSizer3->Add(itemCheckBox9, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxCheckBox* itemCheckBox10 = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_AD_FEAT_MOBILE_ELEMENT, _("Optional Mobile Element"), wxDefaultPosition, wxDefaultSize, 0 );
    itemCheckBox10->SetValue(false);
    itemFlexGridSizer3->Add(itemCheckBox10, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_KeepRepeatRegion = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_AD_FEAT_REPEAT_REGION, _("Repeat Regions"), wxDefaultPosition, wxDefaultSize, 0 );
    m_KeepRepeatRegion->SetValue(false);
    itemFlexGridSizer3->Add(m_KeepRepeatRegion, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_Keep5UTRs = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_AD_FEAT_5UTR, _("5' UTRs"), wxDefaultPosition, wxDefaultSize, 0 );
    m_Keep5UTRs->SetValue(false);
    itemFlexGridSizer3->Add(m_Keep5UTRs, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_Keep3UTRs = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_AD_FEAT_3UTR, _("3' UTRs"), wxDefaultPosition, wxDefaultSize, 0 );
    m_Keep3UTRs->SetValue(false);
    itemFlexGridSizer3->Add(m_Keep3UTRs, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer14 = new wxBoxSizer(wxVERTICAL);
    itemFlexGridSizer3->Add(itemBoxSizer14, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_KeepMiscFeats = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_KEEP_MISC_FEATS, _("Misc feats with comments"), wxDefaultPosition, wxDefaultSize, 0 );
    m_KeepMiscFeats->SetValue(false);
    itemBoxSizer14->Add(m_KeepMiscFeats, 0, wxALIGN_LEFT|wxALL, 5);

    wxArrayString m_MiscFeatParseRuleStrings;
    m_MiscFeatParseRuleStrings.Add(_("Look for Noncoding Products"));
    m_MiscFeatParseRuleStrings.Add(_("Use comment before first semicolon"));
    m_MiscFeatParseRule = new wxChoice( itemStaticBoxSizer2->GetStaticBox(), ID_AD_FEAT_MISC_FEAT_PARSE_RULE, wxDefaultPosition, wxDefaultSize, m_MiscFeatParseRuleStrings, 0 );
    m_MiscFeatParseRule->SetStringSelection(_("Look for Noncoding Products"));
    m_MiscFeatParseRule->Enable(false);
    itemBoxSizer14->Add(m_MiscFeatParseRule, 0, wxALIGN_LEFT|wxALL, 5);

    wxBoxSizer* itemBoxSizer17 = new wxBoxSizer(wxVERTICAL);
    itemFlexGridSizer3->Add(itemBoxSizer17, 0, wxALIGN_LEFT|wxALIGN_TOP|wxALL, 0);

    m_RegulatoryFeatures = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_REGULATORY_FEATURES, _("Regulatory features"), wxDefaultPosition, wxDefaultSize, 0 );
    m_RegulatoryFeatures->SetValue(false);
    itemBoxSizer17->Add(m_RegulatoryFeatures, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_UseFakePromoters = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_AD_USE_FAKE_PROMOTERS, _("Add Promoters"), wxDefaultPosition, wxDefaultSize, 0 );
    m_UseFakePromoters->SetValue(false);
    itemBoxSizer17->Add(m_UseFakePromoters, 0, wxALIGN_LEFT|wxALL, 5);

////@end CAutodefOptFeatPanel content construction
}


/*!
 * Should we show tooltips?
 */

bool CAutodefOptFeatPanel::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CAutodefOptFeatPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CAutodefOptFeatPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CAutodefOptFeatPanel bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CAutodefOptFeatPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CAutodefOptFeatPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CAutodefOptFeatPanel icon retrieval
}


void CAutodefOptFeatPanel::Clear()
{
    m_KeepExons->SetValue (false);
    m_Keep5UTRs->SetValue (false);
    m_KeepIntrons->SetValue (false);
    m_Keep3UTRs->SetValue (false);
    m_RegulatoryFeatures->SetValue(false);
    m_UseFakePromoters->SetValue(false);
    m_KeepMiscRecomb->SetValue(false);
    m_KeepRepeatRegion->SetValue(false);

    m_MiscFeatParseRule->SetSelection (0);
}


void CAutodefOptFeatPanel::SetParams(SAutodefParams* params)
{
    if (!params) {
        Clear();
        return;
    }
    m_KeepExons->SetValue (params->m_KeepExons);
    m_Keep5UTRs->SetValue (params->m_Keep5UTRs);
    m_KeepIntrons->SetValue (params->m_KeepIntrons);
    m_Keep3UTRs->SetValue (params->m_Keep3UTRs);
    m_RegulatoryFeatures->SetValue(params->m_KeepRegulatoryFeatures);
    m_UseFakePromoters->SetValue(params->m_UseFakePromoters);
    m_KeepMiscRecomb->SetValue(params->m_KeepMiscRecomb);
    m_KeepRepeatRegion->SetValue(params->m_KeepRepeatRegion);

    switch (params->m_MiscFeatRule) {
        case objects::CAutoDefOptions::eNoncodingProductFeat:
            m_KeepMiscFeats->SetValue (true);
            m_MiscFeatParseRule->SetSelection (0);
            m_MiscFeatParseRule->Enable(true);
            break;
        case objects::CAutoDefOptions::eCommentFeat:
            m_KeepMiscFeats->SetValue (true);
            m_MiscFeatParseRule->SetSelection (1);
            m_MiscFeatParseRule->Enable(true);
            break;
        case objects::CAutoDefOptions::eDelete:
        default:
            m_KeepMiscFeats->SetValue (false);
            m_MiscFeatParseRule->SetSelection (0);
            m_MiscFeatParseRule->Enable(false);
            break;
    }

}


void CAutodefOptFeatPanel::PopulateParams(SAutodefParams& params)
{
    params.m_KeepExons = m_KeepExons->GetValue ();
    params.m_Keep5UTRs = m_Keep5UTRs->GetValue ();
    params.m_KeepIntrons = m_KeepIntrons->GetValue ();
    params.m_Keep3UTRs = m_Keep3UTRs->GetValue ();
    params.m_KeepRegulatoryFeatures = m_RegulatoryFeatures->GetValue ();
    params.m_UseFakePromoters = m_UseFakePromoters->GetValue();
    params.m_KeepMiscRecomb = m_KeepMiscRecomb->GetValue();
    params.m_KeepRepeatRegion = m_KeepRepeatRegion->GetValue();

    if (m_KeepMiscFeats->GetValue ()) {
        if (m_MiscFeatParseRule->GetSelection() == 0) {
            params.m_MiscFeatRule = objects::CAutoDefOptions::eNoncodingProductFeat;
        } else {
            params.m_MiscFeatRule = objects::CAutoDefOptions::eCommentFeat;
        }
    } else {
        params.m_MiscFeatRule = objects::CAutoDefOptions::eDelete;
    }

}




/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_KEEP_MISC_FEATS
 */

void CAutodefOptFeatPanel::OnKeepMiscFeatsClick( wxCommandEvent& event )
{
    if (m_KeepMiscFeats->GetValue()) {
        m_MiscFeatParseRule->Enable(true);
    } else {
        m_MiscFeatParseRule->Enable(false);
    }
}


END_NCBI_SCOPE
