/*  $Id: autodef_dlg.cpp 34945 2016-03-03 20:31:51Z asztalos $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Colleen Bollin
 */


// Generated by DialogBlocks (unregistered), 21/06/2013 13:22:54

#include <ncbi_pch.hpp>

////@begin includes
////@end includes

#include <gui/packages/pkg_sequence_edit/autodef_dlg.hpp>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE

USING_SCOPE(ncbi::objects);

/*!
 * CAutodefDlg type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CAutodefDlg, wxDialog )


/*!
 * CAutodefDlg event table definition
 */

BEGIN_EVENT_TABLE( CAutodefDlg, wxDialog )

////@begin CAutodefDlg event table entries
////@end CAutodefDlg event table entries

END_EVENT_TABLE()


/*!
 * CAutodefDlg constructors
 */

CAutodefDlg::CAutodefDlg()
{
    Init();
}

CAutodefDlg::CAutodefDlg( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*!
 * CAutodefDlg creator
 */

bool CAutodefDlg::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CAutodefDlg creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CAutodefDlg creation
    return true;
}


/*!
 * CAutodefDlg destructor
 */

CAutodefDlg::~CAutodefDlg()
{
////@begin CAutodefDlg destruction
////@end CAutodefDlg destruction
}


/*!
 * Member initialisation
 */

void CAutodefDlg::Init()
{
////@begin CAutodefDlg member initialisation
    m_OrgPanel = NULL;
    m_FeatClausePanel = NULL;
    m_Targeted = NULL;
////@end CAutodefDlg member initialisation
}


/*!
 * Control creation for CAutodefDlg
 */

void CAutodefDlg::CreateControls()
{    
////@begin CAutodefDlg content construction
    CAutodefDlg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    m_OrgPanel = new CAutodefOrgPanel( itemDialog1, ID_AD_WINDOW7, wxDefaultPosition, wxSize(100, 100), 0 );
    itemBoxSizer2->Add(m_OrgPanel, 0, wxGROW|wxALL, 5);

    m_FeatClausePanel = new CAutodefFeatClausePanel( itemDialog1, ID_AD_WINDOW8, wxDefaultPosition, wxSize(100, 100), 0 );
    itemBoxSizer2->Add(m_FeatClausePanel, 0, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton6 = new wxButton( itemDialog1, wxID_OK, _("Accept"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemButton6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton7 = new wxButton( itemDialog1, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemButton7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_Targeted = new wxCheckBox( itemDialog1, ID_CHECKBOX14, _("Only modify targeted record"), wxDefaultPosition, wxDefaultSize, 0 );
    m_Targeted->SetValue(false);
    itemBoxSizer5->Add(m_Targeted, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end CAutodefDlg content construction
}


/*!
 * Should we show tooltips?
 */

bool CAutodefDlg::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CAutodefDlg::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CAutodefDlg bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CAutodefDlg bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CAutodefDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CAutodefDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CAutodefDlg icon retrieval
}


void CAutodefDlg::Clear()
{
    m_OrgPanel->Clear();
    m_FeatClausePanel->Clear();
}


void CAutodefDlg::SetParams(SAutodefParams* params)
{
    m_OrgPanel->SetParams(params);
    m_FeatClausePanel->SetParams(params);
    InvalidateBestSize();
    Layout();
    Fit();
    Refresh();
}


void CAutodefDlg::PopulateParams(SAutodefParams& params)
{
    m_OrgPanel->PopulateParams(params);
    m_FeatClausePanel->PopulateParams(params);
}


void CAutodefDlg::ShowSourceOptions(bool show)
{
    m_OrgPanel->Show(show);
}


END_NCBI_SCOPE
