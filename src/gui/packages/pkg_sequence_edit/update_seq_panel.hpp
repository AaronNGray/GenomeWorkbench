/*  $Id: update_seq_panel.hpp 44435 2019-12-18 17:13:05Z asztalos $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Andrea Asztalos
 */
// Generated by DialogBlocks (unregistered), 26/01/2015 09:02:45

#ifndef _UPDATE_SEQ_PANEL_H_
#define _UPDATE_SEQ_PANEL_H_

#include <corelib/ncbistd.hpp>
#include <objmgr/bioseq_handle.hpp>
#include <gui/objutils/cmd_composite.hpp>
#include <gui/objutils/reg_settings.hpp>
#include <gui/utils/event_handler.hpp>

#include <gui/widgets/aln_multiple/alnmulti_widget.hpp>
#include <gui/widgets/aln_multiple/alnmulti_ds_builder.hpp>
#include <gui/widgets/aln_multiple/row_display_style.hpp>

#include <gui/packages/pkg_sequence_edit/update_seq_params.hpp>

#include <wx/panel.h>
#include <wx/dc.h>
#include <wx/dcclient.h>

class wxRadioButton;
class wxStaticText;
class wxCheckBox;
class wxButton;
class wxBoxSizer;
class wxStaticBoxSizer;
class wxToolBar;

BEGIN_NCBI_SCOPE

class CUpdateSeq_Input;
class CFeatureTypePanel;
class CDrawingPanel;
class CUpdateSeqAlignWidget;

/*!
 * Control identifiers
 */

////@begin control identifiers
#define SYMBOL_CUPDATESEQPANEL_STYLE wxTAB_TRAVERSAL
#define SYMBOL_CUPDATESEQPANEL_TITLE _("UpdateSeqPanel")
#define SYMBOL_CUPDATESEQPANEL_IDNAME ID_CUPDATESEQPANEL
#define SYMBOL_CUPDATESEQPANEL_SIZE wxSize(400, 300)
#define SYMBOL_CUPDATESEQPANEL_POSITION wxDefaultPosition
////@end control identifiers


/*
 * CUpdateSeqPanel class declaration
 */

class CUpdateSeqPanel: public wxPanel
{    
    DECLARE_DYNAMIC_CLASS(CUpdateSeqPanel)
    DECLARE_EVENT_TABLE()

public:
    /// Constructors
    CUpdateSeqPanel();
    CUpdateSeqPanel(wxWindow* parent,
        const CUpdateSeq_Input* updseq_in,
        wxWindowID id = SYMBOL_CUPDATESEQPANEL_STYLE,
        const wxPoint& pos = SYMBOL_CUPDATESEQPANEL_POSITION,
        const wxSize& size = SYMBOL_CUPDATESEQPANEL_SIZE,
        long style = SYMBOL_CUPDATESEQPANEL_STYLE);

    /// Creation
    bool Create( wxWindow* parent, 
        wxWindowID id = SYMBOL_CUPDATESEQPANEL_STYLE,
        const wxPoint& pos = SYMBOL_CUPDATESEQPANEL_POSITION,
        const wxSize& size = SYMBOL_CUPDATESEQPANEL_SIZE,
        long style = SYMBOL_CUPDATESEQPANEL_STYLE);

    /// Destructor
    ~CUpdateSeqPanel();

    /// Initialises member variables
    void Init();

    /// Creates the controls and sizers
    void CreateControls();

////@begin CUpdateSeqPanel event handler declarations

    /// wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SEQUPD_BTN1
    void OnNoChangeBtnSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SEQUPD_BTN2
    void OnReplaceBtnSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SEQUPD_BTN3
    void OnPatchBtnSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SEQUPD_BTN4
    void OnExtend5BtnSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SEQUPD_BTN5
    void OnExtend3BtnSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_SEQUPD_IALN_CHK
    void OnIgnoreAlignmentClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for ID_SEQUPD_DELFEAT_BTN2
    void OnRemoveAlignedFeaturesUpdated( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_SEQUPD_IMPCHK
    void OnImportChecked( wxCommandEvent& event );

////@end CUpdateSeqPanel event handler declarations

    void OnZoomIn( wxCommandEvent& event );
    void OnZoomOut( wxCommandEvent& event );
    void OnZoomAll( wxCommandEvent& event );
    void OnZoomToSequence( wxCommandEvent& event );
    void OnZoomToSelection( wxCommandEvent& event );

    void SetData(const SUpdateSeqParams& params);
    SUpdateSeqParams GetData();

    /// Function updates the panel with new (old, update) sequence pair
    ///@param[in] running
    /// Flag that shows whether the alignment job for this pair is still running
    /// The progress bar is shown when the flag is set
    ///@param[in] updseq_in
    ///  New update sequence input, used when it is called from CUpdateMultiSeq_Dlg
    void UpdatePanel(bool running, const CUpdateSeq_Input* updseq_in = nullptr);

    void SetUpdateProteins(bool value);
    bool GetUpdateProteins() const;
////@begin CUpdateSeqPanel member function declarations

    /// Retrieves bitmap resources
    wxBitmap GetBitmapResource( const wxString& name );

    /// Retrieves icon resources
    wxIcon GetIconResource( const wxString& name );
////@end CUpdateSeqPanel member function declarations

    void LoadSettings(const CRegistryReadView& view);
    void SaveSettings(CRegistryWriteView view) const;

    /// Should we show tooltips?
    static bool ShowToolTips();

    struct SDrawingParams
    {
        TSeqPos Lold;  // length of the old sequence
        TSeqPos Lupd;  // length of the updating sequence
        TSeqPos aln_start_old; // starting position of the alignment on the old sequence 
        TSeqPos aln_stop_old;   // ending position of the alignment on the old sequence
        TSeqPos aln_start_upd;  // starting position of the alignment on the update sequence 
        TSeqPos aln_stop_upd;   // ending position of the alignment on the update sequence
        ENa_strand strand_old;  // aligned strand corresponding to the old sequence
        ENa_strand strand_upd;  // aligned strand corresponding to the update sequence
        SDrawingParams() 
            : Lold(0), Lupd(0), aln_start_old(0), aln_stop_old(0), aln_start_upd(0), aln_stop_upd(0),
              strand_old(eNa_strand_plus), strand_upd(eNa_strand_plus) {}
        void Reset()
        {
            Lold = Lupd = aln_start_old = aln_stop_old = aln_start_upd = aln_stop_upd = 0;
            strand_old = strand_upd = eNa_strand_plus;
        }

        bool IsEmpty() const
        {
            return (Lold + Lupd + aln_start_old + aln_stop_old + aln_start_upd + aln_stop_upd == 0);
        }
    };

private:
    void x_InitDrawingParams();
    ///@param[in] create signals whether the function was called at the moment of creating the panel
    void x_InitAlnMultiWidgetAndUpdateTypes(bool create = false);
    void x_CreateAlnMultiWidget();
    void x_InitAlnMultiDSBuilder();
    void x_SelectSubjectSequenceMaster();
    void x_GetNameAndLength(const objects::CBioseq_Handle& bsh, string& label);
    void x_SetUpdateTypes(void);
    void x_ShowProgressBar(bool show);

    CRef<CScope> m_Scope;
    CAlnMultiDSBuilder m_Builder;
    CIRef<IAlnMultiDataSource> m_DataSource;
    CRowStyleCatalog m_StyleCatalog;

    CConstRef<CUpdateSeq_Input> m_UpdSeqInput;
    bool m_SequenceUpdateType[SUpdateSeqParams::CountSeqUpdateType];
    bool m_RemoveFeatureType[SUpdateSeqParams::CountFeatRemoveType];
    bool m_ImportFeatureType[SUpdateSeqParams::CountFeatUpdateType];
    bool m_IgnoreAlignState;
    bool m_ImportFeatsState;
    bool m_UpdateProtein;
    bool m_KeepProteinId;
    bool m_AddCitSub;

public:
    CUpdateSeqAlignWidget* m_AlnWidget;
    CDrawingPanel* m_DrawPanel;
    wxStaticText* m_DeltaSeqText;

////@begin CUpdateSeqPanel member variables
    wxBoxSizer* m_MainSizer;
    wxStaticBoxSizer* m_AlignStaticBoxSizer;
    wxStaticText* m_OldSeqName;
    wxStaticText* m_NewSeqName;
    wxStaticText* m_NoAlignmentText;
    wxToolBar* m_Toolbar;
    wxBoxSizer* m_ProgressSizer;
    wxRadioButton* m_NoChange;
    wxRadioButton* m_Replace;
    wxRadioButton* m_Patch;
    wxRadioButton* m_Extend5;
    wxRadioButton* m_Extend3;
    wxCheckBox* m_IgnoreAlignChk;
    CFeatureTypePanel* m_FeatType;
    wxCheckBox* m_ImportFeature;
    wxCheckBox* m_KeepProteinIdBox;
    /// Control identifiers
    enum {
        ID_CUPDATESEQPANEL = 10000,
        ID_SEQUPD_TOOLBAR = 10001,
        ID_SEQUPD_LOADTEXT = 10002,
        ID_SEQUPD_PROGRESSBAR = 10003,
        ID_SEQUPD_BTN1 = 10016,
        ID_SEQUPD_BTN2 = 10017,
        ID_SEQUPD_BTN3 = 10018,
        ID_SEQUPD_BTN4 = 10019,
        ID_SEQUPD_BTN5 = 10020,
        ID_SEQUPD_IALN_CHK = 10021,
        ID_SEQUPD_DELFEAT_BTN1 = 10006,
        ID_SEQUPD_DELFEAT_BTN2 = 10007,
        ID_SEQUPD_DELFEAT_BTN3 = 10008,
        ID_SEQUPD_DELFEAT_BTN4 = 10009,
        ID_SEQUPD_FEATPNL = 10011,
        ID_SEQUPD_IMPCHK = 10010,
        ID_SEQUPD_IMPFEATUPD_BTN1 = 10012,
        ID_SEQUPD_IMPFEATUPD_BTN2 = 10013,
        ID_SEQUPD_IMPFEATUPD_BTN3 = 10014,
        ID_SEQUPD_IMPFEATUPD_BTN4 = 10015,
        ID_SEQUPD_KEEPPROTID = 10022,
        ID_SEQUPD_ADDCITSUB = 10023,
        ID_SEQUPD_UPDPROTEIN = 10024
    };
////@end CUpdateSeqPanel member variables

    SDrawingParams m_DrawParams;
};


class CUpdateSeqAlignWidget : public CAlnMultiWidget
{
public:
    typedef IAlnMultiDataSource::TNumrow TNumrow;
    CUpdateSeqAlignWidget(wxWindow* parent,
        wxWindowID id = wxID_ANY,
        const wxPoint& pos = wxDefaultPosition,
        const wxSize& size = wxDefaultSize,
        long style = 0,
        const wxString& name = wxT("panel"))
        : CAlnMultiWidget(parent, id, pos, size, style, name) {}

    void CreateColumns();

    virtual void OnDSChanged(CDataChangeNotifier::CUpdate& update);

    void LoadSettingsV(const CRegistryReadView& view);
    void SaveSettingsV(CRegistryWriteView view) const;

    void SetNewBioseq(const CBioseq_Handle& bsh) { m_OldSeq = bsh; }

protected:
    void x_OnAlnWidgetSelChanged(CEvent* evt);

    DECLARE_EVENT_MAP();

private:
    TNumrow x_FindAnchorRow();

    objects::CBioseq_Handle m_OldSeq;
};


class CDrawingPanel : public wxPanel
{
    DECLARE_EVENT_TABLE()
public:
    CDrawingPanel(wxWindow* parent, const wxSize& size, const CUpdateSeqPanel::SDrawingParams& params);
    void PaintEvent(wxPaintEvent& event);
    void Render(wxDC& dc);

    void SetParams(const CUpdateSeqPanel::SDrawingParams& params) { m_Params = params; }
private:
    void x_SetScalingFactor(wxDC& dc);
    int x_GetLeft_OldSeq() const;
    int x_GetLeft_UpdSeq() const;

    int x_GetRight_OldSeq() const;
    int x_GetRight_UpdSeq() const;
    int x_FindWidthDrawingArea(wxDC& dc);

    CUpdateSeqPanel::SDrawingParams m_Params;
    // scaling factor
    double m_Lambda;
    // offset from the border of the panel
    const int m_Border;
    // starting position of drawing (text included)
    int m_Start;
    wxCoord m_Lone; // width of the string "1"
    wxCoord m_Lold; // width of string corresponding to old sequence length
    wxCoord m_Lupd; // width of string corresponding to update sequence length
};

END_NCBI_SCOPE

#endif
    // _UPDATE_SEQ_PANEL_H_
