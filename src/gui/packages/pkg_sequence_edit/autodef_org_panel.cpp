/*  $Id: autodef_org_panel.cpp 38801 2017-06-20 18:09:03Z bollin $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Colleen Bollin
 */


// Generated by DialogBlocks (unregistered), 21/06/2013 14:02:01

#include <ncbi_pch.hpp>

////@begin includes
////@end includes

#include <objtools/edit/autodef_with_tax.hpp>
#include <gui/packages/pkg_sequence_edit/autodef_org_panel.hpp>
#include <gui/widgets/wx/wx_utils.hpp>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE

/*!
 * CAutodefOrgPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CAutodefOrgPanel, wxPanel )


/*!
 * CAutodefOrgPanel event table definition
 */

BEGIN_EVENT_TABLE( CAutodefOrgPanel, wxPanel )

////@begin CAutodefOrgPanel event table entries
////@end CAutodefOrgPanel event table entries

END_EVENT_TABLE()


/*!
 * CAutodefOrgPanel constructors
 */

CAutodefOrgPanel::CAutodefOrgPanel()
{
    Init();
}

CAutodefOrgPanel::CAutodefOrgPanel( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*!
 * CAutodefOrgPanel creator
 */

bool CAutodefOrgPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CAutodefOrgPanel creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CAutodefOrgPanel creation
    return true;
}


/*!
 * CAutodefOrgPanel destructor
 */

CAutodefOrgPanel::~CAutodefOrgPanel()
{
////@begin CAutodefOrgPanel destruction
////@end CAutodefOrgPanel destruction
}


/*!
 * Member initialisation
 */

void CAutodefOrgPanel::Init()
{
////@begin CAutodefOrgPanel member initialisation
    m_ModListType = NULL;
    m_MaxMods = NULL;
    m_MaxModifiers = NULL;
    m_UseLabels = NULL;
    m_AvailableModifiersSizer = NULL;
    m_ModifierSizer = NULL;
    m_OtherOptionsGrid = NULL;
    m_LeaveParen = NULL;
    m_IncludeCountry = NULL;
    m_KeepAfterSemicolon = NULL;
    m_NoSp = NULL;
    m_NoCf = NULL;
    m_NoAff = NULL;
    m_NoNr = NULL;
    m_NoMatchTaxname = NULL;
    m_HIVRuleSizer = NULL;
////@end CAutodefOrgPanel member initialisation
    m_HIVRule = NULL;
    m_ModifierSizerColumns = 3;
}


/*!
 * Control creation for CAutodefOrgPanel
 */

void CAutodefOrgPanel::CreateControls()
{    
////@begin CAutodefOrgPanel content construction
    CAutodefOrgPanel* itemPanel1 = this;

    wxStaticBox* itemStaticBoxSizer2Static = new wxStaticBox(itemPanel1, wxID_ANY, _("SOURCE"));
    wxStaticBoxSizer* itemStaticBoxSizer2 = new wxStaticBoxSizer(itemStaticBoxSizer2Static, wxVERTICAL);
    itemPanel1->SetSizer(itemStaticBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0);

    wxStaticText* itemStaticText4 = new wxStaticText( itemStaticBoxSizer2->GetStaticBox(), wxID_STATIC, _("Modifier List"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_ModListTypeStrings;
    m_ModListTypeStrings.Add(_("Custom"));
    m_ModListTypeStrings.Add(_("All"));
    m_ModListType = new wxChoice( itemStaticBoxSizer2->GetStaticBox(), ID_MOD_LIST_TYPE, wxDefaultPosition, wxDefaultSize, m_ModListTypeStrings, 0 );
    m_ModListType->SetStringSelection(_("Custom"));
    itemBoxSizer3->Add(m_ModListType, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_MaxMods = new wxStaticText( itemStaticBoxSizer2->GetStaticBox(), wxID_STATIC, _("Maximum modifiers per line"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(m_MaxMods, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_MaxModifiersStrings;
    m_MaxModifiersStrings.Add(_("No limit"));
    m_MaxModifiers = new wxChoice( itemStaticBoxSizer2->GetStaticBox(), ID_AD_MODLIMIT, wxDefaultPosition, wxDefaultSize, m_MaxModifiersStrings, 0 );
    m_MaxModifiers->SetStringSelection(_("No limit"));
    itemBoxSizer3->Add(m_MaxModifiers, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_UseLabels = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_AD_USE_LABELS, _("Use labels"), wxDefaultPosition, wxDefaultSize, 0 );
    m_UseLabels->SetValue(false);
    itemBoxSizer3->Add(m_UseLabels, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_AvailableModifiersSizer = new wxStaticBox(itemStaticBoxSizer2->GetStaticBox(), wxID_ANY, _("Available Modifiers"));
    wxStaticBoxSizer* itemStaticBoxSizer9 = new wxStaticBoxSizer(m_AvailableModifiersSizer, wxVERTICAL);
    itemStaticBoxSizer2->Add(itemStaticBoxSizer9, 0, wxGROW|wxALL, 0);

    m_ModifierSizer = new wxFlexGridSizer(0, m_ModifierSizerColumns, 0, 0);
    itemStaticBoxSizer9->Add(m_ModifierSizer, 0, wxGROW|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer11Static = new wxStaticBox(itemStaticBoxSizer2->GetStaticBox(), wxID_ANY, _("Other Options"));
    wxStaticBoxSizer* itemStaticBoxSizer11 = new wxStaticBoxSizer(itemStaticBoxSizer11Static, wxVERTICAL);
    itemStaticBoxSizer2->Add(itemStaticBoxSizer11, 0, wxGROW|wxALL, 0);

    m_OtherOptionsGrid = new wxFlexGridSizer(0, 3, 0, 0);
    itemStaticBoxSizer11->Add(m_OtherOptionsGrid, 0, wxGROW|wxALL, 5);

    m_LeaveParen = new wxCheckBox( itemStaticBoxSizer11->GetStaticBox(), ID_AD_LEAVE_PARENTHETICAL, _("Leave in parenthetical organism info"), wxDefaultPosition, wxDefaultSize, 0 );
    m_LeaveParen->SetValue(false);
    m_OtherOptionsGrid->Add(m_LeaveParen, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_IncludeCountry = new wxCheckBox( itemStaticBoxSizer11->GetStaticBox(), ID_AD_INCLUDE_COUNTRY_TEXT, _("Include text after colon in country"), wxDefaultPosition, wxDefaultSize, 0 );
    m_IncludeCountry->SetValue(false);
    m_OtherOptionsGrid->Add(m_IncludeCountry, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_KeepAfterSemicolon = new wxCheckBox( itemStaticBoxSizer11->GetStaticBox(), ID_AD_KEEP_AFTER_SEMICOLON, _("Include text after semicolon in modifiers"), wxDefaultPosition, wxDefaultSize, 0 );
    m_KeepAfterSemicolon->SetValue(false);
    m_OtherOptionsGrid->Add(m_KeepAfterSemicolon, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_NoSp = new wxCheckBox( itemStaticBoxSizer11->GetStaticBox(), ID_AD_DO_NOT_APPLY_TO_SP, _("Do not apply modifiers to 'sp.' organisms"), wxDefaultPosition, wxDefaultSize, 0 );
    m_NoSp->SetValue(false);
    m_OtherOptionsGrid->Add(m_NoSp, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_NoCf = new wxCheckBox( itemStaticBoxSizer11->GetStaticBox(), ID_AD_DO_NOT_APPLY_TO_CF, _("Do not apply modifiers to 'cf.' organisms"), wxDefaultPosition, wxDefaultSize, 0 );
    m_NoCf->SetValue(false);
    m_OtherOptionsGrid->Add(m_NoCf, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_NoAff = new wxCheckBox( itemStaticBoxSizer11->GetStaticBox(), ID_AD_DO_NOT_APPLY_TO_AFF, _("Do not apply modifiers to 'aff.' organisms"), wxDefaultPosition, wxDefaultSize, 0 );
    m_NoAff->SetValue(false);
    m_OtherOptionsGrid->Add(m_NoAff, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_NoNr = new wxCheckBox( itemStaticBoxSizer11->GetStaticBox(), ID_AD_DO_NOT_APPLY_TO_NR, _("Do not apply modifiers to 'nr.' organisms"), wxDefaultPosition, wxDefaultSize, 0 );
    m_NoNr->SetValue(false);
    m_OtherOptionsGrid->Add(m_NoNr, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_NoMatchTaxname = new wxCheckBox( itemStaticBoxSizer11->GetStaticBox(), ID_AD_NO_MATCH_TAXNAME, _("Do not apply modifier to organisms with matching taxname"), wxDefaultPosition, wxDefaultSize, 0 );
    m_NoMatchTaxname->SetValue(true);
    m_OtherOptionsGrid->Add(m_NoMatchTaxname, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_HIVRuleSizer = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer2->Add(m_HIVRuleSizer, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0);

////@end CAutodefOrgPanel content construction

}


/*!
 * Should we show tooltips?
 */

bool CAutodefOrgPanel::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CAutodefOrgPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CAutodefOrgPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CAutodefOrgPanel bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CAutodefOrgPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CAutodefOrgPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CAutodefOrgPanel icon retrieval
}


void CAutodefOrgPanel::Clear()
{

}


static string s_GetModifierStatus (bool all_present, bool all_unique, bool is_unique)
{
    string status = "";

    if (all_present && all_unique)
    {
      status = "All present, all unique";
    }
    else if (all_present && is_unique)
    {
      status = "All present, one unique";
    }
    else if (all_present && ! is_unique)
    {
      status = "All present, mixed";
    }
    else if (! all_present && all_unique)
    {
      status = "Some missing, all unique";
    }
    else if (! all_present && is_unique)
    {
      status = "Some missing, one unique";
    }
    else if (! all_present && ! is_unique)
    {
      status = "Some missing, mixed";
    }
    return status;
}


void CAutodefOrgPanel::x_AddHIVRule()
{
    wxArrayString HIVStrings;
    HIVStrings.Add(_("Prefer Clone"));
    HIVStrings.Add(_("Prefer Isolate"));
    HIVStrings.Add(_("Want Both Isolate and Clone"));

    m_HIVRule = new wxRadioBox (this, wxID_ANY, _("HIV Rule"), wxDefaultPosition, wxDefaultSize,
                                HIVStrings, 1, wxRA_SPECIFY_ROWS);
    m_HIVRuleSizer->Add (m_HIVRule, 0, wxALIGN_LEFT|wxALL, 5);
}

bool sortByLabel(const objects::CAutoDefAvailableModifier& name1, const objects::CAutoDefAvailableModifier& name2)
{
    return name1.Label() < name2.Label();
}

int CAutodefOrgPanel::x_ListModifiers(SAutodefParams& params)
{
    // list modifiers in alphabetical order in m_ModifierSizerColumns number of columns
    // fill the sizer in a column-major order
    m_ModifierButtons.clear();

    sort(params.m_ModifierList.begin(), params.m_ModifierList.end(), sortByLabel);
    int num_available = 0;
    for (auto& it : params.m_ModifierList) {
        if (it.AnyPresent()) {
            num_available++;
        }
    }

    size_t row = 3;
    if (num_available > 9) {
        row = num_available / 3;
        if (num_available % 3 != 0) {
            row++;
        }
    }

    vector<wxFlexGridSizer*> flex_sizers;
    for (auto i = 0; i < m_ModifierSizerColumns; ++i) {
        wxFlexGridSizer* flexsizerA = new wxFlexGridSizer(0, 1, 0, 0);
        m_ModifierSizer->Add(flexsizerA, 0, wxGROW | wxALL, 5);
        flex_sizers.push_back(flexsizerA);
    }
    
    num_available = 0;
    for (size_t n = 0; n < params.m_ModifierList.size(); ++n) {
        if (params.m_ModifierList[n].AnyPresent()) {
            string mod_status = s_GetModifierStatus(params.m_ModifierList[n].AllPresent(),
                                                    params.m_ModifierList[n].AllUnique(),
                                                    params.m_ModifierList[n].IsUnique());
            string first_value;
            params.m_ModifierList[n].FirstValue(first_value);
            if (first_value.length() > 25) {
                first_value = first_value.substr(0, 22) + "...";
            }
            mod_status += " '" + first_value + "'";

            string mod_name = params.m_ModifierList[n].Label();
            mod_name[0] = toupper(mod_name[0]);

            wxCheckBox* btn = new wxCheckBox(m_AvailableModifiersSizer, wxID_ANY,
                ToWxString(mod_name + ": " + mod_status), wxDefaultPosition, wxDefaultSize, 0);
            btn->SetValue(params.m_ModifierList[n].IsRequested());

            size_t ratio = num_available / row;
            if (ratio < flex_sizers.size()) {
                flex_sizers[ratio]->Add(btn, 0, wxALIGN_LEFT | wxALL, 5);
            }

            m_ModifierButtons.push_back(btn);
            num_available++;
        }
        else {
            m_ModifierButtons.push_back(NULL);
        }
    }
    return num_available;
}

void CAutodefOrgPanel::SetParams(SAutodefParams* params)
{
    if (!params) {
        Clear();
        return;
    }

    m_UseLabels->SetValue (params->m_UseLabels);

    while (m_ModifierSizer->GetItemCount() > 0) {
        size_t pos = 0;
        m_ModifierSizer->GetItem(pos)->DeleteWindows();
        m_ModifierSizer->Remove(pos);
    }

    int num_available = x_ListModifiers(*params);

    m_MaxModifiers->Clear();
    m_MaxModifiers->AppendString(wxT("No limit"));
    for (int i = 1; i < num_available; i++) {
        m_MaxModifiers->AppendString(ToWxString(NStr::NumericToString(i)));
    }
    m_MaxModifiers->SetSelection (params->m_MaxMods);
    if (num_available < 1) {
        m_MaxModifiers->Enable(false);
    } else {
        m_MaxModifiers->Enable(true);
    }

    // Other Options
    m_NoSp->SetValue (params->m_DoNotApplyToSp);
    m_NoNr->SetValue (params->m_DoNotApplyToNr);
    m_NoCf->SetValue (params->m_DoNotApplyToCf);
    m_NoAff->SetValue (params->m_DoNotApplyToAff);
    m_LeaveParen->SetValue (params->m_LeaveParenthetical);
    m_IncludeCountry->SetValue (params->m_IncludeCountryText);
    m_KeepAfterSemicolon->SetValue (params->m_KeepAfterSemicolon);

    if (params->m_NeedHIVRule) {
        if (m_HIVRule == NULL) {
            x_AddHIVRule();
        }
        m_HIVRule->SetSelection (params->m_HIVRule);
    } else {
        while (m_HIVRuleSizer->GetItemCount() > 0) {
            size_t pos = 0;
            m_HIVRuleSizer->GetItem(pos)->DeleteWindows();
            m_HIVRuleSizer->Remove(pos);
        }
    }

    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
}


void CAutodefOrgPanel::PopulateParams(SAutodefParams& params)
{
    params.m_UseLabels = m_UseLabels->GetValue();

    sort(params.m_ModifierList.begin(), params.m_ModifierList.end(), sortByLabel);

    for (size_t n = 0; n < params.m_ModifierList.size(); n++) {
        if (m_ModifierButtons[n] == NULL) {
            params.m_ModifierList[n].SetRequested(false);
        } else {
            params.m_ModifierList[n].SetRequested (m_ModifierButtons[n]->GetValue ());
        }
    }

    params.m_DoNotApplyToSp = m_NoSp->GetValue ();
    params.m_DoNotApplyToNr = m_NoNr->GetValue ();
    params.m_DoNotApplyToCf = m_NoCf->GetValue ();
    params.m_DoNotApplyToAff = m_NoAff->GetValue ();

    for (size_t n = 0; n < params.m_ModifierList.size(); n++) {
        if (m_ModifierButtons[n] == NULL) {
            params.m_ModifierList[n].SetRequested(false);
        } else {
            params.m_ModifierList[n].SetRequested (m_ModifierButtons[n]->GetValue ());
        }
    }

    if (m_HIVRule) {
        params.m_HIVRule = m_HIVRule->GetSelection ();
    }

    params.m_MaxMods = m_MaxModifiers->GetSelection ();

    params.m_LeaveParenthetical = m_LeaveParen->GetValue();
    params.m_IncludeCountryText = m_IncludeCountry->GetValue();
    params.m_KeepAfterSemicolon = m_KeepAfterSemicolon->GetValue();

}

END_NCBI_SCOPE

