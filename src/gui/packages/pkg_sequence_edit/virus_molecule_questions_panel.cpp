/*  $Id: virus_molecule_questions_panel.cpp 28329 2013-06-19 11:58:38Z bollin $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Colleen Bollin
 */


#include <ncbi_pch.hpp>

////@begin includes
////@end includes

#include <gui/widgets/wx/wx_utils.hpp>
#include <gui/packages/pkg_sequence_edit/subprep_util.hpp>
#include <gui/packages/pkg_sequence_edit/subprep_panel.hpp>
#include <gui/packages/pkg_sequence_edit/virus_molecule_questions_panel.hpp>

#include <wx/statbox.h>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE

static const string kCdnaSource = "cDNA derived from";
static const string kVirusMaterial = "virus source material";

/*!
 * CVirusMoleculeQuestionsPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CVirusMoleculeQuestionsPanel, wxPanel )


/*!
 * CVirusMoleculeQuestionsPanel event table definition
 */

BEGIN_EVENT_TABLE( CVirusMoleculeQuestionsPanel, wxPanel )

////@begin CVirusMoleculeQuestionsPanel event table entries
    EVT_RADIOBUTTON( ID_CDNA_FROM_MRNA, CVirusMoleculeQuestionsPanel::OnCdnaFromMrnaSelected )

    EVT_RADIOBUTTON( ID_CDNA_FROM_GENOMIC, CVirusMoleculeQuestionsPanel::OnCdnaFromGenomicSelected )

    EVT_RADIOBUTTON( ID_PURIFIED, CVirusMoleculeQuestionsPanel::OnPurifiedSelected )

    EVT_RADIOBUTTON( ID_WHOLE_CELL, CVirusMoleculeQuestionsPanel::OnWholeCellSelected )

////@end CVirusMoleculeQuestionsPanel event table entries

END_EVENT_TABLE()


/*!
 * CVirusMoleculeQuestionsPanel constructors
 */

CVirusMoleculeQuestionsPanel::CVirusMoleculeQuestionsPanel()
{
    Init();
}

CVirusMoleculeQuestionsPanel::CVirusMoleculeQuestionsPanel( wxWindow* parent, 
                              objects::CSeq_entry_Handle seh, 
                              ICommandProccessor* processor,
                              wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
 : m_Seh(seh) ,
   m_CmdProcessor(processor)
{
    Init();
    Create(parent, id, pos, size, style);
}


/*!
 * CVirusMoleculeQuestionsPanel creator
 */

bool CVirusMoleculeQuestionsPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CVirusMoleculeQuestionsPanel creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CVirusMoleculeQuestionsPanel creation
    return true;
}


/*!
 * CVirusMoleculeQuestionsPanel destructor
 */

CVirusMoleculeQuestionsPanel::~CVirusMoleculeQuestionsPanel()
{
////@begin CVirusMoleculeQuestionsPanel destruction
////@end CVirusMoleculeQuestionsPanel destruction
}


/*!
 * Member initialisation
 */

void CVirusMoleculeQuestionsPanel::Init()
{
////@begin CVirusMoleculeQuestionsPanel member initialisation
    m_CdnaFromMrna = NULL;
    m_CdnaFromGenomic = NULL;
    m_Purified = NULL;
    m_WholeCell = NULL;
////@end CVirusMoleculeQuestionsPanel member initialisation
}


/*!
 * Control creation for CVirusMoleculeQuestionsPanel
 */

void CVirusMoleculeQuestionsPanel::CreateControls()
{    
////@begin CVirusMoleculeQuestionsPanel content construction
    // Generated by DialogBlocks, 10/06/2013 17:52:05 (unregistered)

    CVirusMoleculeQuestionsPanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxStaticBox* itemStaticBoxSizer3Static = new wxStaticBox(itemPanel1, wxID_ANY, _("What do the mRNA sequences in your submission represent?"));
    wxStaticBoxSizer* itemStaticBoxSizer3 = new wxStaticBoxSizer(itemStaticBoxSizer3Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer3, 0, wxALIGN_LEFT|wxALL, 5);

    m_CdnaFromMrna = new wxRadioButton( itemPanel1, ID_CDNA_FROM_MRNA, _("cDNA derived from mRNA"), wxDefaultPosition, wxSize(300, -1), 0 );
    m_CdnaFromMrna->SetValue(false);
    itemStaticBoxSizer3->Add(m_CdnaFromMrna, 0, wxALIGN_LEFT|wxALL, 5);

    m_CdnaFromGenomic = new wxRadioButton( itemPanel1, ID_CDNA_FROM_GENOMIC, _("cDNA derived from genomic RNA"), wxDefaultPosition, wxDefaultSize, 0 );
    m_CdnaFromGenomic->SetValue(false);
    itemStaticBoxSizer3->Add(m_CdnaFromGenomic, 0, wxALIGN_LEFT|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer6Static = new wxStaticBox(itemPanel1, wxID_ANY, _("What is the source material for the virus?"));
    wxStaticBoxSizer* itemStaticBoxSizer6 = new wxStaticBoxSizer(itemStaticBoxSizer6Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer6, 0, wxALIGN_LEFT|wxALL, 5);

    m_Purified = new wxRadioButton( itemPanel1, ID_PURIFIED, _("purified viral particles"), wxDefaultPosition, wxSize(300, -1), 0 );
    m_Purified->SetValue(false);
    itemStaticBoxSizer6->Add(m_Purified, 0, wxALIGN_LEFT|wxALL, 5);

    m_WholeCell = new wxRadioButton( itemPanel1, ID_WHOLE_CELL, _("whole cell/tissue lysate"), wxDefaultPosition, wxDefaultSize, 0 );
    m_WholeCell->SetValue(false);
    itemStaticBoxSizer6->Add(m_WholeCell, 0, wxALIGN_LEFT|wxALL, 5);

////@end CVirusMoleculeQuestionsPanel content construction
}


/*!
 * Should we show tooltips?
 */

bool CVirusMoleculeQuestionsPanel::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CVirusMoleculeQuestionsPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CVirusMoleculeQuestionsPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CVirusMoleculeQuestionsPanel bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CVirusMoleculeQuestionsPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CVirusMoleculeQuestionsPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CVirusMoleculeQuestionsPanel icon retrieval
}


/*!
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_WHOLE_CELL
 */

void CVirusMoleculeQuestionsPanel::OnWholeCellSelected( wxCommandEvent& event )
{
    CRef<CCmdComposite> cmd = CSubPrep_panel::SetWizardFieldInSeqEntry(m_Seh, kVirusMaterial, ToStdString(m_WholeCell->GetLabel()));
    m_CmdProcessor->Execute(cmd);
}


/*!
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_PURIFIED
 */

void CVirusMoleculeQuestionsPanel::OnPurifiedSelected( wxCommandEvent& event )
{
    CRef<CCmdComposite> cmd = CSubPrep_panel::SetWizardFieldInSeqEntry(m_Seh, kVirusMaterial, ToStdString(m_Purified->GetLabel()));
    m_CmdProcessor->Execute(cmd);
}


/*!
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_CDNA_FROM_GENOMIC
 */

void CVirusMoleculeQuestionsPanel::OnCdnaFromGenomicSelected( wxCommandEvent& event )
{
    CRef<CCmdComposite> cmd = CSubPrep_panel::SetWizardFieldInSeqEntry(m_Seh, kCdnaSource, ToStdString(m_CdnaFromGenomic->GetLabel()));
    m_CmdProcessor->Execute(cmd);
}


/*!
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_CDNA_FROM_MRNA
 */

void CVirusMoleculeQuestionsPanel::OnCdnaFromMrnaSelected( wxCommandEvent& event )
{
    CRef<CCmdComposite> cmd = CSubPrep_panel::SetWizardFieldInSeqEntry(m_Seh, kCdnaSource, ToStdString(m_CdnaFromMrna->GetLabel()));
    m_CmdProcessor->Execute(cmd);
}


void CVirusMoleculeQuestionsPanel::OnDataChange ()
{
    string cdna_src = CSubPrep_panel::GetWizardFieldFromSeqEntry (m_Seh, kCdnaSource);
    if (NStr::Equal(cdna_src, ToStdString(m_CdnaFromMrna->GetLabel()))) {
        m_CdnaFromMrna->SetValue(true);
    } else {
        m_CdnaFromMrna->SetValue(false);
    }
    if (NStr::Equal(cdna_src, ToStdString(m_CdnaFromGenomic->GetLabel()))) {
        m_CdnaFromGenomic->SetValue(true);
    } else {
        m_CdnaFromGenomic->SetValue(false);
    }
    string virus_src = CSubPrep_panel::GetWizardFieldFromSeqEntry (m_Seh, kVirusMaterial);
    if (NStr::Equal(virus_src, ToStdString(m_Purified->GetLabel()))) {
        m_Purified->SetValue(true);
    } else {
        m_Purified->SetValue(false);
    }
    if (NStr::Equal(virus_src, ToStdString(m_WholeCell->GetLabel()))) {
        m_WholeCell->SetValue(true);
    } else {
        m_WholeCell->SetValue(false);
    }
}


END_NCBI_SCOPE
