/*  $Id: bulk_feature_add_dlg_std.cpp 40191 2018-01-04 21:03:28Z asztalos $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Colleen Bollin, Igor Filippov
 */


#include <ncbi_pch.hpp>
#include <objects/seqfeat/Imp_feat.hpp>
#include <objects/seqfeat/Seq_feat.hpp>
#include <objmgr/bioseq_ci.hpp>
#include <objmgr/bioseq_handle.hpp>

////@begin includes
////@end includes

#include <gui/packages/pkg_sequence_edit/bulk_feature_add_dlg_std.hpp>
#include <gui/packages/pkg_sequence_edit/rnanamepanel.hpp>
#include <gui/packages/pkg_sequence_edit/igspanel.hpp>
#include <gui/objutils/cmd_create_feat.hpp>
#include <gui/packages/pkg_sequence_edit/bulk_rna_add_panel.hpp>
#include <gui/packages/pkg_sequence_edit/bulk_other_add_panel.hpp>
#include <gui/packages/pkg_sequence_edit/bulkcdsaddpanel.hpp>
#include <gui/packages/pkg_sequence_edit/subprep_util.hpp>
#include <gui/core/selection_service_impl.hpp>
#include <gui/utils/app_popup.hpp>
#include <gui/widgets/data/report_dialog.hpp>
#include <wx/msgdlg.h>
#include <wx/textctrl.h>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE

/*!
 * CBulkFeatureAddDlgStd type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CBulkFeatureAddDlgStd, CBulkCmdDlg )


/*!
 * CBulkFeatureAddDlgStd event table definition
 */

BEGIN_EVENT_TABLE( CBulkFeatureAddDlgStd, CBulkCmdDlg )

////@begin CBulkFeatureAddDlgStd event table entries
////@end CBulkFeatureAddDlgStd event table entries
    EVT_BUTTON( ID_APPLY_BUTTON, CBulkFeatureAddDlgStd::OnApplyClick )
END_EVENT_TABLE()


/*!
 * CBulkFeatureAddDlgStd constructors
 */

CBulkFeatureAddDlgStd::CBulkFeatureAddDlgStd()
{
    Init();
}

CBulkFeatureAddDlgStd::CBulkFeatureAddDlgStd( wxWindow* parent, objects::CSeq_entry_Handle seh, 
                                              IWorkbench* workbench, const string &key,
                                              wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
: m_TopSeqEntry(seh),
  m_Workbench (workbench),
  m_DefaultKey(key)
{
    Init();
    Create(parent, id, caption, pos, size, style);
    NEditingStats::ReportUsage(caption);
}


/*!
 * CBulkFeatureAddDlgStd creator
 */

bool CBulkFeatureAddDlgStd::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CBulkFeatureAddDlgStd creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    CBulkCmdDlg::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CBulkFeatureAddDlgStd creation
    return true;
}


/*!
 * CBulkFeatureAddDlgStd destructor
 */

CBulkFeatureAddDlgStd::~CBulkFeatureAddDlgStd()
{
////@begin CBulkFeatureAddDlgStd destruction
////@end CBulkFeatureAddDlgStd destruction
}


/*!
 * Member initialisation
 */

void CBulkFeatureAddDlgStd::Init()
{
////@begin CBulkFeatureAddDlgStd member initialisation
    m_Notebook = NULL;
////@end CBulkFeatureAddDlgStd member initialisation
}


/*!
 * Control creation for CBulkFeatureAddDlgStd
 */

void CBulkFeatureAddDlgStd::CreateControls()
{    
////@begin CBulkFeatureAddDlgStd content construction
    // Generated by DialogBlocks, 10/06/2013 17:47:57 (unregistered)

    CBulkFeatureAddDlgStd* itemCBulkCmdDlg1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemCBulkCmdDlg1->SetSizer(itemBoxSizer2);


    m_Notebook = new wxNotebook(itemCBulkCmdDlg1, wxID_ANY,wxDefaultPosition,wxDefaultSize);
    itemBoxSizer2->Add(m_Notebook, 1, wxGROW|wxALL, 5);
    
    CBulkCDSAddPanel *panel1 = new CBulkCDSAddPanel( m_Notebook, m_TopSeqEntry);
    m_Notebook->AddPage(panel1,_("CDS"));
    
    CBulkRNAAddPanel *panel2 = new CBulkRNAAddPanel( m_Notebook, m_TopSeqEntry);
    m_Notebook->AddPage(panel2,_("RNA"));
    
    CBulkOtherAddPanel *panel3 = new CBulkOtherAddPanel( m_Notebook, m_TopSeqEntry, m_DefaultKey);
    m_Notebook->AddPage(panel3,_("Other"));
   
    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
    
    wxButton* itemButton8 = new wxButton( itemCBulkCmdDlg1, ID_APPLY_BUTTON, _("Accept"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemButton8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
    
    wxButton* itemButton7 = new wxButton( itemCBulkCmdDlg1, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemButton7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end CBulkFeatureAddDlgStd content construction
}


/*!
 * Should we show tooltips?
 */

bool CBulkFeatureAddDlgStd::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CBulkFeatureAddDlgStd::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CBulkFeatureAddDlgStd bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CBulkFeatureAddDlgStd bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CBulkFeatureAddDlgStd::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CBulkFeatureAddDlgStd icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CBulkFeatureAddDlgStd icon retrieval
}

CRef<CCmdComposite> CBulkFeatureAddDlgStd::x_CreateImportFeatures(string key, string comment, bool skip_existing)
{
    string cmd_label = "Bulk Add " + key + " Features";
    CRef<CCmdComposite> cmd (new CCmdComposite(cmd_label));

    objects::CBioseq_CI b_iter(m_TopSeqEntry, objects::CSeq_inst::eMol_na);
    for ( ; b_iter ; ++b_iter ) {
        if (skip_existing && AlreadyHasFeature(*b_iter, key, comment)) {
            continue;
        }

        CRef<objects::CSeq_feat> new_feat(new objects::CSeq_feat());
        new_feat->SetData().SetImp().SetKey(key);
        if (!NStr::IsBlank(comment)) {
            new_feat->SetComment(comment);
        }
        CRef<objects::CSeq_id> new_feat_id(new objects::CSeq_id());
        new_feat_id->Assign(*(b_iter->GetCompleteBioseq()->GetId().front()));
        new_feat->SetLocation().SetInt().SetId(*new_feat_id);
        new_feat->SetLocation().SetInt().SetFrom(0);
        new_feat->SetLocation().SetInt().SetTo(b_iter->GetBioseqLength() - 1);
        objects::CSeq_entry_Handle seh = b_iter->GetSeq_entry_Handle();
        cmd->AddCommand(*CRef<CCmdCreateFeat>(new CCmdCreateFeat(seh, *new_feat)));
    }
    return cmd;
}


CRef<CCmdComposite> CBulkFeatureAddDlgStd::x_CreateDloops()
{
    return x_CreateImportFeatures ("D-loop", "", true);
}


CRef<CCmdComposite> CBulkFeatureAddDlgStd::x_CreateControlRegions()
{
    return x_CreateImportFeatures ("misc_feature", "control region", true);
}


CRef<CCmdComposite> CBulkFeatureAddDlgStd::GetCommand()
{
    CRef<CCmdComposite> cmd;

    int sel = m_Notebook->GetSelection();
    CBulkCmdPanel *win = dynamic_cast<CBulkCmdPanel*>(m_Notebook->GetPage(sel));
    if (win) {
        cmd = win->GetCommand();
    } 

    return cmd;
}


string CBulkFeatureAddDlgStd::GetErrorMessage ()
{
    string error = "Unknown error";
    int sel = m_Notebook->GetSelection();
    CBulkCmdPanel *win = dynamic_cast<CBulkCmdPanel*>(m_Notebook->GetPage(sel));
    if (win) {
        error = win->GetErrorMessage();
    }
    return error;
}



/*!
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_RADIOBUTTON
 */



void CBulkFeatureAddDlgStd::ChooseFeatureType(objects::CSeqFeatData::ESubtype subtype)
{
    switch (subtype) {
        case objects::CSeqFeatData::eSubtype_cdregion:
            m_Notebook->SetSelection(0);
            break;
        case objects::CSeqFeatData::eSubtype_rRNA:
            m_Notebook->SetSelection(1);
            break;
        default:
            m_Notebook->SetSelection(2);
            break;
    }
}


void CBulkFeatureAddDlgStd::OnApplyClick(wxCommandEvent& event )
{
    if (!m_TopSeqEntry)
        return;

    ICommandProccessor* cmdProcessor = NULL;
    CIRef<CProjectService> srv = m_Workbench->GetServiceByType<CProjectService>();
    if (srv)
    {
        CRef<CGBWorkspace> ws = srv->GetGBWorkspace();
        if (!ws) return;

        CGBDocument* doc = dynamic_cast<CGBDocument*>(ws->GetProjectFromScope(m_TopSeqEntry.GetScope()));
        if (doc)
            cmdProcessor = &doc->GetUndoManager(); 
    }
    if (!cmdProcessor)
        return;

    CRef<CCmdComposite> cmd = GetCommand();
    if (cmd) { 
        cmdProcessor->Execute(cmd);                       
        Close();    
    } else {
        string errmsg = GetErrorMessage();
        if (!NStr::IsBlank(errmsg)) {
            wxString error = ToWxString(errmsg);
            wxMessageBox(error, wxT("Error"),
                         wxOK | wxICON_ERROR, NULL);
        }
    }
}

END_NCBI_SCOPE
