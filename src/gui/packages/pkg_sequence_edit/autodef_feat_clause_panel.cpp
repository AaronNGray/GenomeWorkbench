/*  $Id: autodef_feat_clause_panel.cpp 37956 2017-03-08 13:58:01Z bollin $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Colleen Bollin
 */


// Generated by DialogBlocks (unregistered), 21/06/2013 14:35:39

#include <ncbi_pch.hpp>

////@begin includes
////@end includes

#include <objects/seqfeat/BioSource.hpp>
#include <gui/widgets/object_list/object_list_widget.hpp>
#include <gui/widgets/seq/feature_check_dialog.hpp>
#include <gui/packages/pkg_sequence_edit/autodef_feat_clause_panel.hpp>
#include <objtools/edit/autodef_with_tax.hpp>

#include <wx/sizer.h>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE

/*!
 * CAutodefFeatClausePanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CAutodefFeatClausePanel, wxPanel )


/*!
 * CAutodefFeatClausePanel event table definition
 */

BEGIN_EVENT_TABLE( CAutodefFeatClausePanel, wxPanel )

////@begin CAutodefFeatClausePanel event table entries
    EVT_CHOICE( ID_AD_LISTCHOICE, CAutodefFeatClausePanel::OnAdListchoiceSelected )

////@end CAutodefFeatClausePanel event table entries

END_EVENT_TABLE()


/*!
 * CAutodefFeatClausePanel constructors
 */

CAutodefFeatClausePanel::CAutodefFeatClausePanel()
{
    Init();
}

CAutodefFeatClausePanel::CAutodefFeatClausePanel( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*!
 * CAutodefFeatClausePanel creator
 */

bool CAutodefFeatClausePanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CAutodefFeatClausePanel creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CAutodefFeatClausePanel creation
    return true;
}


/*!
 * CAutodefFeatClausePanel destructor
 */

CAutodefFeatClausePanel::~CAutodefFeatClausePanel()
{
////@begin CAutodefFeatClausePanel destruction
////@end CAutodefFeatClausePanel destruction
}


/*!
 * Member initialisation
 */

void CAutodefFeatClausePanel::Init()
{
////@begin CAutodefFeatClausePanel member initialisation
    m_FeatureListChoice = NULL;
    m_CustomPhrase = NULL;
    m_ProductClauseChoice = NULL;
    m_AppendAltSplice = NULL;
    m_UseNcRNAComment = NULL;
    m_OptFeatPanel = NULL;
    m_SuppressedFeatureTypeList = NULL;
    m_SuppressTransposon = NULL;
    m_SupressGeneCluster = NULL;
    m_SuppressLocusTags = NULL;
    m_SuppressAltSplice = NULL;
    m_SuppressMiscFeatSubFeat = NULL;
////@end CAutodefFeatClausePanel member initialisation
    m_SuppressedFeatures.clear();
}


/*!
 * Control creation for CAutodefFeatClausePanel
 */

void CAutodefFeatClausePanel::CreateControls()
{    
////@begin CAutodefFeatClausePanel content construction
    CAutodefFeatClausePanel* itemPanel1 = this;

    wxStaticBox* itemStaticBoxSizer2Static = new wxStaticBox(itemPanel1, wxID_ANY, _("Feature Clauses"));
    wxStaticBoxSizer* itemStaticBoxSizer2 = new wxStaticBoxSizer(itemStaticBoxSizer2Static, wxVERTICAL);
    itemPanel1->SetSizer(itemStaticBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer3->Add(itemBoxSizer4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer4->Add(itemBoxSizer5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemStaticBoxSizer2->GetStaticBox(), wxID_STATIC, _("Features or Complete"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemStaticText6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_FeatureListChoiceStrings;
    m_FeatureListChoiceStrings.Add(_("List Features"));
    m_FeatureListChoiceStrings.Add(_("Complete Sequence"));
    m_FeatureListChoiceStrings.Add(_("Partial Sequence"));
    m_FeatureListChoiceStrings.Add(_("Complete Genome"));
    m_FeatureListChoiceStrings.Add(_("Partial Genome"));
    m_FeatureListChoiceStrings.Add(_("Sequence"));
    m_FeatureListChoiceStrings.Add(_("Custom Phrase"));
    m_FeatureListChoice = new wxChoice( itemStaticBoxSizer2->GetStaticBox(), ID_AD_LISTCHOICE, wxDefaultPosition, wxDefaultSize, m_FeatureListChoiceStrings, 0 );
    m_FeatureListChoice->SetStringSelection(_("List Features"));
    itemBoxSizer5->Add(m_FeatureListChoice, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_CustomPhrase = new wxTextCtrl( itemStaticBoxSizer2->GetStaticBox(), ID_TEXTCTRL5, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_CustomPhrase->Enable(false);
    itemBoxSizer4->Add(m_CustomPhrase, 0, wxGROW|wxALL, 5);

    wxArrayString m_ProductClauseChoiceStrings;
    m_ProductClauseChoiceStrings.Add(_("No mitochondrial or chloroplast suffix"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear gene(s) for mitochondrial product(s)"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear gene(s) for chloroplast product(s)"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear gene(s) for kinetoplast product(s)"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear gene(s) for plastid product(s);"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear gene(s) for chromoplast product(s)"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear gene(s) for cyanelle product(s)  "));
    m_ProductClauseChoiceStrings.Add(_("Nuclear gene(s) for apicoplast product(s)"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear gene(s) for leucoplast product(s)"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear gene(s) for proplastid product(s)"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear genes based on CDS products"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear copy of mitochondrial gene"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear copy of chloroplast gene"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear copy of kinetoplast gene"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear copy of plastid gene"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear copy of chromoplast gene"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear copy of cyanelle gene"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear copy of apicoplast gene"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear copy of leucoplast gene"));
    m_ProductClauseChoiceStrings.Add(_("Nuclear copy of proplastid gene"));
    m_ProductClauseChoice = new wxChoice( itemStaticBoxSizer2->GetStaticBox(), ID_AD_PRODUCT_CLAUSE, wxDefaultPosition, wxDefaultSize, m_ProductClauseChoiceStrings, 0 );
    m_ProductClauseChoice->SetStringSelection(_("Nuclear genes based on CDS products"));
    itemBoxSizer4->Add(m_ProductClauseChoice, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_AppendAltSplice = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_AD_ALTSPLICE_ADD, _("Append \"alternatively spliced\" to definition line"), wxDefaultPosition, wxDefaultSize, 0 );
    m_AppendAltSplice->SetValue(false);
    itemBoxSizer4->Add(m_AppendAltSplice, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_UseNcRNAComment = new wxCheckBox( itemStaticBoxSizer2->GetStaticBox(), ID_AD_NCRNA_NOTE, _("Use ncRNA note if no class or product"), wxDefaultPosition, wxDefaultSize, 0 );
    m_UseNcRNAComment->SetValue(false);
    itemBoxSizer4->Add(m_UseNcRNAComment, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_OptFeatPanel = new CAutodefOptFeatPanel( itemStaticBoxSizer2->GetStaticBox(), ID_AD_WINDOW9, wxDefaultPosition, wxSize(100, 100), 0 );
    itemBoxSizer3->Add(m_OptFeatPanel, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer13Static = new wxStaticBox(itemStaticBoxSizer2->GetStaticBox(), wxID_ANY, _("Suppress Features"));
    wxStaticBoxSizer* itemStaticBoxSizer13 = new wxStaticBoxSizer(itemStaticBoxSizer13Static, wxHORIZONTAL);
    itemStaticBoxSizer2->Add(itemStaticBoxSizer13, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_SuppressedFeatureTypeList = new wxTextCtrl( itemStaticBoxSizer13->GetStaticBox(), ID_SUPPRESSFEATURETYPELIST, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY );
    itemStaticBoxSizer13->Add(m_SuppressedFeatureTypeList, 0, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer15 = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer13->Add(itemBoxSizer15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_SuppressTransposon = new wxCheckBox( itemStaticBoxSizer13->GetStaticBox(), ID_AD_MOBILE_ELEMENT, _("Mobile element subfeatures"), wxDefaultPosition, wxDefaultSize, 0 );
    m_SuppressTransposon->SetValue(false);
    itemBoxSizer15->Add(m_SuppressTransposon, 0, wxALIGN_LEFT|wxALL, 5);

    m_SupressGeneCluster = new wxCheckBox( itemStaticBoxSizer13->GetStaticBox(), ID_AD_GENE_CLUSTER, _("Gene cluster/locus subfeatures (both strands)"), wxDefaultPosition, wxDefaultSize, 0 );
    m_SupressGeneCluster->SetValue(false);
    itemBoxSizer15->Add(m_SupressGeneCluster, 0, wxALIGN_LEFT|wxALL, 5);

    m_SuppressLocusTags = new wxCheckBox( itemStaticBoxSizer13->GetStaticBox(), ID_AD_LOCUS_TAG, _("Locus tags"), wxDefaultPosition, wxDefaultSize, 0 );
    m_SuppressLocusTags->SetValue(false);
    itemBoxSizer15->Add(m_SuppressLocusTags, 0, wxALIGN_LEFT|wxALL, 5);

    m_SuppressAltSplice = new wxCheckBox( itemStaticBoxSizer13->GetStaticBox(), ID_AD_ALT_SPLICE_PHRASE, _("Alternative splice phrase"), wxDefaultPosition, wxDefaultSize, 0 );
    m_SuppressAltSplice->SetValue(false);
    itemBoxSizer15->Add(m_SuppressAltSplice, 0, wxALIGN_LEFT|wxALL, 5);

    m_SuppressMiscFeatSubFeat = new wxCheckBox( itemStaticBoxSizer13->GetStaticBox(), ID_AD_MISC_FEAT_SUBFEAT, _("Misc_feature subfeatures"), wxDefaultPosition, wxDefaultSize, 0 );
    m_SuppressMiscFeatSubFeat->SetValue(false);
    itemBoxSizer15->Add(m_SuppressMiscFeatSubFeat, 0, wxALIGN_LEFT|wxALL, 5);

    // Connect events and objects
    m_SuppressedFeatureTypeList->Connect(ID_SUPPRESSFEATURETYPELIST, wxEVT_LEFT_DOWN, wxMouseEventHandler(CAutodefFeatClausePanel::OnLeftDown), NULL, this);
////@end CAutodefFeatClausePanel content construction
}


/*!
 * Should we show tooltips?
 */

bool CAutodefFeatClausePanel::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CAutodefFeatClausePanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CAutodefFeatClausePanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CAutodefFeatClausePanel bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CAutodefFeatClausePanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CAutodefFeatClausePanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CAutodefFeatClausePanel icon retrieval
}


void CAutodefFeatClausePanel::Clear()
{
    m_SuppressAltSplice->SetValue (false);
    m_UseNcRNAComment->SetValue (false);
    m_SuppressTransposon->SetValue (false);
    m_SupressGeneCluster->SetValue (false);
    m_SuppressLocusTags->SetValue (false);
    m_SuppressMiscFeatSubFeat->SetValue(false);

    m_ProductClauseChoice->SetSelection (9);
    m_AppendAltSplice->SetValue (false);
    m_FeatureListChoice->SetSelection (0);

    m_OptFeatPanel->Clear();
    m_SuppressedFeatures.clear();
    x_UpdateSuppressedFeatureTypeList();
}


void CAutodefFeatClausePanel::x_UpdateSuppressedFeatureTypeList()
{
    string label = "";
    if (m_SuppressedFeatures.empty()) {
        label = "No individual feature types are suppressed";
    } else {
        size_t pos = 0;
        size_t num_items = m_SuppressedFeatures.size();
        ITERATE(set<objects::CFeatListItem>, it, m_SuppressedFeatures) {
            if (!NStr::IsBlank(label)) {
                if (num_items > 2) {
                    label += ",";
                }
                label += " ";
                if (pos == num_items - 1) {
                    label += "and ";
                }
            }
            label += it->GetDescription();
            pos++;
        }
        label += " feature types are suppressed";
    }
    m_SuppressedFeatureTypeList->SetValue(ToWxString(label));
}


void CAutodefFeatClausePanel::SetParams(SAutodefParams* params)
{
    if (!params) {
        Clear();
        return;
    }
    m_SuppressAltSplice->SetValue (params->m_SuppressFeatureAltSplice);
    m_UseNcRNAComment->SetValue (params->m_UseNcRNAComment);
    m_SuppressTransposon->SetValue (params->m_SuppressMobileElementSubfeatures);
    m_SupressGeneCluster->SetValue (params->m_GeneClusterOppStrand);
    m_SuppressLocusTags->SetValue (params->m_SuppressLocusTags);
    m_SuppressMiscFeatSubFeat->SetValue(params->m_SuppressMiscFeatSubfeatures);

    if (params->m_SpecifyNuclearProduct) {
        m_ProductClauseChoice->SetSelection (10);
    }
    else {
        m_ProductClauseChoice->SetSelection(0);
        if (params->m_ProductFlag > 0) {
            switch (params->m_ProductFlag) {
            case objects::CBioSource::eGenome_mitochondrion:
                m_ProductClauseChoice->SetSelection(1);
                break;
            case objects::CBioSource::eGenome_chloroplast:
                m_ProductClauseChoice->SetSelection(2);
                break;
            case objects::CBioSource::eGenome_kinetoplast:
                m_ProductClauseChoice->SetSelection(3);
                break;
            case objects::CBioSource::eGenome_plastid:
                m_ProductClauseChoice->SetSelection(4);
                break;
            case objects::CBioSource::eGenome_chromoplast:
                m_ProductClauseChoice->SetSelection(5);
                break;
            case objects::CBioSource::eGenome_cyanelle:
                m_ProductClauseChoice->SetSelection(6);
                break;
            case objects::CBioSource::eGenome_apicoplast:
                m_ProductClauseChoice->SetSelection(7);
                break;
            case objects::CBioSource::eGenome_leucoplast:
                m_ProductClauseChoice->SetSelection(8);
                break;
            case objects::CBioSource::eGenome_proplastid:
                m_ProductClauseChoice->SetSelection(9);
                break;
            }
        }
        else if (params->m_NuclearCopyFlag > 0) {
            switch (params->m_NuclearCopyFlag) {
            case objects::CBioSource::eGenome_mitochondrion:
                m_ProductClauseChoice->SetSelection(11);
                break;
            case objects::CBioSource::eGenome_chloroplast:
                m_ProductClauseChoice->SetSelection(12);
                break;
            case objects::CBioSource::eGenome_kinetoplast:
                m_ProductClauseChoice->SetSelection(13);
                break;
            case objects::CBioSource::eGenome_plastid:
                m_ProductClauseChoice->SetSelection(14);
                break;
            case objects::CBioSource::eGenome_chromoplast:
                m_ProductClauseChoice->SetSelection(15);
                break;
            case objects::CBioSource::eGenome_cyanelle:
                m_ProductClauseChoice->SetSelection(16);
                break;
            case objects::CBioSource::eGenome_apicoplast:
                m_ProductClauseChoice->SetSelection(17);
                break;
            case objects::CBioSource::eGenome_leucoplast:
                m_ProductClauseChoice->SetSelection(18);
                break;
            case objects::CBioSource::eGenome_proplastid:
                m_ProductClauseChoice->SetSelection(19);
                break;
            }
        }
    }
    m_AppendAltSplice->SetValue (params->m_AltSpliceFlag);
    m_CustomPhrase->SetValue(params->m_CustomFeatureClause);
    if (!NStr::IsBlank(params->m_CustomFeatureClause)) {
        m_FeatureListChoice->SetSelection(6);
        m_CustomPhrase->Enable(true);
    } else {
        m_FeatureListChoice->SetSelection(params->m_FeatureListType);
        m_CustomPhrase->Enable(false);
    }

    // suppressed features
    m_SuppressedFeatures = params->m_SuppressedFeatures;
    x_UpdateSuppressedFeatureTypeList();

    m_OptFeatPanel->SetParams(params);
}

void CAutodefFeatClausePanel::PopulateParams(SAutodefParams& params)
{
    params.m_SuppressFeatureAltSplice = m_SuppressAltSplice->GetValue();
    params.m_SuppressMobileElementSubfeatures = m_SuppressTransposon->GetValue ();
    params.m_SuppressMiscFeatSubfeatures = m_SuppressMiscFeatSubFeat->GetValue();
    params.m_GeneClusterOppStrand = m_SupressGeneCluster->GetValue ();
    params.m_SuppressLocusTags = m_SuppressLocusTags->GetValue ();

    int selected = m_ProductClauseChoice->GetSelection();

    if (selected == 10) {
        params.m_SpecifyNuclearProduct = true;
    } else {
        params.m_SpecifyNuclearProduct = false;
        params.m_ProductFlag = objects::CBioSource::eGenome_unknown;
        params.m_NuclearCopyFlag = objects::CBioSource::eGenome_unknown;
        if (selected < 10) {
            switch (selected) {
            case 1:
                params.m_ProductFlag = objects::CBioSource::eGenome_mitochondrion;
                break;
            case 2:
                params.m_ProductFlag = objects::CBioSource::eGenome_chloroplast;
                break;
            case 3:
                params.m_ProductFlag = objects::CBioSource::eGenome_kinetoplast;
                break;
            case 4:
                params.m_ProductFlag = objects::CBioSource::eGenome_plastid;
                break;
            case 5:
                params.m_ProductFlag = objects::CBioSource::eGenome_chromoplast;
                break;
            case 6:
                params.m_ProductFlag = objects::CBioSource::eGenome_cyanelle;
                break;
            case 7:
                params.m_ProductFlag = objects::CBioSource::eGenome_apicoplast;
                break;
            case 8:
                params.m_ProductFlag = objects::CBioSource::eGenome_leucoplast;
                break;
            case 9:
                params.m_ProductFlag = objects::CBioSource::eGenome_proplastid;
                break;
            }
        }
        else if (selected > 10) {
            switch (selected) {
            case 11:
                params.m_NuclearCopyFlag = objects::CBioSource::eGenome_mitochondrion;
                break;
            case 12:
                params.m_NuclearCopyFlag = objects::CBioSource::eGenome_chloroplast;
                break;
            case 13:
                params.m_NuclearCopyFlag = objects::CBioSource::eGenome_kinetoplast;
                break;
            case 14:
                params.m_NuclearCopyFlag = objects::CBioSource::eGenome_plastid;
                break;
            case 15:
                params.m_NuclearCopyFlag = objects::CBioSource::eGenome_chromoplast;
                break;
            case 16:
                params.m_NuclearCopyFlag = objects::CBioSource::eGenome_cyanelle;
                break;
            case 17:
                params.m_NuclearCopyFlag = objects::CBioSource::eGenome_apicoplast;
                break;
            case 18:
                params.m_NuclearCopyFlag = objects::CBioSource::eGenome_leucoplast;
                break;
            case 19:
                params.m_NuclearCopyFlag = objects::CBioSource::eGenome_proplastid;
                break;
            }
        }
    }

    params.m_AltSpliceFlag = m_AppendAltSplice->GetValue ();
    params.m_UseNcRNAComment = m_UseNcRNAComment->GetValue();
    int val = m_FeatureListChoice->GetSelection ();
    switch (val) {
        case 0: 
            params.m_FeatureListType = objects::CAutoDefOptions::eListAllFeatures;
            break;
        case 1:
            params.m_FeatureListType = objects::CAutoDefOptions::eCompleteSequence;
            break;
        case 2:
            params.m_FeatureListType = objects::CAutoDefOptions::ePartialSequence;
            break;
        case 3:
            params.m_FeatureListType = objects::CAutoDefOptions::eCompleteGenome;
            break;
        case 4:
            params.m_FeatureListType = objects::CAutoDefOptions::ePartialGenome;
            break;
        case 5:
            params.m_FeatureListType = objects::CAutoDefOptions::eSequence;
            break;
        case 6:
            params.m_CustomFeatureClause = m_CustomPhrase->GetValue();
            break;
        default:
            params.m_FeatureListType = objects::CAutoDefOptions::eListAllFeatures;
            break;
    }

    params.m_SuppressedFeatures = m_SuppressedFeatures;

    m_OptFeatPanel->PopulateParams(params);
}


/*!
 * wxEVT_LEFT_DOWN event handler for ID_SUPPRESSFEATURETYPELIST
 */

void CAutodefFeatClausePanel::OnLeftDown( wxMouseEvent& event )
{
    CFeatureCheckDialog dlg(this);
    dlg.SetSelected (m_SuppressedFeatures);
    if (dlg.ShowModal() == wxID_OK) {
        m_SuppressedFeatures.clear();
        dlg.GetSelected(m_SuppressedFeatures);
        x_UpdateSuppressedFeatureTypeList();
    }
}


void CAutodefFeatClausePanel::x_AllowFeatureOptions(bool val)
{
    m_SuppressAltSplice->Enable(val);
    m_ProductClauseChoice->Enable(val);
    m_AppendAltSplice->Enable(val);
    m_UseNcRNAComment->Enable(val);
    m_OptFeatPanel->Enable(val);
    m_SuppressedFeatureTypeList->Enable(val);
    m_SuppressTransposon->Enable(val);
    m_SupressGeneCluster->Enable(val);
    m_SuppressLocusTags->Enable(val);
    m_SuppressAltSplice->Enable(val);
    m_SuppressMiscFeatSubFeat->Enable(val);
}

/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_AD_LISTCHOICE
 */

void CAutodefFeatClausePanel::OnAdListchoiceSelected( wxCommandEvent& event )
{
    int val = m_FeatureListChoice->GetSelection();
    if (val == 6) {
        m_CustomPhrase->Enable(true);
    } else {
        m_CustomPhrase->Enable(false);
    }
    if (val == 0) {
        x_AllowFeatureOptions(true);
    } else {
        x_AllowFeatureOptions(false);
    }
}


END_NCBI_SCOPE

