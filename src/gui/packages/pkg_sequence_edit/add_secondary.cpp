/* $Id: add_secondary.cpp 42186 2019-01-09 19:34:50Z asztalos $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Igor Filippov
 */


#include <ncbi_pch.hpp>
#include <objects/seqblock/GB_block.hpp>
#include <objects/seqblock/seqblock_macros.hpp>
#include <objects/general/Date.hpp>
#include <objects/general/Date_std.hpp>
#include <objmgr/seqdesc_ci.hpp>
#include <gui/objutils/cmd_create_desc.hpp>
#include <gui/objutils/descriptor_change.hpp>   
#include <objects/seq/Seq_hist.hpp>
#include <objects/seq/Seq_hist_rec.hpp>
#include <gui/objutils/cmd_change_bioseq_inst.hpp>
////@begin includes
////@end includes

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes
#include "growable_list.hpp"
#include <gui/packages/pkg_sequence_edit/add_secondary.hpp>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE
USING_SCOPE(objects);

/*
 * CAddSecondary type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CAddSecondary, wxDialog )


/*
 * CAddSecondary event table definition
 */

BEGIN_EVENT_TABLE( CAddSecondary, wxDialog )

////@begin CAddSecondary event table entries
EVT_BUTTON( ID_CADDSECONDARY_BUTTON, CAddSecondary::DeleteAllKeywords)
////@end CAddSecondary event table entries

END_EVENT_TABLE()


/*
 * CAddSecondary constructors
 */

CAddSecondary::CAddSecondary()
{
    Init();
}

CAddSecondary::CAddSecondary( wxWindow* parent, CSeq_entry_Handle seh, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
: m_TopSeqEntry(seh)
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * CAddSecondary creator
 */

bool CAddSecondary::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CAddSecondary creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CAddSecondary creation
    return true;
}


/*
 * CAddSecondary destructor
 */

CAddSecondary::~CAddSecondary()
{
////@begin CAddSecondary destruction
////@end CAddSecondary destruction
}


/*
 * Member initialisation
 */

void CAddSecondary::Init()
{
////@begin CAddSecondary member initialisation
    m_Division = NULL;
    m_Origin = NULL;
    m_OldDate = NULL;
    m_Source = NULL;
    m_Taxonomy = NULL;
    m_SecondaryAccessions = NULL;
    m_CopyToReplaces = NULL;
    m_RetainReplaces = NULL;
    m_Keywords = NULL;
    m_HTGS_DRAFT = NULL;
    m_HTGS_ACTIVEFIN = NULL;
    m_TPA_EXPERIMENTAL = NULL;
    m_TPA_REASSEMBLY = NULL;
    m_HTGS_FULLTOP = NULL;
    m_HTGS_CANCELLED = NULL;
    m_TPA_INFERENTIAL = NULL;
    m_BARCODE = NULL;
    m_TPA_SPECIALIST_DB = NULL;
    m_UNORDERED = NULL;
    m_Date = NULL;
////@end CAddSecondary member initialisation
}


/*
 * Control creation for CAddSecondary
 */

void CAddSecondary::CreateControls()
{    
////@begin CAddSecondary content construction
    // Generated by DialogBlocks, 10/09/2015 12:56:14 (unregistered)

    CAddSecondary* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, _("Division"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_Division = new wxTextCtrl( itemDialog1, ID_CADDSECONDARY_TEXTCTRL, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(m_Division, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemDialog1, wxID_STATIC, _("Origin"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText6, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_Origin = new wxTextCtrl( itemDialog1, ID_CADDSECONDARY_TEXTCTRL1, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(m_Origin, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText8 = new wxStaticText( itemDialog1, wxID_STATIC, _("Old Date"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText8, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_OldDate = new wxTextCtrl( itemDialog1, ID_CADDSECONDARY_TEXTCTRL2, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(m_OldDate, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText10 = new wxStaticText( itemDialog1, wxID_STATIC, _("Source"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText10, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_Source = new wxTextCtrl( itemDialog1, ID_CADDSECONDARY_TEXTCTRL3, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(m_Source, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText12 = new wxStaticText( itemDialog1, wxID_STATIC, _("Taxonomy"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText12, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_Taxonomy = new wxTextCtrl( itemDialog1, ID_CADDSECONDARY_TEXTCTRL4, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE );
    itemBoxSizer3->Add(m_Taxonomy, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText14 = new wxStaticText( itemDialog1, wxID_STATIC, _("Secondary Accessions"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText14, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxArrayString secondary_accessions;
    m_SecondaryAccessions = new CGrowableListCtrl( itemDialog1, secondary_accessions, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(m_SecondaryAccessions, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_CopyToReplaces = new wxCheckBox( itemDialog1, ID_CADDSECONDARY_CHECKBOX, _("Copy to Bioseq.history.replaces"), wxDefaultPosition, wxDefaultSize, 0 );
    m_CopyToReplaces->SetValue(false);
    itemBoxSizer3->Add(m_CopyToReplaces, 0, wxALIGN_LEFT|wxALL, 5);

    m_RetainReplaces = new wxCheckBox( itemDialog1, ID_CADDSECONDARY_CHECKBOX1, _("Retain old Bioseq.history.replaces"), wxDefaultPosition, wxDefaultSize, 0 );
    m_RetainReplaces->SetValue(false);
    itemBoxSizer3->Add(m_RetainReplaces, 0, wxALIGN_LEFT|wxALL, 5);

    wxStaticText* itemStaticText18 = new wxStaticText( itemDialog1, wxID_STATIC, _("Keywords"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText18, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxArrayString keywords;
    m_Keywords = new CGrowableListCtrl( itemDialog1, keywords, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(m_Keywords, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);


    wxBoxSizer* itemBoxSizer20 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer3->Add(itemBoxSizer20, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer21 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer20->Add(itemBoxSizer21, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_HTGS_DRAFT = new wxCheckBox( itemDialog1, ID_CADDSECONDARY_CHECKBOX2, _("HTGS_DRAFT"), wxDefaultPosition, wxDefaultSize, 0 );
    m_HTGS_DRAFT->SetValue(false);
    itemBoxSizer21->Add(m_HTGS_DRAFT, 0, wxALIGN_LEFT|wxALL, 5);

    m_HTGS_ACTIVEFIN = new wxCheckBox( itemDialog1, ID_CADDSECONDARY_CHECKBOX3, _("HTGS_ACTIVEFIN"), wxDefaultPosition, wxDefaultSize, 0 );
    m_HTGS_ACTIVEFIN->SetValue(false);
    itemBoxSizer21->Add(m_HTGS_ACTIVEFIN, 0, wxALIGN_LEFT|wxALL, 5);

    m_TPA_EXPERIMENTAL = new wxCheckBox( itemDialog1, ID_CADDSECONDARY_CHECKBOX4, _("TPA:EXPERIMENTAL"), wxDefaultPosition, wxDefaultSize, 0 );
    m_TPA_EXPERIMENTAL->SetValue(false);
    itemBoxSizer21->Add(m_TPA_EXPERIMENTAL, 0, wxALIGN_LEFT|wxALL, 5);

    m_TPA_REASSEMBLY = new wxCheckBox( itemDialog1, ID_CADDSECONDARY_CHECKBOX5, _("TPA:REASSEMBLY"), wxDefaultPosition, wxDefaultSize, 0 );
    m_TPA_REASSEMBLY->SetValue(false);
    itemBoxSizer21->Add(m_TPA_REASSEMBLY, 0, wxALIGN_LEFT|wxALL, 5);

    m_BARCODE = new wxCheckBox( itemDialog1, ID_CADDSECONDARY_CHECKBOX9, _("BARCODE"), wxDefaultPosition, wxDefaultSize, 0 );
    m_BARCODE->SetValue(false);
    itemBoxSizer21->Add(m_BARCODE, 0, wxALIGN_LEFT|wxALL, 5);

    wxBoxSizer* itemBoxSizer26 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer20->Add(itemBoxSizer26, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_HTGS_FULLTOP = new wxCheckBox( itemDialog1, ID_CADDSECONDARY_CHECKBOX6, _("HTGS_FULLTOP"), wxDefaultPosition, wxDefaultSize, 0 );
    m_HTGS_FULLTOP->SetValue(false);
    itemBoxSizer26->Add(m_HTGS_FULLTOP, 0, wxALIGN_LEFT|wxALL, 5);

    m_HTGS_CANCELLED = new wxCheckBox( itemDialog1, ID_CADDSECONDARY_CHECKBOX7, _("HTGS_CANCELLED"), wxDefaultPosition, wxDefaultSize, 0 );
    m_HTGS_CANCELLED->SetValue(false);
    itemBoxSizer26->Add(m_HTGS_CANCELLED, 0, wxALIGN_LEFT|wxALL, 5);

    m_TPA_INFERENTIAL = new wxCheckBox( itemDialog1, ID_CADDSECONDARY_CHECKBOX8, _("TPA:INFERENTIAL"), wxDefaultPosition, wxDefaultSize, 0 );
    m_TPA_INFERENTIAL->SetValue(false);
    itemBoxSizer26->Add(m_TPA_INFERENTIAL, 0, wxALIGN_LEFT|wxALL, 5);

    m_TPA_SPECIALIST_DB = new wxCheckBox( itemDialog1, ID_CADDSECONDARY_CHECKBOX10, _("TPA::SPECIALIST_DB"), wxDefaultPosition, wxDefaultSize, 0 );
    m_TPA_SPECIALIST_DB->SetValue(false);
    itemBoxSizer26->Add(m_TPA_SPECIALIST_DB, 0, wxALIGN_LEFT|wxALL, 5);

    m_UNORDERED = new wxCheckBox( itemDialog1, ID_CADDSECONDARY_CHECKBOX11, _("UNORDERED"), wxDefaultPosition, wxDefaultSize, 0 );
    m_UNORDERED->SetValue(false);
    itemBoxSizer26->Add(m_UNORDERED, 0, wxALIGN_LEFT|wxALL, 5);

    wxButton* itemButton20 = new wxButton( itemDialog1, ID_CADDSECONDARY_BUTTON, _("Delete All Keywords"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemButton20, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_Date = new wxDatePickerCtrl( itemDialog1, ID_CADDSECONDARY_DATECTRL, wxDateTime(), wxDefaultPosition, wxDefaultSize, wxDP_DEFAULT );
    itemBoxSizer3->Add(m_Date, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer22 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer3->Add(itemBoxSizer22, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton23 = new wxButton( itemDialog1, wxID_OK, _("Accept"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer22->Add(itemButton23, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton24 = new wxButton( itemDialog1, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer22->Add(itemButton24, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
////@end CAddSecondary content construction
}

bool CAddSecondary::TransferDataToWindow()
{
    CSeqdesc_CI desc_iter(m_TopSeqEntry, CSeqdesc::e_Genbank,1);
    if (desc_iter)       
    {
        const CSeqdesc::TGenbank &genbank = desc_iter->GetGenbank();
        if (genbank.IsSetDiv())
            m_Division->SetValue(wxString(genbank.GetDiv()));
        if (genbank.IsSetOrigin())
            m_Origin->SetValue(wxString(genbank.GetOrigin()));
        if (genbank.IsSetDate())
            m_OldDate->SetValue(wxString(genbank.GetDate()));
        if (genbank.IsSetSource())
            m_Source->SetValue(wxString(genbank.GetSource()));
        if (genbank.IsSetTaxonomy())
            m_Taxonomy->SetValue(wxString(genbank.GetTaxonomy()));
        if (genbank.IsSetEntry_date() && genbank.GetEntry_date().IsStd())
        {
            int year = 1900;
            int  month = 1;
            int day = 1;
            const CDate_std &date = genbank.GetEntry_date().GetStd();
            if (date.IsSetYear())
                year = date.GetYear();
            if (date.IsSetMonth())
                month = date.GetMonth();
            if (date.IsSetDay())
                day = date.GetDay();
            wxDateTime dmy(day, wxDateTime::Month(wxDateTime::Jan + month - 1), year,0,0,0,0);
            m_Date->SetValue(dmy);
        }
        if (genbank.IsSetExtra_accessions())
        {
            
            wxArrayString secondary_accessions;
            FOR_EACH_EXTRAACCN_ON_GENBANKBLOCK(accession, genbank)
            {
                secondary_accessions.Add(wxString(*accession));
            }
            m_SecondaryAccessions->SetItems(secondary_accessions);
        }
        if (genbank.IsSetKeywords())
        {
            wxArrayString keywords;
            FOR_EACH_KEYWORD_ON_GENBANKBLOCK(keyword,genbank)
            {
                if (*keyword == "HTGS_DRAFT")
                    m_HTGS_DRAFT->SetValue(true);
                else if (*keyword ==  "HTGS_FULLTOP")
                    m_HTGS_FULLTOP->SetValue(true);
                else if (*keyword == "HTGS_ACTIVEFIN")
                    m_HTGS_ACTIVEFIN->SetValue(true);
                else if (*keyword == "HTGS_CANCELLED")
                    m_HTGS_CANCELLED->SetValue(true);
                else if (*keyword == "TPA:experimental")
                    m_TPA_EXPERIMENTAL->SetValue(true);
                else if (*keyword == "TPA:inferential")
                    m_TPA_INFERENTIAL->SetValue(true);
                else if (*keyword == "TPA:assembly")
                    m_TPA_REASSEMBLY->SetValue(true);
                else if (*keyword == "TPA:specialist_db")
                    m_TPA_SPECIALIST_DB->SetValue(true);
                else if (*keyword == "BARCODE")
                    m_BARCODE->SetValue(true);
                else if (*keyword == "UNORDERED")
                    m_UNORDERED->SetValue(true);
                else 
                    keywords.Add(wxString(*keyword));
            }
            m_Keywords->SetItems(keywords);
        }
    }
    return wxDialog::TransferDataToWindow();
}

/*
 * Should we show tooltips?
 */

bool CAddSecondary::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CAddSecondary::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CAddSecondary bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CAddSecondary bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CAddSecondary::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CAddSecondary icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CAddSecondary icon retrieval
}

CRef<CCmdComposite> CAddSecondary::GetCommand()
{
    CRef<CCmdComposite> cmd(new CCmdComposite("Add Secondary"));
    CRef<objects::CSeqdesc> new_desc( new objects::CSeqdesc );
    CSeqdesc::TGenbank &new_genbank = new_desc->SetGenbank();

    if (!m_Division->GetValue().IsEmpty())
        new_genbank.SetDiv(m_Division->GetValue().ToStdString());
    if (!m_Origin->GetValue().IsEmpty())
        new_genbank.SetOrigin(m_Origin->GetValue().ToStdString());
    if (!m_OldDate->GetValue().IsEmpty())
        new_genbank.SetDate(m_OldDate->GetValue().ToStdString());
    if (!m_Source->GetValue().IsEmpty())
        new_genbank.SetSource(m_Source->GetValue().ToStdString());
    if (!m_Taxonomy->GetValue().IsEmpty())
        new_genbank.SetTaxonomy(m_Taxonomy->GetValue().ToStdString());

    new_genbank.SetEntry_date().SetStd().SetYear(m_Date->GetValue().GetYear());
    new_genbank.SetEntry_date().SetStd().SetMonth(m_Date->GetValue().GetMonth() - wxDateTime::Jan + 1);
    new_genbank.SetEntry_date().SetStd().SetDay(m_Date->GetValue().GetDay());

    vector<string> secondary_accessions;
    m_SecondaryAccessions->GetItems(secondary_accessions);
    for (size_t i = 0; i < secondary_accessions.size(); i++)
    {
        bool range(false);
        if (NStr::Find(secondary_accessions[i], "-") != NPOS)
        {
            string first, last;
            NStr::SplitInTwo(secondary_accessions[i], "-", first, last);
            int start = NStr::StringToInt(first, NStr::fConvErr_NoThrow | NStr::fAllowLeadingSymbols);
            int end = NStr::StringToInt(last, NStr::fConvErr_NoThrow | NStr::fAllowLeadingSymbols);
            NStr::ReplaceInPlace(first, NStr::IntToString(start), kEmptyStr);
            NStr::ReplaceInPlace(last, NStr::IntToString(end), kEmptyStr);
            if (first == last && start <= end)
            {
                for ( ; start <= end; ++start)
                    new_genbank.SetExtra_accessions().push_back(first + NStr::IntToString(start));
                range = true;
            }
        }

        if (!range)
        {
            new_genbank.SetExtra_accessions().push_back(secondary_accessions[i]);
        }
    }

    if ( m_HTGS_DRAFT->GetValue() )
        new_genbank.SetKeywords().push_back("HTGS_DRAFT");
    if ( m_HTGS_FULLTOP->GetValue() )
        new_genbank.SetKeywords().push_back("HTGS_FULLTOP");
    if ( m_HTGS_ACTIVEFIN->GetValue() )
        new_genbank.SetKeywords().push_back("HTGS_ACTIVEFIN");
    if ( m_HTGS_CANCELLED->GetValue() )
        new_genbank.SetKeywords().push_back("HTGS_CANCELLED");
    if ( m_TPA_EXPERIMENTAL->GetValue() )
        new_genbank.SetKeywords().push_back("TPA:experimental");
    if ( m_TPA_INFERENTIAL->GetValue() )
        new_genbank.SetKeywords().push_back("TPA:inferential");
    if ( m_TPA_REASSEMBLY->GetValue() )
        new_genbank.SetKeywords().push_back("TPA:assembly");
    if ( m_TPA_SPECIALIST_DB->GetValue() )
        new_genbank.SetKeywords().push_back("TPA:specialist_db");
    if ( m_BARCODE->GetValue() )
        new_genbank.SetKeywords().push_back("BARCODE");
    if ( m_UNORDERED->GetValue() )
        new_genbank.SetKeywords().push_back("UNORDERED");

    vector<string> keywords;
    m_Keywords->GetItems(keywords);
    for (size_t i = 0; i < keywords.size(); i++)
        new_genbank.SetKeywords().push_back(keywords[i]);
 
    CSeqdesc_CI desc_iter(m_TopSeqEntry, CSeqdesc::e_Genbank,1);
    if (desc_iter) 
    {
        CRef<CCmdChangeSeqdesc> ecmd(new CCmdChangeSeqdesc(desc_iter.GetSeq_entry_Handle(), *desc_iter, *new_desc));
        cmd->AddCommand (*ecmd);
    } else 
    {
        cmd->AddCommand( *CRef<CCmdCreateDesc>(new CCmdCreateDesc(m_TopSeqEntry, *new_desc)) );
    }

    if ( m_CopyToReplaces->GetValue() && m_TopSeqEntry.IsSeq())
    {
        CBioseq_Handle bsh = m_TopSeqEntry.GetSeq();
        CRef<CSeq_inst> new_inst(new CSeq_inst());
        if (bsh.GetBioseqCore()->IsSetInst())
            new_inst->Assign(bsh.GetBioseqCore()->GetInst());    
        new_inst->SetHist().ResetReplaces();

        for (size_t i = 0; i < secondary_accessions.size(); i++)
        {
            CRef<CSeq_id> id(new CSeq_id(secondary_accessions[i], CSeq_id::fParse_Default));
            new_inst->SetHist().SetReplaces().SetIds().push_back(id);
        }
        
        if (m_RetainReplaces->GetValue() && bsh.GetBioseqCore()->IsSetInst())
        {
            const CSeq_inst &inst = bsh.GetBioseqCore()->GetInst();
            if (inst.IsSetHist() && inst.GetHist().IsSetReplaces() && inst.GetHist().GetReplaces().IsSetIds())
                for (CSeq_hist_rec::TIds::const_iterator i = inst.GetHist().GetReplaces().GetIds().begin(); i != inst.GetHist().GetReplaces().GetIds().end(); ++i)
                {
                    CRef<CSeq_id> id(new CSeq_id());
                    id->Assign(**i);
                    new_inst->SetHist().SetReplaces().SetIds().push_back(id);
                }
        }
        cmd->AddCommand(*CRef<CCmdChangeBioseqInst>(new CCmdChangeBioseqInst(bsh, *new_inst)));
    }
    return cmd;
}

void CAddSecondary::DeleteAllKeywords(wxCommandEvent& event )
{
    m_HTGS_DRAFT->SetValue(false);
    m_HTGS_ACTIVEFIN->SetValue(false);
    m_TPA_EXPERIMENTAL->SetValue(false);
    m_TPA_REASSEMBLY->SetValue(false);
    m_BARCODE->SetValue(false);
    m_HTGS_FULLTOP->SetValue(false);
    m_HTGS_CANCELLED->SetValue(false);
    m_TPA_INFERENTIAL->SetValue(false);
    m_TPA_SPECIALIST_DB->SetValue(false);
    m_UNORDERED->SetValue(false);
    wxArrayString keywords;
    m_Keywords->SetItems(keywords);
    Refresh();
}

/*
genbank {
          extra-accessions {
            "fff" } ,
          source "ddd" ,
          keywords {     
            "HTGS_DRAFT" ,
            "HTGS_FULLTOP" ,
            "HTGS_ACTIVEFIN" ,
            "HTGS_CANCELLED" ,
            "TPA:experimental" ,
            "TPA:inferential" ,
            "TPA:assembly" ,
            "TPA:specialist_db" ,
            "BARCODE" ,
            "UNORDERED" ,
            "ggg" } ,
          origin "bbb" ,
          date "ccc" ,
          entry-date
            std {
              year 1975 ,
              month 5 ,
              day 12 } ,
          div "aaa" ,
          taxonomy "eee" } } ,

 hist {
          replaces {
            ids {   
              genbank {
                accession "fff" } } } } } ,
*/
END_NCBI_SCOPE
