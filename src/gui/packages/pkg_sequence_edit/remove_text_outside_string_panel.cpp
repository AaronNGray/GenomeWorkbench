/*  $Id: remove_text_outside_string_panel.cpp 41480 2018-08-03 14:36:21Z filippov $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Colleen Bollin
 */


// Generated by DialogBlocks (unregistered), 15/07/2013 13:54:19

#include <ncbi_pch.hpp>

#include <wx/icon.h>
////@begin includes
////@end includes

#include <gui/packages/pkg_sequence_edit/remove_text_outside_string_panel.hpp>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE

/*!
 * CRemoveTextOutsideStringPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CRemoveTextOutsideStringPanel, wxPanel )


/*!
 * CRemoveTextOutsideStringPanel event table definition
 */

BEGIN_EVENT_TABLE( CRemoveTextOutsideStringPanel, wxPanel )

////@begin CRemoveTextOutsideStringPanel event table entries
    EVT_CHECKBOX( ID_BEFORE_CHECKBOX, CRemoveTextOutsideStringPanel::OnBeforeCheckboxClick )

    EVT_RADIOBUTTON( ID_BEFORE_TEXT_BTN, CRemoveTextOutsideStringPanel::OnBeforeTextBtnSelected )

    EVT_RADIOBUTTON( ID_BEFORE_DIGITS_BTN, CRemoveTextOutsideStringPanel::OnBeforeDigitsBtnSelected )

    EVT_RADIOBUTTON( ID_BEFORE_LETTERS_BTN, CRemoveTextOutsideStringPanel::OnBeforeLettersBtnSelected )

    EVT_CHECKBOX( ID_AFTER_CHECKBOX, CRemoveTextOutsideStringPanel::OnAfterCheckboxClick )

    EVT_RADIOBUTTON( ID_AFTER_TEXT_BTN, CRemoveTextOutsideStringPanel::OnAfterTextBtnSelected )

    EVT_RADIOBUTTON( ID_AFTER_DIGITS_BTN, CRemoveTextOutsideStringPanel::OnAfterDigitsBtnSelected )

    EVT_RADIOBUTTON( ID_AFTER_LETTERS_BTN, CRemoveTextOutsideStringPanel::OnAfterLettersBtnSelected )

////@end CRemoveTextOutsideStringPanel event table entries

END_EVENT_TABLE()


/*!
 * CRemoveTextOutsideStringPanel constructors
 */

CRemoveTextOutsideStringPanel::CRemoveTextOutsideStringPanel()
{
    Init();
}

CRemoveTextOutsideStringPanel::CRemoveTextOutsideStringPanel( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*!
 * CRemoveTextOutsideStringPanel creator
 */

bool CRemoveTextOutsideStringPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CRemoveTextOutsideStringPanel creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CRemoveTextOutsideStringPanel creation
    return true;
}


/*!
 * CRemoveTextOutsideStringPanel destructor
 */

CRemoveTextOutsideStringPanel::~CRemoveTextOutsideStringPanel()
{
////@begin CRemoveTextOutsideStringPanel destruction
////@end CRemoveTextOutsideStringPanel destruction
}


/*!
 * Member initialisation
 */

void CRemoveTextOutsideStringPanel::Init()
{
////@begin CRemoveTextOutsideStringPanel member initialisation
    m_BeforeCheckbox = NULL;
    m_BeforeTextBtn = NULL;
    m_BeforeTextTxt = NULL;
    m_BeforeDigitsBtn = NULL;
    m_BeforeLettersBtn = NULL;
    m_AlsoRemoveBefore = NULL;
    m_AfterCheckbox = NULL;
    m_AfterTextBtn = NULL;
    m_AfterTextTxt = NULL;
    m_AfterDigitsBtn = NULL;
    m_AfterLettersBtn = NULL;
    m_AlsoRemoveAfter = NULL;
    m_CaseBtn = NULL;
    m_WholeWordBtn = NULL;
////@end CRemoveTextOutsideStringPanel member initialisation
}


/*!
 * Control creation for CRemoveTextOutsideStringPanel
 */

void CRemoveTextOutsideStringPanel::CreateControls()
{    
////@begin CRemoveTextOutsideStringPanel content construction
    CRemoveTextOutsideStringPanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxFlexGridSizer* itemFlexGridSizer3 = new wxFlexGridSizer(2, 6, 0, 0);
    itemBoxSizer2->Add(itemFlexGridSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_BeforeCheckbox = new wxCheckBox( itemPanel1, ID_BEFORE_CHECKBOX, _("Before"), wxDefaultPosition, wxDefaultSize, 0 );
    m_BeforeCheckbox->SetValue(false);
    itemFlexGridSizer3->Add(m_BeforeCheckbox, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_BeforeTextBtn = new wxRadioButton( itemPanel1, ID_BEFORE_TEXT_BTN, _("Text"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    m_BeforeTextBtn->SetValue(true);
    itemFlexGridSizer3->Add(m_BeforeTextBtn, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_BeforeTextTxt = new wxTextCtrl( itemPanel1, ID_BEFORE_TEXT_TXT, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer3->Add(m_BeforeTextTxt, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_BeforeDigitsBtn = new wxRadioButton( itemPanel1, ID_BEFORE_DIGITS_BTN, _("Digits"), wxDefaultPosition, wxDefaultSize, 0 );
    m_BeforeDigitsBtn->SetValue(false);
    itemFlexGridSizer3->Add(m_BeforeDigitsBtn, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_BeforeLettersBtn = new wxRadioButton( itemPanel1, ID_BEFORE_LETTERS_BTN, _("Letters"), wxDefaultPosition, wxDefaultSize, 0 );
    m_BeforeLettersBtn->SetValue(false);
    itemFlexGridSizer3->Add(m_BeforeLettersBtn, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_AlsoRemoveBefore = new wxCheckBox( itemPanel1, ID_ALSO_REMOVE_BEFORE, _("Also remove search pattern"), wxDefaultPosition, wxDefaultSize, 0 );
    m_AlsoRemoveBefore->SetValue(false);
    itemFlexGridSizer3->Add(m_AlsoRemoveBefore, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_AfterCheckbox = new wxCheckBox( itemPanel1, ID_AFTER_CHECKBOX, _("After"), wxDefaultPosition, wxDefaultSize, 0 );
    m_AfterCheckbox->SetValue(false);
    itemFlexGridSizer3->Add(m_AfterCheckbox, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_AfterTextBtn = new wxRadioButton( itemPanel1, ID_AFTER_TEXT_BTN, _("Text"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    m_AfterTextBtn->SetValue(true);
    itemFlexGridSizer3->Add(m_AfterTextBtn, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_AfterTextTxt = new wxTextCtrl( itemPanel1, ID_AFTER_TEXT_TXT, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer3->Add(m_AfterTextTxt, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_AfterDigitsBtn = new wxRadioButton( itemPanel1, ID_AFTER_DIGITS_BTN, _("Digits"), wxDefaultPosition, wxDefaultSize, 0 );
    m_AfterDigitsBtn->SetValue(false);
    itemFlexGridSizer3->Add(m_AfterDigitsBtn, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_AfterLettersBtn = new wxRadioButton( itemPanel1, ID_AFTER_LETTERS_BTN, _("Letters"), wxDefaultPosition, wxDefaultSize, 0 );
    m_AfterLettersBtn->SetValue(false);
    itemFlexGridSizer3->Add(m_AfterLettersBtn, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_AlsoRemoveAfter = new wxCheckBox( itemPanel1, ID_ALSO_REMOVE_AFTER, _("Also remove search pattern"), wxDefaultPosition, wxDefaultSize, 0 );
    m_AlsoRemoveAfter->SetValue(false);
    itemFlexGridSizer3->Add(m_AlsoRemoveAfter, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer16 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer16, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_CaseBtn = new wxCheckBox( itemPanel1, ID_CASE_BTN, _("Case Insensitive"), wxDefaultPosition, wxDefaultSize, 0 );
    m_CaseBtn->SetValue(false);
    itemBoxSizer16->Add(m_CaseBtn, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_WholeWordBtn = new wxCheckBox( itemPanel1, ID_WHOLE_WORD_BTN, _("Whole Word"), wxDefaultPosition, wxDefaultSize, 0 );
    m_WholeWordBtn->SetValue(false);
    itemBoxSizer16->Add(m_WholeWordBtn, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end CRemoveTextOutsideStringPanel content construction
    x_UpdateControls();
}

void CRemoveTextOutsideStringPanel::ClearValues()
{
    m_BeforeCheckbox->SetValue(false);
    m_BeforeTextBtn->SetValue(true);
    m_BeforeTextTxt->SetValue(wxEmptyString);
    m_BeforeDigitsBtn->SetValue(false);
    m_BeforeLettersBtn->SetValue(false);
    m_AlsoRemoveBefore->SetValue(false);
    m_AfterCheckbox->SetValue(false);
    m_AfterTextBtn->SetValue(true);
    m_AfterTextTxt->SetValue(wxEmptyString);
    m_AfterDigitsBtn->SetValue(false);
    m_AfterLettersBtn->SetValue(false);
    m_AlsoRemoveAfter->SetValue(false);
    m_CaseBtn->SetValue(false);
    m_WholeWordBtn->SetValue(false);
    x_UpdateControls();
}

/*!
 * Should we show tooltips?
 */

bool CRemoveTextOutsideStringPanel::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CRemoveTextOutsideStringPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CRemoveTextOutsideStringPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CRemoveTextOutsideStringPanel bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CRemoveTextOutsideStringPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CRemoveTextOutsideStringPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CRemoveTextOutsideStringPanel icon retrieval
}


/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_BEFORE_CHECKBOX
 */

void CRemoveTextOutsideStringPanel::OnBeforeCheckboxClick( wxCommandEvent& event )
{
    x_UpdateControls();
}


/*!
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_BEFORE_TEXT_BTN
 */

void CRemoveTextOutsideStringPanel::OnBeforeTextBtnSelected( wxCommandEvent& event )
{
    x_UpdateControls();
}


/*!
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_BEFORE_DIGITS_BTN
 */

void CRemoveTextOutsideStringPanel::OnBeforeDigitsBtnSelected( wxCommandEvent& event )
{
    x_UpdateControls();
}


/*!
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_BEFORE_LETTERS_BTN
 */

void CRemoveTextOutsideStringPanel::OnBeforeLettersBtnSelected( wxCommandEvent& event )
{
    x_UpdateControls();
}




/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_AFTER_CHECKBOX
 */

void CRemoveTextOutsideStringPanel::OnAfterCheckboxClick( wxCommandEvent& event )
{
    x_UpdateControls();
}


/*!
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_AFTER_TEXT_BTN
 */

void CRemoveTextOutsideStringPanel::OnAfterTextBtnSelected( wxCommandEvent& event )
{
    x_UpdateControls();
}




/*!
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_AFTER_DIGITS_BTN
 */

void CRemoveTextOutsideStringPanel::OnAfterDigitsBtnSelected( wxCommandEvent& event )
{
    x_UpdateControls();
}


/*!
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_AFTER_LETTERS_BTN
 */

void CRemoveTextOutsideStringPanel::OnAfterLettersBtnSelected( wxCommandEvent& event )
{
    x_UpdateControls();
}


CRef<macro::CRemoveTextOptions> CRemoveTextOutsideStringPanel::GetRemoveTextOptions()
{
    macro::CRemoveTextOptions::EMatchType before_match = macro::CRemoveTextOptions::eNone;
    string before_text = "";
    bool remove_before_match = false;
    if (m_BeforeCheckbox->GetValue()) {
        if (m_BeforeTextBtn->GetValue()) {
            before_match = macro::CRemoveTextOptions::eText;
            before_text = m_BeforeTextTxt->GetValue();
        } else if (m_BeforeDigitsBtn->GetValue()) {
            before_match = macro::CRemoveTextOptions::eDigits;
        } else if (m_BeforeLettersBtn->GetValue()) {
            before_match = macro::CRemoveTextOptions::eLetters;
        }
        remove_before_match = m_AlsoRemoveBefore->GetValue();
    }
    macro::CRemoveTextOptions::EMatchType after_match = macro::CRemoveTextOptions::eNone;
    string after_text = "";
    bool remove_after_match = false;
    if (m_AfterCheckbox->GetValue()) {
        if (m_AfterTextBtn->GetValue()) {
            after_match = macro::CRemoveTextOptions::eText;
            after_text = m_AfterTextTxt->GetValue();
        } else if (m_AfterDigitsBtn->GetValue()) {
            after_match = macro::CRemoveTextOptions::eDigits;
        } else if (m_AfterLettersBtn->GetValue()) {
            after_match = macro::CRemoveTextOptions::eLetters;
        }
        remove_after_match = m_AlsoRemoveAfter->GetValue();
    }
    bool case_insensitive = false;
    bool whole_word = false;
    if (m_CaseBtn->IsEnabled() && m_CaseBtn->GetValue()) {
        case_insensitive = true;
    }
    if (m_WholeWordBtn->IsEnabled() && m_WholeWordBtn->GetValue()) {
        whole_word = true;
    }


    CRef<macro::CRemoveTextOptions> 
    remove_text(new macro::CRemoveTextOptions(before_match, before_text, remove_before_match,
                                            after_match, after_text, remove_after_match,
                                            case_insensitive, whole_word));
    return remove_text;
}


void CRemoveTextOutsideStringPanel::x_UpdateControls()
{
    bool enable_text_only_options = false;
    if (m_BeforeCheckbox->GetValue()) {
        m_BeforeTextBtn->Enable(true);
        m_BeforeTextTxt->Enable(m_BeforeTextBtn->GetValue());
        m_BeforeDigitsBtn->Enable(true);
        m_BeforeLettersBtn->Enable(true);
        m_AlsoRemoveBefore->Enable(true);
        if (m_BeforeTextBtn->GetValue()) {
            enable_text_only_options = true;
        }
    } else {
        m_BeforeTextBtn->Enable(false);
        m_BeforeTextTxt->Enable(false);
        m_BeforeDigitsBtn->Enable(false);
        m_BeforeLettersBtn->Enable(false);
        m_AlsoRemoveBefore->Enable(false);
    }
    if (m_AfterCheckbox->GetValue()) {
        m_AfterTextBtn->Enable(true);
        m_AfterTextTxt->Enable(m_AfterTextBtn->GetValue());
        m_AfterDigitsBtn->Enable(true);
        m_AfterLettersBtn->Enable(true);
        m_AlsoRemoveAfter->Enable(true);
        if (m_AfterTextBtn->GetValue()) {
            enable_text_only_options = true;
        }
    } else {
        m_AfterTextBtn->Enable(false);
        m_AfterTextTxt->Enable(false);
        m_AfterDigitsBtn->Enable(false);
        m_AfterLettersBtn->Enable(false);
        m_AlsoRemoveAfter->Enable(false);
    }
    m_CaseBtn->Enable(enable_text_only_options);
    m_WholeWordBtn->Enable(enable_text_only_options);
}

END_NCBI_SCOPE
