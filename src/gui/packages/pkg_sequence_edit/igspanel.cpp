/*  $Id: igspanel.cpp 28329 2013-06-19 11:58:38Z bollin $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Colleen Bollin
 */


#include <ncbi_pch.hpp>
#include <objmgr/bioseq_ci.hpp>
#include <objects/seqfeat/Imp_feat.hpp>
#include <objects/seqloc/Seq_id.hpp>
#include <gui/objutils/cmd_create_feat.hpp>
#include <gui/widgets/wx/wx_utils.hpp>

////@begin includes
////@end includes

#include <gui/packages/pkg_sequence_edit/igspanel.hpp>
#include <gui/packages/pkg_sequence_edit/subprep_util.hpp>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE

/*!
 * CIGSPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CIGSPanel, CBulkCmdPanel )


/*!
 * CIGSPanel event table definition
 */

BEGIN_EVENT_TABLE( CIGSPanel, CBulkCmdPanel )

////@begin CIGSPanel event table entries
////@end CIGSPanel event table entries

END_EVENT_TABLE()


/*!
 * CIGSPanel constructors
 */

CIGSPanel::CIGSPanel()
{
    Init();
}

CIGSPanel::CIGSPanel( wxWindow* parent, objects::CSeq_entry_Handle seh, 
                             CSourceRequirements::EWizardType wizard_type,
                             CSourceRequirements::EWizardSrcType src_type,
                             wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
: m_TopSeqEntry(seh),
  m_WizardType (wizard_type),
  m_SrcType (src_type)
{
    Init();
    Create(parent, id, pos, size, style);
}


/*!
 * CIGSPanel creator
 */

bool CIGSPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CIGSPanel creation
    CBulkCmdPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CIGSPanel creation
    return true;
}


/*!
 * CIGSPanel destructor
 */

CIGSPanel::~CIGSPanel()
{
////@begin CIGSPanel destruction
////@end CIGSPanel destruction
}


/*!
 * Member initialisation
 */

void CIGSPanel::Init()
{
////@begin CIGSPanel member initialisation
////@end CIGSPanel member initialisation
}


/*!
 * Control creation for CIGSPanel
 */

void CIGSPanel::CreateControls()
{    
////@begin CIGSPanel content construction
    // Generated by DialogBlocks, 10/06/2013 17:55:37 (unregistered)

    CIGSPanel* itemCBulkCmdPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemCBulkCmdPanel1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

////@end CIGSPanel content construction
    m_Flank5 = new CIGSFlankPanel ( this );
    itemBoxSizer3->Add (m_Flank5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
    m_Flank3 = new CIGSFlankPanel ( this );
    itemBoxSizer3->Add (m_Flank3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
}


/*!
 * Should we show tooltips?
 */

bool CIGSPanel::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CIGSPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CIGSPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CIGSPanel bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CIGSPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CIGSPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CIGSPanel icon retrieval
}


CRef<CCmdComposite> CIGSPanel::GetCommand()
{
    string igs_left, igs_right;
    string igs_name = "";
    string flank_left;
    string flank_right;
    bool   may_contain = false;
    bool   partial5 = false;
    bool   partial3 = false;

    igs_left = m_Flank5->GetIGSLabel();
    igs_right = m_Flank3->GetIGSLabel();
    if (NStr::IsBlank(igs_left) || NStr::IsBlank(igs_right)) {
        CRef<CCmdComposite> empty;
        return empty;
    }
    igs_name = igs_left + "-" + igs_right + " intergenic spacer";
    flank_left = m_Flank5->GetFlankLabel();
    flank_right = m_Flank3->GetFlankLabel();
    may_contain = m_Flank5->MayContainFeat() || m_Flank3->MayContainFeat();
    if (NStr::IsBlank(flank_left)) {
        if (NStr::IsBlank(flank_right)) {
            // do nothing
        } else {
            igs_name = igs_name + " and " + flank_right;
            if (may_contain) {
                igs_name = "may contain " + igs_name;
            }
        }
    } else {
        if (NStr::IsBlank(flank_right)) {
            igs_name = flank_left + " and " + igs_name;
        } else {
            igs_name = flank_left + ", " + igs_name + ", and " + flank_right;
        }
        if (may_contain) {
            igs_name = "may contain " + igs_name;
        }
    }        

    CRef<CCmdComposite> cmd (new CCmdComposite("Bulk Add IGS Features"));
    
    objects::CBioseq_CI b_iter(m_TopSeqEntry, objects::CSeq_inst::eMol_na);
    for ( ; b_iter ; ++b_iter ) {
        if (AlreadyHasFeature(*b_iter, "misc_feature", igs_name)) {
            continue;
        }
        CRef<objects::CSeq_feat> new_feat(new objects::CSeq_feat());
        new_feat->SetData().SetImp().SetKey("misc_feature");
        new_feat->SetComment(igs_name);
        CRef<objects::CSeq_id> new_feat_id(new objects::CSeq_id());
        new_feat_id->Assign(*(b_iter->GetCompleteBioseq()->GetId().front()));
        new_feat->SetLocation().SetInt().SetId(*new_feat_id);
        new_feat->SetLocation().SetInt().SetFrom(0);
        new_feat->SetLocation().SetInt().SetTo(b_iter->GetBioseqLength() - 1);
        new_feat->SetLocation().SetPartialStart(partial5, objects::eExtreme_Biological);
        new_feat->SetLocation().SetPartialStop(partial3, objects::eExtreme_Biological);
        objects::CSeq_entry_Handle seh = b_iter->GetSeq_entry_Handle();
        cmd->AddCommand(*CRef<CCmdCreateFeat>(new CCmdCreateFeat(seh, *new_feat)));
    }
    return cmd;
}


string CIGSPanel::GetErrorMessage ()
{
    string left, right;
    string error_message = "Missing Information";

    left = m_Flank5->GetIGSLabel();
    right = m_Flank3->GetIGSLabel();
    
    if (NStr::IsBlank(left)) {
        if (NStr::IsBlank(right)) {
            error_message = "You must specify both genes for the intergenic spacer name.";
        } else {
            error_message = "You must specify the 5' gene for the intergenic spacer name.";
        }
    } else if (NStr::IsBlank(right)) {
        error_message = "You must specify the 3' gene for the intergenic spacer name.";
    }
    return error_message;
}


END_NCBI_SCOPE
