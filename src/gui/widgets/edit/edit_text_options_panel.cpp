/*  $Id: edit_text_options_panel.cpp 39693 2017-10-26 17:30:42Z asztalos $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Colleen Bollin
 */


// Generated by DialogBlocks (unregistered), 21/06/2013 07:11:28

#include <ncbi_pch.hpp>

////@begin includes
////@end includes

#include <gui/widgets/edit/edit_text_options_panel.hpp>
#include <gui/widgets/wx/wx_utils.hpp>

#include <wx/sizer.h>
#include <wx/stattext.h>
#include <wx/button.h>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE

USING_SCOPE(ncbi::objects);

/*!
 * CEditTextOptionsPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CEditTextOptionsPanel, wxPanel )


/*!
 * CEditTextOptionsPanel event table definition
 */

BEGIN_EVENT_TABLE( CEditTextOptionsPanel, wxPanel )

////@begin CEditTextOptionsPanel event table entries
    EVT_BUTTON( ID_EDITTEXTOPTIONS_COPY, CEditTextOptionsPanel::OnEdittextoptionsCopyClick )
    EVT_CHECKBOX( ID_EDITTEXTOPTIONS_REGEX, CEditTextOptionsPanel::OnRegExCheck )
////@end CEditTextOptionsPanel event table entries

END_EVENT_TABLE()


/*!
 * CEditTextOptionsPanel constructors
 */

CEditTextOptionsPanel::CEditTextOptionsPanel()
{
    Init();
}

CEditTextOptionsPanel::CEditTextOptionsPanel( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*!
 * CEditTextOptionsPanel creator
 */

bool CEditTextOptionsPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CEditTextOptionsPanel creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CEditTextOptionsPanel creation
    return true;
}


/*!
 * CEditTextOptionsPanel destructor
 */

CEditTextOptionsPanel::~CEditTextOptionsPanel()
{
////@begin CEditTextOptionsPanel destruction
////@end CEditTextOptionsPanel destruction
}


/*!
 * Member initialisation
 */

void CEditTextOptionsPanel::Init()
{
////@begin CEditTextOptionsPanel member initialisation
    m_Find = NULL;
    m_Replace = NULL;
    m_Anywhere = NULL;
    m_Beginning = NULL;
    m_End = NULL;
    m_IgnoreCase = NULL;
    m_IsRegex = NULL;
////@end CEditTextOptionsPanel member initialisation
}


/*!
 * Control creation for CEditTextOptionsPanel
 */

void CEditTextOptionsPanel::CreateControls()
{    
////@begin CEditTextOptionsPanel content construction
    CEditTextOptionsPanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxFlexGridSizer* itemFlexGridSizer3 = new wxFlexGridSizer(0, 3, 0, 0);
    itemBoxSizer2->Add(itemFlexGridSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemPanel1, wxID_STATIC, _("Find"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_Find = new wxTextCtrl( itemPanel1, ID_EDITTEXTOPTIONS_FIND, wxEmptyString, wxDefaultPosition, wxSize(250, -1), 0 );
    itemFlexGridSizer3->Add(m_Find, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemFlexGridSizer3->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText7 = new wxStaticText( itemPanel1, wxID_STATIC, _("Replace"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer3->Add(itemStaticText7, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_Replace = new wxTextCtrl( itemPanel1, ID_EDITTEXTOPTIONS_REPLACE, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer3->Add(m_Replace, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton9 = new wxButton( itemPanel1, ID_EDITTEXTOPTIONS_COPY, _("Copy"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer3->Add(itemButton9, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer10 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer10, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_Anywhere = new wxRadioButton( itemPanel1, ID_EDITTEXTOPTIONS_ANYWHERE, _("Anywhere in field"), wxDefaultPosition, wxDefaultSize, 0 );
    m_Anywhere->SetValue(true);
    itemBoxSizer10->Add(m_Anywhere, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_Beginning = new wxRadioButton( itemPanel1, ID_EDITTEXTOPTIONS_BEGINNING, _("At the beginning of the field"), wxDefaultPosition, wxDefaultSize, 0 );
    m_Beginning->SetValue(false);
    itemBoxSizer10->Add(m_Beginning, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_End = new wxRadioButton( itemPanel1, ID_EDITTEXTOPTIONS_END, _("At the end of the field"), wxDefaultPosition, wxDefaultSize, 0 );
    m_End->SetValue(false);
    itemBoxSizer10->Add(m_End, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer11 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer11, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_IsRegex = new wxCheckBox( itemPanel1, ID_EDITTEXTOPTIONS_REGEX, _("Regular expression"), wxDefaultPosition, wxDefaultSize, 0 );
    m_IsRegex->SetValue(false);
    itemBoxSizer11->Add(m_IsRegex, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_IgnoreCase = new wxCheckBox( itemPanel1, ID_EDITTEXTOPTIONS_CASE, _("Case insensitive"), wxDefaultPosition, wxDefaultSize, 0 );
    m_IgnoreCase->SetValue(false);
    itemBoxSizer11->Add(m_IgnoreCase, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end CEditTextOptionsPanel content construction
}

void CEditTextOptionsPanel::ClearValues()
{
    m_Find->SetValue(wxEmptyString);
    m_Replace->SetValue(wxEmptyString);
    m_Anywhere->SetValue(true);
    m_Beginning->SetValue(false);
    m_End->SetValue(false);
    m_IgnoreCase->SetValue(false);
    m_IsRegex->SetValue(false);
    m_Anywhere->Enable();
    m_Beginning->Enable();
    m_End->Enable();
}

/*!
 * Should we show tooltips?
 */

bool CEditTextOptionsPanel::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CEditTextOptionsPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CEditTextOptionsPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CEditTextOptionsPanel bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CEditTextOptionsPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CEditTextOptionsPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CEditTextOptionsPanel icon retrieval
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_COPY_BTN
 */

void CEditTextOptionsPanel::OnEdittextoptionsCopyClick( wxCommandEvent& event )
{
    wxString str = m_Find->GetValue();
    m_Replace->SetValue(str);
}

void CEditTextOptionsPanel::OnRegExCheck( wxCommandEvent& event )
{
    if (m_IsRegex->GetValue())
    {
        m_Anywhere->Disable();
        m_Beginning->Disable();
        m_End->Disable();
    }
    else
    {
        m_Anywhere->Enable();
        m_Beginning->Enable();
        m_End->Enable();
    }
    event.Skip();
}

   
bool CEditTextOptionsPanel::EditText(string& str)
{
    string find = ToStdString(m_Find->GetValue());
    string replace = ToStdString(m_Replace->GetValue());
    bool case_sensitive = !(m_IgnoreCase->GetValue());
    bool is_regex =  m_IsRegex->GetValue();
    macro::CMacroFunction_EditStringQual::ESearchLoc loc = macro::CMacroFunction_EditStringQual::eAnywhere;
    
    if (m_Beginning->GetValue()) {
        loc = macro::CMacroFunction_EditStringQual::eBeginning;
    } else if (m_End->GetValue()) {
        loc = macro::CMacroFunction_EditStringQual::eEnd;
    }
    return macro::CMacroFunction_EditStringQual::s_EditText(str, find, replace, loc, case_sensitive, is_regex);
}
 

void CEditTextOptionsPanel::SetFind(const string& str)
{
    m_Find->SetValue(ToWxString(str));
}

string  CEditTextOptionsPanel::GetFind()
{
    return m_Find->GetValue().ToStdString();
}

string  CEditTextOptionsPanel::GetReplace()
{
    return m_Replace->GetValue().ToStdString();
}

bool  CEditTextOptionsPanel::GetIgnoreCase()
{
    return m_IgnoreCase->GetValue();
}

bool  CEditTextOptionsPanel::GetIsRegex()
{
    return m_IsRegex->GetValue();
}

macro::CMacroFunction_EditStringQual::ESearchLoc CEditTextOptionsPanel::GetSearchLoc()
{
    macro::CMacroFunction_EditStringQual::ESearchLoc loc = macro::CMacroFunction_EditStringQual::eAnywhere;
    
    if (m_Beginning->GetValue()) {
        loc = macro::CMacroFunction_EditStringQual::eBeginning;
    } else if (m_End->GetValue()) {
        loc = macro::CMacroFunction_EditStringQual::eEnd;
    }
    return loc;
}

END_NCBI_SCOPE
