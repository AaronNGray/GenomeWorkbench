/*  $Id: feature_type_panel.cpp 44427 2019-12-17 17:31:30Z asztalos $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Colleen Bollin
 */


// Generated by DialogBlocks (unregistered), 12/06/2013 08:31:07

#include <ncbi_pch.hpp>
#include <gui/objutils/utils.hpp>
#include <gui/widgets/wx/wx_utils.hpp>
#include <objects/seqfeat/SeqFeatData.hpp>

#include <gui/widgets/edit/feature_type_panel.hpp>
#include <gui/packages/pkg_sequence_edit/featedit_util.hpp>
#include <wx/sizer.h>
#include <wx/toplevel.h>

////@begin XPM images
////@end XPM images


BEGIN_NCBI_SCOPE

USING_SCOPE(ncbi::objects);

/*!
 * CFeatureTypePanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CFeatureTypePanel, CFieldNamePanel )

BEGIN_EVENT_TABLE( CFeatureTypePanel, CFieldNamePanel )

    EVT_LISTBOX( ID_LISTBOX1, CFeatureTypePanel::OnListbox1Selected )

END_EVENT_TABLE()


/*!
 * CFeatureTypePanel constructors
 */

CFeatureTypePanel::CFeatureTypePanel()
{
    Init();
}

CFeatureTypePanel::CFeatureTypePanel( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*!
 * CFeatureTypePanel creator
 */

bool CFeatureTypePanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CFeatureTypePanel creation
    CFieldNamePanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CFeatureTypePanel creation
    return true;
}


/*!
 * CFeatureTypePanel destructor
 */

CFeatureTypePanel::~CFeatureTypePanel()
{
////@begin CFeatureTypePanel destruction
////@end CFeatureTypePanel destruction
}


/*!
 * Member initialisation
 */

void CFeatureTypePanel::Init()
{
////@begin CFeatureTypePanel member initialisation
    m_List = NULL;
////@end CFeatureTypePanel member initialisation
    m_list_all_feats = false;
    m_show_legal_only = false;
}


/*!
 * Control creation for CFeatureTypePanel
 */

void CFeatureTypePanel::CreateControls()
{    
////@begin CFeatureTypePanel content construction
    CFeatureTypePanel* itemCFieldNamePanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemCFieldNamePanel1->SetSizer(itemBoxSizer2);

    wxArrayString m_ListStrings;
    m_List = new wxListBox( itemCFieldNamePanel1, ID_LISTBOX1, wxDefaultPosition, wxSize(128,109), m_ListStrings, wxLB_SINGLE );
#ifdef __WXGTK__
    m_List->SetMinSize(wxSize(170,109));
#endif
    itemBoxSizer2->Add(m_List, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

////@end CFeatureTypePanel content construction
}

void CFeatureTypePanel::ListAnyOption(void)
{
    m_List->Insert(ToWxString("Any"), 0);
}

void CFeatureTypePanel::ListAllOption(void)
{
    m_List->Insert(ToWxString("All"), 0);
}

void CFeatureTypePanel::ClearValues()
{
    m_List->SetSelection(wxNOT_FOUND);
    m_List->SetFirstItem(0);
}


void CFeatureTypePanel::ListPresentFeaturesFirst(const CSeq_entry_Handle& entry, vector<const CFeatListItem *> *pfeatlist)
{
    set<string> existing;
    map<pair<int,int>,string> types;
    m_Featlist.clear();
    
    m_List->Freeze();
    vector<const CFeatListItem *> featlist;
    if (!pfeatlist)
    {
         featlist = GetSortedFeatList(entry);
         pfeatlist = &featlist;
    }
    ITERATE(vector<const CFeatListItem *>, feat_it, *pfeatlist) {
        const CFeatListItem& item = **feat_it;
        string desc = item.GetDescription();
        int feat_type = item.GetType();
        int feat_subtype = item.GetSubtype();
        types[pair<int,int>(feat_type,feat_subtype)] = desc;
        if (existing.find(desc) == existing.end()) {
            existing.insert(desc);
            m_Featlist.push_back(desc);
        }
    }

    m_List->Clear();
    for (size_t i = 1; i < m_Featlist.size(); ++i) {
        CSeqFeatData::ESubtype subtype = CSeqFeatData::SubtypeNameToValue(m_Featlist[i]);
        bool legal = !m_show_legal_only || !CSeqFeatData::GetLegalQualifiers(subtype).empty();
        if ((!s_IsRarelyUsedOrDiscouragedFeatureType(subtype) && !CSeqFeatData::IsRegulatory(subtype) && legal) 
            || m_list_all_feats) {            
            m_List->Append(ToWxString(m_Featlist[i]));
        }
    }
#ifdef __WXMAC__
    m_List->EnsureVisible(0);
#endif
    m_Featlist.clear();
    GetSizer()->SetSizeHints(this);
    m_List->Thaw();
}

/*!
 * Should we show tooltips?
 */

bool CFeatureTypePanel::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CFeatureTypePanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CFeatureTypePanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CFeatureTypePanel bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CFeatureTypePanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CFeatureTypePanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CFeatureTypePanel icon retrieval
}


/*!
 * wxEVT_COMMAND_LISTBOX_SELECTED event handler for ID_LISTBOX1
 */

void CFeatureTypePanel::OnListbox1Selected( wxCommandEvent& event )
{
    x_UpdateParent();
    event.Skip();
}


string CFeatureTypePanel::GetFieldName(const bool subfield)
{
    return ToStdString(m_List->GetStringSelection());
}


bool CFeatureTypePanel::SetFieldName(const string& field)
{
    string feature = field;
    if (NStr::EqualNocase(feature, "cdregion")) {
        feature = "CDS";
    }
    if (NStr::EqualNocase(feature, "miscRNA")) {
        feature = "misc_RNA";
    }
    bool res = m_List->SetStringSelection(ToWxString(feature));
    int sel = m_List->GetSelection();
    if (sel == wxNOT_FOUND)
        sel = 0;
    m_List->SetFirstItem(sel);
    return res;
}

void CFeatureTypePanel::SetShowLegalOnly(bool show)
{
    m_show_legal_only = show;
}

bool CFeatureTypePanel::s_IsRarelyUsedOrDiscouragedFeatureType(int subtype)
{
    if (subtype == CSeqFeatData::eSubtype_bad
        || subtype == CSeqFeatData::eSubtype_conflict
        || subtype == CSeqFeatData::eSubtype_old_sequence
        || subtype == CSeqFeatData::eSubtype_prim_transcript
        || subtype == CSeqFeatData::eSubtype_STS
        || subtype == CSeqFeatData::eSubtype_unsure
        || subtype == CSeqFeatData::eSubtype_allele
        || subtype == CSeqFeatData::eSubtype_assembly_gap
        || subtype == CSeqFeatData::eSubtype_biosrc
        || subtype == CSeqFeatData::eSubtype_bond
        || subtype == CSeqFeatData::eSubtype_clone
        || subtype == CSeqFeatData::eSubtype_gap
        || subtype == CSeqFeatData::eSubtype_het
        || subtype == CSeqFeatData::eSubtype_imp
        || subtype == CSeqFeatData::eSubtype_mat_peptide
        || subtype == CSeqFeatData::eSubtype_mutation
        || subtype == CSeqFeatData::eSubtype_non_std_residue
        || subtype == CSeqFeatData::eSubtype_num
        || subtype == CSeqFeatData::eSubtype_org
        || subtype == CSeqFeatData::eSubtype_pub
        || subtype == CSeqFeatData::eSubtype_repeat_unit
        || subtype == CSeqFeatData::eSubtype_satellite
        || subtype == CSeqFeatData::eSubtype_seq
        || subtype == CSeqFeatData::eSubtype_sig_peptide
        || subtype == CSeqFeatData::eSubtype_transit_peptide
        || subtype == CSeqFeatData::eSubtype_variation_ref
        || subtype == CSeqFeatData::eSubtype_virion) {
        return true;
    }
    else {
        return false;
    }
}

END_NCBI_SCOPE


