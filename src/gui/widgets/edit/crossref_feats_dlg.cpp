/*  $Id: crossref_feats_dlg.cpp 32333 2015-02-05 21:05:04Z asztalos $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Andrea Asztalos
 */


// Generated by DialogBlocks (unregistered), 04/02/2015 12:11:44

#include <ncbi_pch.hpp>
#include <objects/seqfeat/Feat_id.hpp>
#include <objects/misc/sequence_macros.hpp>

#include <gui/widgets/wx/wx_utils.hpp>
#include <gui/objutils/cmd_composite.hpp>
#include <gui/objutils/cmd_del_seq_feat.hpp>
#include <gui/objutils/cmd_change_seq_feat.hpp>
#include <gui/widgets/edit/crossref_feats_dlg.hpp>

#include <wx/sizer.h>
#include <wx/stattext.h>
#include <wx/checklst.h>
#include <wx/radiobox.h>
#include <wx/button.h>


BEGIN_NCBI_SCOPE
USING_SCOPE(objects);

/*!
 * CCrossRefFeatsDlg type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CCrossRefFeatsDlg, wxDialog )


/*!
 * CCrossRefFeatsDlg event table definition
 */

BEGIN_EVENT_TABLE( CCrossRefFeatsDlg, wxDialog )

////@begin CCrossRefFeatsDlg event table entries
////@end CCrossRefFeatsDlg event table entries

END_EVENT_TABLE()


/*!
 * CCrossRefFeatsDlg constructors
 */

CCrossRefFeatsDlg::CCrossRefFeatsDlg()
    : m_Featid(0)
{
    Init();
}

CCrossRefFeatsDlg::CCrossRefFeatsDlg( wxWindow* parent, 
    TFeatVec& feats, const CFeat_id::TLocal& feat_id, 
    wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
    : m_Features(feats), m_Featid(&feat_id)
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*!
 * CCrossRefFeatsDlg creator
 */

bool CCrossRefFeatsDlg::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CCrossRefFeatsDlg creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CCrossRefFeatsDlg creation
    return true;
}


/*!
 * CCrossRefFeatsDlg destructor
 */

CCrossRefFeatsDlg::~CCrossRefFeatsDlg()
{
////@begin CCrossRefFeatsDlg destruction
////@end CCrossRefFeatsDlg destruction
}


/*!
 * Member initialisation
 */

void CCrossRefFeatsDlg::Init()
{
////@begin CCrossRefFeatsDlg member initialisation
    m_FeatList = NULL;
    m_Modify = NULL;
////@end CCrossRefFeatsDlg member initialisation
}


/*!
 * Control creation for CCrossRefFeatsDlg
 */

void CCrossRefFeatsDlg::CreateControls()
{    
////@begin CCrossRefFeatsDlg content construction
    // Generated by DialogBlocks, 04/02/2015 14:19:57 (unregistered)

    CCrossRefFeatsDlg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxStaticText* itemStaticText3 = new wxStaticText( itemDialog1, wxID_STATIC, _("The deleted feature is cross referenced in:"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer2->Add(itemStaticText3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxArrayString m_FeatListStrings;
    m_FeatList = new wxCheckListBox( itemDialog1, ID_CHECKLISTBOX, wxDefaultPosition, wxDefaultSize, m_FeatListStrings, wxLB_SINGLE );
    itemBoxSizer2->Add(m_FeatList, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxArrayString m_ModifyStrings;
    m_ModifyStrings.Add(_("&Delete"));
    m_ModifyStrings.Add(_("&Delete feature ID XRef to deleted feature"));
    m_Modify = new wxRadioBox( itemDialog1, ID_RADIOBOX, _("Modify selected features"), wxDefaultPosition, wxDefaultSize, m_ModifyStrings, 1, wxRA_SPECIFY_COLS );
    m_Modify->SetSelection(0);
    itemBoxSizer2->Add(m_Modify, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer6 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer6, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton7 = new wxButton( itemDialog1, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer6->Add(itemButton7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton8 = new wxButton( itemDialog1, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer6->Add(itemButton8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end CCrossRefFeatsDlg content construction
}


bool CCrossRefFeatsDlg::TransferDataToWindow()
{
    ITERATE (TFeatVec, it, m_Features) {
        const CSeq_feat& feat = *(*it).GetOriginalSeq_feat();
        string subtype = CSeqFeatData::SubtypeValueToName(feat.GetData().GetSubtype());
        int start = feat.GetLocation().GetStart(eExtreme_Positional);
        int stop = feat.GetLocation().GetStop(eExtreme_Positional);
        string feat_descr(subtype);
        feat_descr.append(": " + NStr::NumericToString(start) + "..");
        feat_descr.append(NStr::NumericToString(stop));
        int index = m_FeatList->Append(ToWxString(feat_descr));
        m_FeatList->Check(index);
    }  
    return wxDialog::TransferDataToWindow();
}

CRef<CCmdComposite> CCrossRefFeatsDlg::GetCommand()
{
    if (m_Features.empty())
        return CRef<CCmdComposite>();

    CRef<CCmdComposite> cmd(new CCmdComposite("Delete/change features that are referencing the deleted feature"));
    
    if (m_Modify->GetSelection() == 0) { 
        // delete selected features
        for (size_t i = 0; i < m_Features.size(); i++) {
            if (m_FeatList->IsChecked(i)) {
                CIRef<IEditCommand> delFeat(new CCmdDelSeq_feat(m_Features[i]));
                cmd->AddCommand(*delFeat);
            }
        }
        
    } else if (m_Featid) {
        // delete references in the selected features
        for (size_t i = 0; i < m_Features.size(); i++) {
            if (m_FeatList->IsChecked(i)) {
                const CSeq_feat& orig = *m_Features[i].GetOriginalSeq_feat();
                CRef<CSeq_feat> new_feat(new CSeq_feat);
                new_feat->Assign(orig);

                bool modified(false);
                EDIT_EACH_SEQFEATXREF_ON_SEQFEAT (it, *new_feat) {
                    if ((*it)->IsSetId() && (*it)->GetId().IsLocal()) {
                        if (m_Featid->Match((*it)->GetId().GetLocal())) {
                            ERASE_SEQFEATXREF_ON_SEQFEAT (it, *new_feat);
                            modified = true;
                        }
                    }
                }
                if (new_feat->IsSetXref() && new_feat->GetXref().empty()) {
                    new_feat->ResetXref();
                    modified = true;
                }

                if (modified) {
                    CRef<CCmdChangeSeq_feat> chg_feat(new CCmdChangeSeq_feat(m_Features[i], *new_feat));
                    cmd->AddCommand(*chg_feat);
                }
            }
        }
    }
    return cmd;
}
/*!
 * Should we show tooltips?
 */

bool CCrossRefFeatsDlg::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CCrossRefFeatsDlg::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CCrossRefFeatsDlg bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CCrossRefFeatsDlg bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CCrossRefFeatsDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CCrossRefFeatsDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CCrossRefFeatsDlg icon retrieval
}

END_NCBI_SCOPE
