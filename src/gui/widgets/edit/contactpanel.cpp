/*  $Id: contactpanel.cpp 42280 2019-01-24 20:12:34Z asztalos $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Colleen Bollin
 */


#include <ncbi_pch.hpp>
#include <objects/submit/Contact_info.hpp>
#include <objects/biblio/Author.hpp>
#include <objects/general/Person_id.hpp>
#include <objects/general/Name_std.hpp>

#include <gui/objutils/macro_fn_pubfields.hpp>
#include <gui/widgets/wx/wx_utils.hpp>
#include <gui/widgets/edit/serial_member_primitive_validators.hpp>
#include <gui/widgets/edit/submit_dlg_interface.hpp>
#include <gui/widgets/edit/singleauthor_panel.hpp>
#include <gui/widgets/edit/contactpanel.hpp>

#include <wx/sizer.h>
#include <wx/textctrl.h>
#include <wx/choice.h>
#include <wx/button.h>


BEGIN_NCBI_SCOPE
USING_SCOPE(objects);


/*
 * CContactPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CContactPanel, wxPanel )


/*
 * CContactPanel event table definition
 */

BEGIN_EVENT_TABLE( CContactPanel, wxPanel )

END_EVENT_TABLE()


/*
 * CContactPanel constructors
 */

CContactPanel::CContactPanel()
{
    Init();
}

CContactPanel::CContactPanel( wxWindow* parent, CContact_info& object, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
    : m_Contact(&object)
{
    Init();
    Create(parent, id, pos, size, style);
}


/*
 * CContactPanel creator
 */

bool CContactPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CContactPanel creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CContactPanel creation
    return true;
}


/*
 * CContactPanel destructor
 */

CContactPanel::~CContactPanel()
{
////@begin CContactPanel destruction
////@end CContactPanel destruction
}


/*
 * Member initialisation
 */

void CContactPanel::Init()
{
////@begin CContactPanel member initialisation
    m_First = NULL;
    m_MI = NULL;
    m_Last = NULL;
    m_Suffix = NULL;
    m_Phone = NULL;
    m_Fax = NULL;
////@end CContactPanel member initialisation
}


/*
 * Control creation for CContactPanel
 */

void CContactPanel::CreateControls()
{    
////@begin CContactPanel content construction
    // Generated by DialogBlocks, 23/01/2019 16:44:14 (unregistered)

    CContactPanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxFlexGridSizer* itemFlexGridSizer1 = new wxFlexGridSizer(0, 2, 0, 0);
    itemBoxSizer2->Add(itemFlexGridSizer1, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0);

    itemFlexGridSizer1->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxFlexGridSizer* itemFlexGridSizer2 = new wxFlexGridSizer(2, 4, 0, 0);
    itemFlexGridSizer1->Add(itemFlexGridSizer2, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemPanel1, wxID_STATIC, _("First Name"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer2->Add(itemStaticText4, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText5 = new wxStaticText( itemPanel1, wxID_STATIC, _("M.I."), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer2->Add(itemStaticText5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemPanel1, wxID_STATIC, _("Last Name"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer2->Add(itemStaticText6, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText7 = new wxStaticText( itemPanel1, wxID_STATIC, _("Suffix"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer2->Add(itemStaticText7, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_First = new wxTextCtrl( itemPanel1, ID_TXT_CONTACT1, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer2->Add(m_First, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_MI = new wxTextCtrl( itemPanel1, ID_TXT_CONTACT2, wxEmptyString, wxDefaultPosition, wxSize(50, -1), 0 );
    itemFlexGridSizer2->Add(m_MI, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_Last = new wxTextCtrl( itemPanel1, ID_TXT_CONTACT3, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer2->Add(m_Last, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxArrayString m_SuffixStrings;
    m_SuffixStrings.Add(wxEmptyString);
    m_SuffixStrings.Add(_("Jr."));
    m_SuffixStrings.Add(_("Sr."));
    m_SuffixStrings.Add(_("II"));
    m_SuffixStrings.Add(_("III"));
    m_SuffixStrings.Add(_("IV"));
    m_SuffixStrings.Add(_("V"));
    m_SuffixStrings.Add(_("VI"));
    m_Suffix = new wxChoice( itemPanel1, ID_CHOICE, wxDefaultPosition, wxDefaultSize, m_SuffixStrings, 0 );
    itemFlexGridSizer2->Add(m_Suffix, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxStaticText* itemStaticText2 = new wxStaticText( itemPanel1, wxID_STATIC, _("Phone"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer1->Add(itemStaticText2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_Phone = new wxTextCtrl( itemPanel1, ID_TXT_CONTACT4, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer1->Add(m_Phone, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemFlexGridSizer1->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText3 = new wxStaticText( itemPanel1, wxID_STATIC, _("Please include country code for non-U.S. phone numbers"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer1->Add(itemStaticText3, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText1 = new wxStaticText( itemPanel1, wxID_STATIC, _("Fax"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer1->Add(itemStaticText1, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_Fax = new wxTextCtrl( itemPanel1, ID_TXT_CONTACT5, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer1->Add(m_Fax, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText8 = new wxStaticText( itemPanel1, wxID_STATIC, _("Email"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer1->Add(itemStaticText8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxTextCtrl* itemTextCtrl11 = new wxTextCtrl( itemPanel1, ID_TXT_CONTACT6, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer1->Add(itemTextCtrl11, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    // Set validators
    m_Phone->SetValidator( CSerialTextValidator(*m_Contact, "phone") );
    m_Fax->SetValidator( CSerialTextValidator(*m_Contact, "fax") );
    itemTextCtrl11->SetValidator( CSerialTextValidator(*m_Contact, "email") );
////@end CContactPanel content construction
}


bool CContactPanel::TransferDataToWindow()
{
    if (!wxPanel::TransferDataToWindow()) {
        return false;
    }

    if (m_Contact->IsSetContact() 
        && m_Contact->GetContact().IsSetName()
        && m_Contact->GetContact().GetName().IsName()) {
        const CName_std& person = m_Contact->GetContact().GetName().GetName();
        if (person.IsSetFirst()) {
            m_First->SetValue(person.GetFirst());
        }
        if (person.IsSetLast()) {
            m_Last->SetValue(person.GetLast());
        }
        if (person.IsSetSuffix()) {
            m_Suffix->SetStringSelection (person.GetSuffix());
        }
        if (person.IsSetInitials()) {
            string middle_init = CSingleAuthorPanel::s_ParseInitialsFromName(person);
            m_MI->SetValue(middle_init);
        }
    } 
    return true;
}

bool CContactPanel::TransferDataFromWindow()
{
    if (!wxPanel::TransferDataFromWindow()) {
        return false;
    }

    CName_std& person = m_Contact->SetContact().SetName().SetName();
    macro::CMacroFunction_AuthorFix::s_BuildName(
        ToAsciiStdString(m_First->GetValue()),
        ToAsciiStdString(m_MI->GetValue()),
        ToAsciiStdString(m_Last->GetValue()),
        ToAsciiStdString(m_Suffix->GetStringSelection()),
        person);

    return true;
}

void CContactPanel::SetData(const CContact_info& contact)
{
    m_Contact->Assign(contact);
    TransferDataToWindow();
}

/*
 * Should we show tooltips?
 */

bool CContactPanel::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CContactPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CContactPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CContactPanel bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CContactPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CContactPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CContactPanel icon retrieval
}
END_NCBI_SCOPE
