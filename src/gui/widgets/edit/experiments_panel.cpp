/*  $Id: experiments_panel.cpp 25851 2012-05-23 15:45:28Z katargir $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Colleen Bollin
 */


// Generated by DialogBlocks (unregistered), 07/12/2011 12:09:53

#include <ncbi_pch.hpp>
////@begin includes
#include "string_list_ctrl.hpp"
////@end includes

#include "experiments_panel.hpp"
#include <gui/widgets/edit/gbqual_stringlist_validator.hpp>

#include <objects/seqfeat/Seq_feat.hpp>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE
USING_SCOPE(objects);


/*!
 * CExperimentsPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CExperimentsPanel, wxPanel )


/*!
 * CExperimentsPanel event table definition
 */

BEGIN_EVENT_TABLE( CExperimentsPanel, wxPanel )

////@begin CExperimentsPanel event table entries
////@end CExperimentsPanel event table entries

END_EVENT_TABLE()


/*!
 * CExperimentsPanel constructors
 */

CExperimentsPanel::CExperimentsPanel()
{
    Init();
}

CExperimentsPanel::CExperimentsPanel( wxWindow* parent, CSerialObject& object, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
    : m_Object(&object)
{
    Init();
    m_Object = dynamic_cast<CSeq_feat*>(&object);
    const CSeq_feat& seqfeat = dynamic_cast<const CSeq_feat&>(*m_Object);
    m_EditedFeat.Reset((CSerialObject*)CSeq_feat::GetTypeInfo()->Create());
    m_EditedFeat->Assign(seqfeat);
    Create(parent, id, pos, size, style);
}


/*!
 * CExperimentsPanel creator
 */

bool CExperimentsPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CExperimentsPanel creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CExperimentsPanel creation
    return true;
}


/*!
 * CExperimentsPanel destructor
 */

CExperimentsPanel::~CExperimentsPanel()
{
////@begin CExperimentsPanel destruction
////@end CExperimentsPanel destruction
}


/*!
 * Member initialisation
 */

void CExperimentsPanel::Init()
{
////@begin CExperimentsPanel member initialisation
////@end CExperimentsPanel member initialisation
}


/*!
 * Control creation for CExperimentsPanel
 */

void CExperimentsPanel::CreateControls()
{    
////@begin CExperimentsPanel content construction
    CExperimentsPanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 1, wxGROW|wxALL, 0);

    CStringListCtrl* itemScrolledWindow4 = new CStringListCtrl( itemPanel1, ID_WINDOW, wxDefaultPosition, itemPanel1->ConvertDialogToPixels(wxSize(66, 61)), wxSUNKEN_BORDER|wxScrolledWindowStyle|wxTAB_TRAVERSAL );
    if (CExperimentsPanel::ShowToolTips())
        itemScrolledWindow4->SetToolTip(_("Enter wet-bench experimental evidence as free text.  Please be as brief as possible."));
    itemBoxSizer3->Add(itemScrolledWindow4, 1, wxGROW|wxALL, 0);

    // Set validators
    itemScrolledWindow4->SetValidator( CGBQualStringListValidator(*m_Object, "experiment") );
////@end CExperimentsPanel content construction
}


/*!
 * Should we show tooltips?
 */

bool CExperimentsPanel::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CExperimentsPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CExperimentsPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CExperimentsPanel bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CExperimentsPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CExperimentsPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CExperimentsPanel icon retrieval
}

END_NCBI_SCOPE
