/*  $Id: wx_export_alnmulti_img_dlg.cpp 44954 2020-04-27 17:57:36Z evgeniev $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors: Vladislav Evgeniev
 *
 * File Description:
 *
 */
#include <ncbi_pch.hpp>
////@begin includes
////@end includes

#include "wx_export_alnmulti_img_dlg.hpp"
#include <wx/filename.h>
#include <wx/msgdlg.h>
#include <wx/checkbox.h>
#include <wx/filedlg.h>
#include <wx/panel.h>
#include <wx/artprov.h>
#include <wx/valgen.h>

#include <gui/widgets/wx/wx_utils.hpp>
#include <gui/widgets/wx/message_box.hpp>
#include <gui/widgets/wx/ind_progress_bar.hpp>
#include <gui/widgets/wx/async_call.hpp>
#include <gui/widgets/aln_multiple/alnmulti_widget.hpp>
#include <gui/objutils/registry.hpp>
#include <gui/objutils/utils.hpp>
#include <corelib/ncbifile.hpp>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE

IMPLEMENT_DYNAMIC_CLASS( CwxExportAlnmultiImgDlg, wxDialog )

BEGIN_EVENT_TABLE( CwxExportAlnmultiImgDlg, wxDialog )

////@begin CwxExportAlnmultiImgDlg event table entries
    EVT_TEXT( ID_TEXTCTRL5, CwxExportAlnmultiImgDlg::OnTextctrl5TextUpdated )
    EVT_BUTTON( ID_BITMAPBUTTON, CwxExportAlnmultiImgDlg::OnFilepathClick )
    EVT_BUTTON( ID_SAVE, CwxExportAlnmultiImgDlg::OnSaveClick )
    EVT_BUTTON( ID_OPEN, CwxExportAlnmultiImgDlg::OnOpenClick )
    EVT_BUTTON( ID_CANCEL, CwxExportAlnmultiImgDlg::OnCancelClick )
////@end CwxExportAlnmultiImgDlg event table entries

END_EVENT_TABLE()

CwxExportAlnmultiImgDlg::CwxExportAlnmultiImgDlg()
{
    Init();
}

CwxExportAlnmultiImgDlg::CwxExportAlnmultiImgDlg(CPrintOptions::EOutputFormat format, CAlnMultiWidget* widget, wxWindow *parent)
    : m_AlnMultiWidget(widget)
    , m_OutputFormat(format)
{
    Init();
    Create(parent);
}

bool CwxExportAlnmultiImgDlg::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CwxExportAlnmultiImgDlg creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end CwxExportAlnmultiImgDlg creation
    InvalidateBestSize();
    Layout();
    Fit();
    string extension = CPrintOptions::GetFileExtension(m_OutputFormat);
    m_FileExtension = '.' + extension;
    SetTitle(SYMBOL_CWXEXPORTALNMULTIIMGDLG_TITLE + NStr::ToUpper(extension));
    wxString filename;
    filename.Printf(_T("NCBI_MSA_%d_sequences"), m_AlnMultiWidget->GetDataSource()->GetNumRows());
    m_FileName = filename.ToStdString();
    wxString path = ToWxString(m_Path);
    path += wxFileName::GetPathSeparator();
    path += ToStdString(m_FileName + m_FileExtension);
    m_FileNameBox->SetValue(path);
    return true;
}

CwxExportAlnmultiImgDlg::~CwxExportAlnmultiImgDlg()
{
////@begin CwxExportVectorImageDlg destruction
////@end CwxExportVectorImageDlg destruction
    SaveSettings();
}

void CwxExportAlnmultiImgDlg::Init()
{
////@begin CwxExportAlnmultiImgDlg member initialisation
    m_ShowHeader = true;
    m_SimplifiedGraphics = false;
    m_OpenDocument = false;
    m_Panel = NULL;
    m_FileNameBox = NULL;
    m_DisplayHeaderRow = NULL;
    m_SaveSimplified = NULL;
    m_InfoSizer = NULL;
    m_Info = NULL;
    m_SaveButton = NULL;
    m_OpenButton = NULL;
////@end CwxExportAlnmultiImgDlg member initialisation
    m_UserSelectedFilename = false;
    LoadSettings();
}

void CwxExportAlnmultiImgDlg::CreateControls()
{    
////@begin CwxExportAlnmultiImgDlg content construction
    // Generated by DialogBlocks, 27/04/2020 11:28:20 (unregistered)

    CwxExportAlnmultiImgDlg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    m_Panel = new wxPanel( itemDialog1, ID_PANEL3, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
    m_Panel->SetName(wxT("aaaaa"));
    itemBoxSizer2->Add(m_Panel, 0, wxALIGN_CENTER_HORIZONTAL, 5);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxVERTICAL);
    m_Panel->SetSizer(itemBoxSizer4);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer4->Add(itemBoxSizer5, 0, wxGROW|wxLEFT|wxRIGHT|wxTOP, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( m_Panel, wxID_STATIC, _("Save As:"), wxDefaultPosition, wxSize(100, -1), wxALIGN_RIGHT );
    itemBoxSizer5->Add(itemStaticText6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_FileNameBox = new wxTextCtrl( m_Panel, ID_TEXTCTRL5, wxEmptyString, wxDefaultPosition, wxSize(200, -1), 0 );
    itemBoxSizer5->Add(m_FileNameBox, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBitmapButton* itemBitmapButton8 = new wxBitmapButton( m_Panel, ID_BITMAPBUTTON, itemDialog1->GetBitmapResource(wxT("menu::open")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW );
    itemBitmapButton8->SetHelpText(_("Select File"));
    if (CwxExportAlnmultiImgDlg::ShowToolTips())
        itemBitmapButton8->SetToolTip(_("Select File"));
    itemBoxSizer5->Add(itemBitmapButton8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer4->Add(itemBoxSizer1, 0, wxGROW|wxLEFT|wxRIGHT, 5);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer4->Add(itemBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_DisplayHeaderRow = new wxCheckBox( m_Panel, ID_CHECKBOX7, _("Export header row"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    m_DisplayHeaderRow->SetValue(true);
    m_DisplayHeaderRow->SetHelpText(_("Export the header row to the output file"));
    if (CwxExportAlnmultiImgDlg::ShowToolTips())
        m_DisplayHeaderRow->SetToolTip(_("Export the header row to the output file"));
    itemBoxSizer3->Add(m_DisplayHeaderRow, 0, wxGROW|wxALL, 5);

    m_SaveSimplified = new wxCheckBox( m_Panel, ID_CHECKBOX6, _("Simplified graphics"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    m_SaveSimplified->SetValue(false);
    m_SaveSimplified->SetHelpText(_("Removes gradient shading from some elements to support Adobe Illustrator"));
    if (CwxExportAlnmultiImgDlg::ShowToolTips())
        m_SaveSimplified->SetToolTip(_("Makes PDF Adobe Illustrator Compatible"));
    itemBoxSizer3->Add(m_SaveSimplified, 0, wxGROW|wxALL, 5);

    m_InfoSizer = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(m_InfoSizer, 0, wxGROW|wxALL, 5);

    m_Info = new wxStaticText( itemDialog1, wxID_STATIC, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_InfoSizer->Add(m_Info, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT, 5);

    itemBoxSizer2->Add(5, 1, 1, wxALIGN_CENTER_HORIZONTAL|wxALL, 1);

    wxBoxSizer* itemBoxSizer19 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer19, 0, wxALIGN_RIGHT|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    m_SaveButton = new wxButton( itemDialog1, ID_SAVE, _("Save"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer19->Add(m_SaveButton, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 5);

    m_OpenButton = new wxButton( itemDialog1, ID_OPEN, _("Save && Open"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer19->Add(m_OpenButton, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 5);

    wxButton* itemButton22 = new wxButton( itemDialog1, ID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer19->Add(itemButton22, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 5);

    // Set validators
    m_DisplayHeaderRow->SetValidator( wxGenericValidator(& m_ShowHeader) );
    m_SaveSimplified->SetValidator( wxGenericValidator(& m_SimplifiedGraphics) );
////@end CwxExportAlnmultiImgDlg content construction
}

void CwxExportAlnmultiImgDlg::OnTextctrl5TextUpdated( wxCommandEvent& event )
{
    m_UserSelectedFilename = false;
    event.Skip();
}

void CwxExportAlnmultiImgDlg::OnFilepathClick( wxCommandEvent& event )
{
    string full_name = ToAsciiStdString(m_FileNameBox->GetValue());

    // If full_name is just a directory
    string path = full_name;
    string fname;

    CFile f(ToAsciiStdString(m_FileNameBox->GetValue()));
    // If full_name is a valid directory and (existing) file
    if (f.IsFile()) {
        path = f.GetDir();
        fname = f.GetName();
    }
    else if (!f.IsDir()) {
        string d = f.GetDir();
        CDir dir(d);
        // if file_name is valid direcotry and not-yet-created file:
        if (dir.IsDir()) {
            path = f.GetDir();
            fname = f.GetName();
        }
    }

    wxFileDialog dlg(this, wxT("Set File Name"),
        ToWxString(path), ToWxString(fname),
        ToWxString(m_FileExtension), wxFD_SAVE | wxFD_OVERWRITE_PROMPT);

    if (dlg.ShowModal() != wxID_OK)
        return;

    wxString filename = dlg.GetPath();
    m_FileNameBox->SetValue(filename);
    m_FileName = dlg.GetFilename();
    m_Path = dlg.GetDirectory();
    m_UserSelectedFilename = true;
}

void CwxExportAlnmultiImgDlg::OnSaveClick(wxCommandEvent& event)
{
    TransferDataFromWindow();

    // validate file path
    wxFileName file(m_FileNameBox->GetValue());
    wxString filename = file.GetFullName();
    wxString n = filename.Lower();
    size_t pos = filename.rfind(m_FileExtension);
    if (pos != string::npos) {
        filename = filename.SubString(0, pos - 1);
    }
    wxString path = file.GetPath();

    if (path.IsEmpty()) {
        NcbiMessageBox("A directory must be specified!");
        return;
    }
    else if (!wxFileName::DirExists(path)) {
        NcbiMessageBox("The given directory doesn't exist!");
        return;
    }
    else if (filename.IsEmpty()) {
        NcbiMessageBox("A file name must be specified!");
        return;
    }

    m_Path = ToStdString(path);
    m_FileName = ToStdString(filename);
    string full_path = CDir::ConcatPath(m_Path, m_FileName + m_FileExtension);

    // Make sure directory is writable:
    CDir dir(m_Path);
    if (!dir.CheckAccess(CDirEntry::fWrite)) {
        NcbiMessageBox("Error - You do not have write permission to the directory: " + m_Path);
        return;
    }

    if (!m_UserSelectedFilename) {
        // Warn user if file exists.  If the file was selected from the file selection
        // dialog we do not need to do this (if not the file came from the registry and probably
        // does already exist)
        CFile f(full_path);
        if (f.Exists()) {
            if (!f.CheckAccess(CDirEntry::fWrite)) {
                NcbiMessageBox("Error - You do not have write permission to the file: " + full_path);
                return;
            }

            int choice = wxMessageBox(wxT("Selected file already exists.  Are you sure you want to  overwrite it?"),
                wxT("Warning"), wxYES_NO | wxICON_ERROR, this);
            if (choice != wxYES) {
                return;
            }
        }
    }

    m_Panel->Enable(false);
    m_OpenButton->Enable(false);
    m_SaveButton->Enable(false);

    bool result{ false };
    try {
        //result = GUI_AsyncExec([this](ICanceled&) { return m_AlnMultiWidget->SaveVectorImage(m_OutputFormat, m_Path, m_FileName, m_ShowHeader, m_SimplifiedGraphics); }, wxT("Saving image..."));
        result = m_AlnMultiWidget->SaveVectorImage(m_OutputFormat, m_Path, m_FileName, m_ShowHeader, m_SimplifiedGraphics);
    }
    catch (const CException &error) {
        LOG_POST(Error << "Failed to save image: " << error);
    }
    if (m_OpenDocument && result) {
        // May vary from actual name if user did not end file name with proper extension
        wxString full_path = ToWxString(CDir::ConcatPath(m_Path, m_FileName + m_FileExtension));
        wxLaunchDefaultApplication(full_path);
    }

    EndModal(wxID_OK);
}

void CwxExportAlnmultiImgDlg::OnOpenClick( wxCommandEvent& event )
{
    m_OpenDocument = true;
    OnSaveClick(event);
}

void CwxExportAlnmultiImgDlg::OnCancelClick( wxCommandEvent& event )
{
    EndModal(wxID_CANCEL);
}

bool CwxExportAlnmultiImgDlg::ShowToolTips()
{
    return true;
}
wxBitmap CwxExportAlnmultiImgDlg::GetBitmapResource( const wxString& name )
{
    return wxArtProvider::GetBitmap(name);
}
wxIcon CwxExportAlnmultiImgDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CwxExportAlnmultiImgDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CwxExportAlnmultiImgDlg icon retrieval
}

static const string kExportAlnmultiImageBaseKey("GBPlugins.ExportAlnmultiImageDialog");
static const string kExportAlnmultiImagePathKey = "DocumentPath";

void CwxExportAlnmultiImgDlg::LoadSettings()
{
    CGuiRegistry& gui_reg = CGuiRegistry::GetInstance();
    CRegistryReadView view = gui_reg.GetReadView(kExportAlnmultiImageBaseKey);
    string file_path = view.GetString(kExportAlnmultiImagePathKey, "");

    wxFileName file(ToWxString(file_path));
    wxString filename = file.GetFullName();
    wxString path = file.GetPath();

    if (!path.empty() && wxFileName::DirExists(path)) {
        m_Path = file_path;
    }
    else {
        // create a default path under user folder
        m_Path = ToStdString(wxGetHomeDir());
    }
}

void CwxExportAlnmultiImgDlg::SaveSettings() const
{
    if (!m_Path.empty()) {
        CGuiRegistry& gui_reg = CGuiRegistry::GetInstance();
        CRegistryWriteView view = gui_reg.GetWriteView(kExportAlnmultiImageBaseKey);
        view.Set(kExportAlnmultiImagePathKey, m_Path);
    }
}

END_NCBI_SCOPE
