// generated by Fast Light User Interface Designer (fluid) version 1.0106

#include <ncbi_pch.hpp>

inline void CPhyloTreeFilterDlg::cb_m_Ok_i(CReturnButton*, void*) {
  x_OnOK();
}
void CPhyloTreeFilterDlg::cb_m_Ok(CReturnButton* o, void* v) {
  ((CPhyloTreeFilterDlg*)(o->parent()->parent()->user_data()))->cb_m_Ok_i(o,v);
}

inline void CPhyloTreeFilterDlg::cb_m_Cancel_i(CButton*, void*) {
  x_OnCancel();
}
void CPhyloTreeFilterDlg::cb_m_Cancel(CButton* o, void* v) {
  ((CPhyloTreeFilterDlg*)(o->parent()->parent()->user_data()))->cb_m_Cancel_i(o,v);
}

Fl_Double_Window* CPhyloTreeFilterDlg::x_CreateWindow() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(308, 192, "Filter");
    w = o;
    o->labelsize(12);
    o->user_data((void*)(this));
    { CDialogBackground* o = new CDialogBackground(0, 0, 310, 192);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_BLACK);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
      { CReturnButton* o = m_Ok = new CReturnButton(125, 152, 75, 26, "OK");
        o->box(FL_UP_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_m_Ok);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { CButton* o = m_Cancel = new CButton(208, 152, 75, 26, "Cancel");
        o->box(FL_UP_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_m_Cancel);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Box* o = new Fl_Box(23, 10, 260, 40, "Please, select distance threshold value. Nodes with less distances will be fi\
ltered out.");
        o->box(FL_THIN_DOWN_BOX);
        o->color((Fl_Color)245);
        o->labelsize(12);
        o->align(132|FL_ALIGN_INSIDE);
      }
      { Fl_Output* o = m_txtMin = new Fl_Output(153, 57, 130, 25, "Minimum distance");
        o->color((Fl_Color)29);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Output* o = m_txtMax = new Fl_Output(153, 85, 130, 25, "Maximum distance");
        o->color((Fl_Color)29);
        o->labelsize(12);
        o->textsize(12);
      }
      { Fl_Input* o = m_txtThreshold = new Fl_Input(153, 112, 130, 25, "Cutoff threshold");
        o->labelsize(12);
        o->textsize(12);
      }
      o->end();
    }
    o->end();
  }
  return w;
}
