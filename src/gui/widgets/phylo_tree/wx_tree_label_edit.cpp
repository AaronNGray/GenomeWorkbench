/*  $Id: wx_tree_label_edit.cpp 29153 2013-10-31 13:32:40Z falkrb $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:
 *
 * File Description:
 *
 */
// Generated by DialogBlocks (unregistered), 28/10/2013 09:21:36

#include <ncbi_pch.hpp>////@begin includes
////@end includes

#include <gui/widgets/phylo_tree/wx_tree_label_edit.hpp>

#include <gui/widgets/phylo_tree/phylo_tree_ds.hpp>
#include <gui/widgets/phylo_tree/phylo_tree_scheme.hpp>
#include <gui/widgets/wx/wx_utils.hpp>
#include <gui/opengl/gltexturefont.hpp>

#include <corelib/ncbistr.hpp>

#include <wx/msgdlg.h>
#include <wx/statbox.h>
#include <wx/stattext.h>

////@begin XPM images
////@end XPM images


BEGIN_NCBI_SCOPE

IMPLEMENT_DYNAMIC_CLASS( CwxTreeLabelEdit, wxDialog )

BEGIN_EVENT_TABLE( CwxTreeLabelEdit, wxDialog )

////@begin CwxTreeLabelEdit event table entries
    EVT_TEXT( ID_LABEL_POS_X, CwxTreeLabelEdit::OnLabelPosXTextUpdated )

    EVT_TEXT( ID_LABEL_POS_Y, CwxTreeLabelEdit::OnLabelPosYTextUpdated )

    EVT_CHOICE( ID_LABEL_FONT_CHOICE, CwxTreeLabelEdit::OnLabelFontChoiceSelected )

    EVT_BUTTON( wxID_OK, CwxTreeLabelEdit::OnOkClick )

////@end CwxTreeLabelEdit event table entries

END_EVENT_TABLE()

CwxTreeLabelEdit::CwxTreeLabelEdit()
{
    Init();
}

CwxTreeLabelEdit::CwxTreeLabelEdit( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}

bool CwxTreeLabelEdit::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CwxTreeLabelEdit creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CwxTreeLabelEdit creation
    return true;
}

CwxTreeLabelEdit::~CwxTreeLabelEdit()
{
////@begin CwxTreeLabelEdit destruction
////@end CwxTreeLabelEdit destruction
}

void CwxTreeLabelEdit::Init()
{
////@begin CwxTreeLabelEdit member initialisation
    m_TreeName = NULL;
    m_LabelPosX = NULL;
    m_LabelPosY = NULL;
    m_FontName = NULL;
    m_FontSize = NULL;
    m_FontColorPicker = NULL;
////@end CwxTreeLabelEdit member initialisation
}

void CwxTreeLabelEdit::CreateControls()
{    
////@begin CwxTreeLabelEdit content construction
    CwxTreeLabelEdit* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxStaticBox* itemStaticBoxSizer3Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Label Properties"));
    wxStaticBoxSizer* itemStaticBoxSizer3 = new wxStaticBoxSizer(itemStaticBoxSizer3Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer3->Add(itemBoxSizer4, 0, wxALIGN_LEFT|wxALL, 5);

    wxStaticText* itemStaticText5 = new wxStaticText( itemDialog1, wxID_STATIC, _("Tree Label:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(itemStaticText5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_TreeName = new wxTextCtrl( itemDialog1, ID_TREE_NAME_TXT, wxEmptyString, wxDefaultPosition, wxSize(200, -1), 0 );
    itemBoxSizer4->Add(m_TreeName, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer7 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer3->Add(itemBoxSizer7, 0, wxALIGN_LEFT|wxALL, 5);

    wxStaticText* itemStaticText8 = new wxStaticText( itemDialog1, wxID_STATIC, _("Position (%x, %y): ("), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer7->Add(itemStaticText8, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP|wxBOTTOM, 5);

    m_LabelPosX = new wxTextCtrl( itemDialog1, ID_LABEL_POS_X, _("50"), wxDefaultPosition, wxSize(30, -1), wxTE_RIGHT );
    m_LabelPosX->SetHelpText(_("The X position, as a %(0..100)  of screen width"));
    if (CwxTreeLabelEdit::ShowToolTips())
        m_LabelPosX->SetToolTip(_("The X position, as a %(0..100)  of screen width"));
    itemBoxSizer7->Add(m_LabelPosX, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5);

    wxStaticText* itemStaticText10 = new wxStaticText( itemDialog1, wxID_STATIC, _(", "), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer7->Add(itemStaticText10, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5);

    m_LabelPosY = new wxTextCtrl( itemDialog1, ID_LABEL_POS_Y, _("90"), wxDefaultPosition, wxSize(30, -1), wxTE_RIGHT );
    m_LabelPosY->SetHelpText(_("The Y position, as a %(0..100) of screen height"));
    if (CwxTreeLabelEdit::ShowToolTips())
        m_LabelPosY->SetToolTip(_("The Y position, as a %(0..100) of screen height"));
    itemBoxSizer7->Add(m_LabelPosY, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5);

    wxStaticText* itemStaticText12 = new wxStaticText( itemDialog1, wxID_STATIC, _(")"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer7->Add(itemStaticText12, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 5);

    wxBoxSizer* itemBoxSizer13 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer3->Add(itemBoxSizer13, 0, wxALIGN_LEFT|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer14Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Font"));
    wxStaticBoxSizer* itemStaticBoxSizer14 = new wxStaticBoxSizer(itemStaticBoxSizer14Static, wxHORIZONTAL);
    itemStaticBoxSizer3->Add(itemStaticBoxSizer14, 0, wxALIGN_LEFT|wxALL, 5);

    wxFlexGridSizer* itemFlexGridSizer15 = new wxFlexGridSizer(0, 2, 0, 0);
    itemStaticBoxSizer14->Add(itemFlexGridSizer15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText16 = new wxStaticText( itemDialog1, wxID_STATIC, _("Font Face:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer15->Add(itemStaticText16, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_FontNameStrings;
    m_FontName = new wxChoice( itemDialog1, ID_LABEL_FONT_CHOICE, wxDefaultPosition, wxDefaultSize, m_FontNameStrings, 0 );
    itemFlexGridSizer15->Add(m_FontName, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText18 = new wxStaticText( itemDialog1, wxID_STATIC, _("Font Size:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer15->Add(itemStaticText18, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_FontSizeStrings;
    m_FontSizeStrings.Add(_("10"));
    m_FontSize = new wxChoice( itemDialog1, m_LABEL_FONT_SIZE_CHOICE, wxDefaultPosition, wxDefaultSize, m_FontSizeStrings, 0 );
    m_FontSize->SetStringSelection(_("10"));
    itemFlexGridSizer15->Add(m_FontSize, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText20 = new wxStaticText( itemDialog1, wxID_STATIC, _("Font Color:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer15->Add(itemStaticText20, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_FontColorPicker = new wxColourPickerCtrl( itemDialog1, ID_TREE_FONT_COLOR, wxColour(0, 0, 0), wxDefaultPosition, wxDefaultSize, wxCLRP_DEFAULT_STYLE );
    itemFlexGridSizer15->Add(m_FontColorPicker, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStdDialogButtonSizer* itemStdDialogButtonSizer22 = new wxStdDialogButtonSizer;

    itemBoxSizer2->Add(itemStdDialogButtonSizer22, 0, wxALIGN_RIGHT|wxALL, 5);
    wxButton* itemButton23 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStdDialogButtonSizer22->AddButton(itemButton23);

    wxButton* itemButton24 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStdDialogButtonSizer22->AddButton(itemButton24);

    itemStdDialogButtonSizer22->Realize();

////@end CwxTreeLabelEdit content construction
}

void CwxTreeLabelEdit::SetParams(CPhyloTreeDataSource* ds, CPhyloTreeScheme* sl)
{
    m_DS = ds;

    const CGlTextureFont& font = sl->GetFont();

    /// Fill font face and size choices
    wxArrayString font_faces;
    wxArrayString font_sizes;

    std::vector<string> faces;
    std::vector<string> sizes;

    CGlTextureFont::GetAllFaces(faces);
    CGlTextureFont::GetAllSizes(sizes);

    size_t idx;
    for (idx = 0; idx<faces.size(); ++idx)
        font_faces.Add(ToWxString(faces[idx]));
    for (idx = 0; idx<sizes.size(); ++idx)
        font_sizes.Add(ToWxString(sizes[idx]));

    m_FontName->Clear();
    m_FontName->Append(font_faces);
    m_FontSize->Clear();
    m_FontSize->Append(font_sizes);

	m_FontName->SetStringSelection(ToWxString(CGlTextureFont::FaceToString(font.GetFontFace())));
    m_FontSize->SetStringSelection(ToWxString(NStr::NumericToString(font.GetFontSize())));

    CTreeLabel tl = m_DS->GetTreeLabel();
    m_TreeName->SetValue(ToWxString(tl.GetLabel()));
    m_LabelPosX->SetValue(ToWxString(NStr::IntToString(tl.GetXPos())));
    m_LabelPosY->SetValue(ToWxString(NStr::IntToString(tl.GetYPos())));

	m_FontName->SetStringSelection(ToWxString(tl.GetFontName()));
    m_FontSize->SetStringSelection(ToWxString(NStr::NumericToString(tl.GetFontSize())));

    CRgbaColor c = tl.GetColor();
    wxColor wc(c.GetRedUC(), c.GetGreenUC(), c.GetBlueUC(), c.GetAlphaUC());
    m_FontColorPicker->SetColour(wc);
}

bool CwxTreeLabelEdit::ShowToolTips()
{
    return true;
}
wxBitmap CwxTreeLabelEdit::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CwxTreeLabelEdit bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CwxTreeLabelEdit bitmap retrieval
}
wxIcon CwxTreeLabelEdit::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CwxTreeLabelEdit icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CwxTreeLabelEdit icon retrieval
}

void CwxTreeLabelEdit::OnLabelFontChoiceSelected( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_LABEL_FONT_CHOICE in CwxTreeLabelEdit.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_LABEL_FONT_CHOICE in CwxTreeLabelEdit. 
}

void CwxTreeLabelEdit::OnLabelPosXTextUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_LABEL_POS_X in CwxTreeLabelEdit.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_LABEL_POS_X in CwxTreeLabelEdit. 
}

void CwxTreeLabelEdit::OnLabelPosYTextUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_LABEL_POS_Y in CwxTreeLabelEdit.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_LABEL_POS_Y in CwxTreeLabelEdit. 
}


void CwxTreeLabelEdit::OnOkClick( wxCommandEvent& event )
{   
    if(!TransferDataFromWindow())
        return;

    string label = ToStdString(m_TreeName->GetValue());
    string sposx = ToStdString(m_LabelPosX->GetValue());
    string sposy = ToStdString(m_LabelPosY->GetValue());
    int posx, posy;

    
    try {
        posx = NStr::StringToInt(sposx);
        posy = NStr::StringToInt(sposy);
    }
    catch(CException&)
    {
        wxMessageBox("The X and Y values must be integers between 0 and 100", "Input Error");
        return;
    }

    if (posx < 0 || posx > 100 || posy < 0 || posy > 100) {
        wxMessageBox("The X and Y values must be numbers between 0 and 100", "Input Error");
        return;
    }

    string font_name = ToStdString(m_FontName->GetStringSelection());
    string sfont_size = ToStdString(m_FontSize->GetStringSelection());
    int font_size;

    try {
        font_size = NStr::StringToInt(sfont_size);
    }
    catch(CException&)
    {
        // should not happen - sizes are populated automatically
        _TRACE("Unexpected error converting font size " + sfont_size + " to integer");
        font_size = 12;
    }
    
    wxColour wc = m_FontColorPicker->GetColour();
    
    CRgbaColor c(wc.Red(), wc.Green(), wc.Blue(), wc.Alpha());
   

    CTreeLabel  tree_label(label, font_name, font_size, c, posx, posy);
    m_DS->SetTreeLabel(tree_label);

    event.Skip();
}

END_NCBI_SCOPE
