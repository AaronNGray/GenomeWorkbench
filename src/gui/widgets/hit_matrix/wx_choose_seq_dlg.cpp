/*  $Id: wx_choose_seq_dlg.cpp 39666 2017-10-25 16:01:13Z katargir $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:
 *
 * File Description:
 *
 */
#include <ncbi_pch.hpp>////@begin includes
////@end includes


#include <gui/widgets/hit_matrix/wx_choose_seq_dlg.hpp>
#include <gui/widgets/wx/table_listctrl.hpp>

#include <wx/sizer.h>
#include <wx/stattext.h>
#include <wx/button.h>
#include <wx/checkbox.h>
#include <wx/statbox.h>
#include <wx/radiobut.h>

#include <wx/msgdlg.h>


BEGIN_NCBI_SCOPE


IMPLEMENT_DYNAMIC_CLASS( CwxChooseSeqDlg, wxDialog )

BEGIN_EVENT_TABLE( CwxChooseSeqDlg, wxDialog )

////@begin CwxChooseSeqDlg event table entries
    EVT_CHECKBOX( ID_SEP_CHECK, CwxChooseSeqDlg::OnSepCheckClick )

    EVT_RADIOBUTTON( ID_POS_NEG_RADIO, CwxChooseSeqDlg::OnPosNegRadioSelected )

    EVT_RADIOBUTTON( ID_POS_RADIO, CwxChooseSeqDlg::OnPosRadioSelected )

    EVT_RADIOBUTTON( ID_NEG_RADIO, CwxChooseSeqDlg::OnNegRadioSelected )

    EVT_LIST_ITEM_SELECTED( ID_SUBJECT_TABLE, CwxChooseSeqDlg::OnSubjectSelected )
    EVT_LIST_ITEM_DESELECTED( ID_SUBJECT_TABLE, CwxChooseSeqDlg::OnSubjectTableDeselected )

    EVT_BUTTON( wxID_OK, CwxChooseSeqDlg::OnOkClick )

    EVT_BUTTON( wxID_CANCEL, CwxChooseSeqDlg::OnCancelClick )

////@end CwxChooseSeqDlg event table entries
END_EVENT_TABLE()


CwxChooseSeqDlg::CwxChooseSeqDlg()
{
    Init();
}


CwxChooseSeqDlg::CwxChooseSeqDlg( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


bool CwxChooseSeqDlg::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CwxChooseSeqDlg creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS|wxDIALOG_EX_CONTEXTHELP);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CwxChooseSeqDlg creation
    return true;
}


void sDeleteIds(vector<IHitSeqId*>& ids)
{
    for( size_t i =0;  i < ids.size(); i++) {
        delete ids[i];
    }
}


CwxChooseSeqDlg::~CwxChooseSeqDlg()
{
    Disable(); // to indicate that we do not need notifications

    m_SubjectTable->RemoveModel();
    m_QueryTable->RemoveModel();

    sDeleteIds(m_AllIds);
////@begin CwxChooseSeqDlg destruction
////@end CwxChooseSeqDlg destruction
}


void CwxChooseSeqDlg::Init()
{
////@begin CwxChooseSeqDlg member initialisation
    m_SepCheck = NULL;
    m_ShowRadios = NULL;
    m_OrientRadios = NULL;
    m_SubjectTable = NULL;
    m_QueryTable = NULL;
////@end CwxChooseSeqDlg member initialisation
}


void CwxChooseSeqDlg::CreateControls()
{
////@begin CwxChooseSeqDlg content construction
    // Generated by DialogBlocks, Sat 16 Feb 2008 11:40:36 AM EST (unregistered)

    CwxChooseSeqDlg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxGROW|wxLEFT|wxRIGHT|wxTOP, 5);

    m_SepCheck = new wxCheckBox( itemDialog1, ID_SEP_CHECK, wxT("Separate Alignments"), wxDefaultPosition, wxDefaultSize, 0 );
    m_SepCheck->SetValue(false);
    itemBoxSizer3->Add(m_SepCheck, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_ShowRadios = new wxStaticBox(itemDialog1, wxID_ANY, wxT("Show Alignments"));
    wxStaticBoxSizer* itemStaticBoxSizer5 = new wxStaticBoxSizer(m_ShowRadios, wxHORIZONTAL);
    itemBoxSizer3->Add(itemStaticBoxSizer5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_OrientRadios = new wxRadioButton( itemDialog1, ID_POS_NEG_RADIO, wxT("Positive and Negative"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    m_OrientRadios->SetValue(false);
    itemStaticBoxSizer5->Add(m_OrientRadios, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxRadioButton* itemRadioButton7 = new wxRadioButton( itemDialog1, ID_POS_RADIO, wxT("Positive"), wxDefaultPosition, wxDefaultSize, 0 );
    itemRadioButton7->SetValue(false);
    itemStaticBoxSizer5->Add(itemRadioButton7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxRadioButton* itemRadioButton8 = new wxRadioButton( itemDialog1, ID_NEG_RADIO, wxT("Negative"), wxDefaultPosition, wxDefaultSize, 0 );
    itemRadioButton8->SetValue(false);
    itemStaticBoxSizer5->Add(itemRadioButton8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer9 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer9, 1, wxGROW|wxALL, 5);

    wxStaticLine* itemStaticLine10 = new wxStaticLine( itemDialog1, wxID_STATIC, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
    itemBoxSizer9->Add(itemStaticLine10, 0, wxGROW|wxLEFT|wxRIGHT, 5);

    wxStaticText* itemStaticText11 = new wxStaticText( itemDialog1, wxID_STATIC, wxT("Subject:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer9->Add(itemStaticText11, 0, wxALIGN_LEFT|wxALL, 5);

    m_SubjectTable = new CwxTableListCtrl( itemDialog1, ID_SUBJECT_TABLE, wxDefaultPosition, wxSize(600, 140), wxLC_REPORT );
    itemBoxSizer9->Add(m_SubjectTable, 1, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText13 = new wxStaticText( itemDialog1, wxID_STATIC, wxT("Query :   [ only available alignments are displayed ]"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer9->Add(itemStaticText13, 0, wxALIGN_LEFT|wxALL, 5);

    m_QueryTable = new CwxTableListCtrl( itemDialog1, ID_QUERY_TABLE, wxDefaultPosition, wxSize(600, 140), wxLC_REPORT );
    itemBoxSizer9->Add(m_QueryTable, 1, wxGROW|wxALL, 5);

    wxStdDialogButtonSizer* itemStdDialogButtonSizer15 = new wxStdDialogButtonSizer;

    itemBoxSizer9->Add(itemStdDialogButtonSizer15, 0, wxALIGN_RIGHT|wxALL, 5);
    wxButton* itemButton16 = new wxButton( itemDialog1, wxID_OK, wxT("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStdDialogButtonSizer15->AddButton(itemButton16);

    wxButton* itemButton17 = new wxButton( itemDialog1, wxID_CANCEL, wxT("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStdDialogButtonSizer15->AddButton(itemButton17);

    itemStdDialogButtonSizer15->Realize();

    // Set validators
    m_SepCheck->SetValidator( wxGenericValidator(& m_SeparateAligns) );
    m_OrientRadios->SetValidator( wxGenericValidator(& m_PosAndNeg) );
    itemRadioButton7->SetValidator( wxGenericValidator(& m_Pos) );
    itemRadioButton8->SetValidator( wxGenericValidator(& m_Neg) );
////@end CwxChooseSeqDlg content construction

    m_SubjectTable->SetModel(&m_SubjectModel);
    m_QueryTable->SetModel(&m_QueryModel);
}


bool CwxChooseSeqDlg::ShowToolTips()
{
    return true;
}


wxBitmap CwxChooseSeqDlg::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CwxChooseSeqDlg bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CwxChooseSeqDlg bitmap retrieval
}


wxIcon CwxChooseSeqDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CwxChooseSeqDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CwxChooseSeqDlg icon retrieval
}


void CwxChooseSeqDlg::OnSepCheckClick( wxCommandEvent& event )
{
    x_SetSelectedIds(GetSubjectId(), GetQueryId());

    TransferDataFromWindow();
    x_ReloadIDLists();
    TransferDataToWindow();
}


static const char* kSubjectTag = "GBENCH.ChooseSeqDlg.Subject";
static const char* kQueryTag = "GBENCH.ChooseSeqDlg.Query";


void CwxChooseSeqDlg::SetSeqs(CIRef<IHitMatrixDataSource> ds)
{
    m_DataSource = ds;

    /// initilize data members based on the Data Source state
    IHitMatrixDataSource::SParams params;
    m_DataSource->GetParams(params);

    m_SeparateAligns = params.m_RowBased;
    m_Orient = params.m_Direction;

    /// load UI settings
    x_LoadSettings();

    // initialize identifiers
    x_SetSelectedIds(&m_DataSource->GetSubjectId(), &m_DataSource->GetQueryId());

    // fill the tables
    x_ReloadIDLists();
}


void CwxChooseSeqDlg::x_InitTable(bool subject, IHitMatrixDataSource& ds,
                                  const TIdVector& ids, int sel_index)
{
    CwxTableListCtrl* control = subject ? m_SubjectTable : m_QueryTable;
    CAlignSeqTableModel* model = subject ? &m_SubjectModel : &m_QueryModel;

    model->Init(ds, ids);

    // select row
    if(sel_index >= 0  &&  sel_index < model->GetNumRows())    {
        control->Select(sel_index, true);
    }
}


const IHitSeqId* CwxChooseSeqDlg::x_GetSelectedId(bool subject) const
{
    CwxTableListCtrl* control = subject ? m_SubjectTable : m_QueryTable;
    const CAlignSeqTableModel* model = subject ? &m_SubjectModel : &m_QueryModel;
    int i_vis = control->GetFirstSelected();
    int i_row = control->RowVisibleToData(i_vis);

    return model->GetId(i_row);
}


void CwxChooseSeqDlg::x_SetSelectedIds(const IHitSeqId* s_id, const IHitSeqId* q_id)
{
    if(m_SeparateAligns)   {
        m_SepSubjectId.reset(s_id ? s_id->Clone() : NULL);
        m_SepQueryId.reset(q_id ? q_id->Clone() : NULL);
    } else {
        m_SubjectId.reset(s_id ? s_id->Clone() : NULL);
        m_QueryId.reset(q_id ? q_id->Clone() : NULL);
    }
}


// fill tables with ids
void CwxChooseSeqDlg::x_ReloadIDLists()
{
    //m_IgnoreSelEvents = true;

    /// delete exisiting Ids
    sDeleteIds(m_AllIds);
    m_AllIds.clear();

    IHitMatrixDataSource::SParams params;
    GetParams(params);

    m_DataSource->GetHitSeqIdsForParams(m_AllIds, params);

    // init Subject Table
    IHitSeqId* s_id = m_SeparateAligns ? m_SepSubjectId.get() : m_SubjectId.get();
    int s_index = x_GetIdIndex(s_id, m_AllIds);

    x_InitTable(true, *m_DataSource, m_AllIds, s_index);

    // init Query Table
    IHitMatrixDataSource::TIdVector ids;
    int q_index = -1;
    if(s_id)    {
        m_DataSource->GetAlignedIdsForParams(*s_id, m_AllIds, ids, params);

        IHitSeqId* q_id = m_SeparateAligns ? m_SepQueryId.get() : m_QueryId.get();
        q_index = x_GetIdIndex(q_id, ids);

    }

    x_InitTable(false, *m_DataSource, ids, q_index);

    //m_IgnoreSelEvents = false;
}


static const wxChar* kSpecifySubject = wxT("Please select a subject sequence.");
static const wxChar* kSpecifyQuery = wxT("Please select a query sequence.");


bool CwxChooseSeqDlg::x_Validate()
{
    if(GetSubjectId() == NULL)  {
        wxMessageBox(kSpecifySubject, wxT(""), wxOK | wxICON_EXCLAMATION);
        return false;
    }
    if(GetQueryId() == NULL)  {
        wxMessageBox(kSpecifyQuery, wxT(""), wxOK | wxICON_EXCLAMATION);
        return false;
    }
    return true;
}


void CwxChooseSeqDlg::x_SaveSettings()
{
    CGuiRegistry& reg = CGuiRegistry::GetInstance();

    CRegistryWriteView s_view = reg.GetWriteView(kSubjectTag);
    m_SubjectTable->SaveTableSettings(s_view);

    CRegistryWriteView q_view = reg.GetWriteView(kQueryTag);
    m_QueryTable->SaveTableSettings(q_view);
}


void CwxChooseSeqDlg::x_LoadSettings()
{
    // Load table settings
    CGuiRegistry& reg = CGuiRegistry::GetInstance();

    CRegistryReadView s_view = reg.GetReadView(kSubjectTag);
    m_SubjectTable->LoadTableSettings(s_view);

    CRegistryReadView q_view = reg.GetReadView(kQueryTag);
    m_QueryTable->LoadTableSettings(q_view);
}


const IHitSeqId* CwxChooseSeqDlg::GetSubjectId()
{
    return x_GetSelectedId(true);
}


const IHitSeqId* CwxChooseSeqDlg::GetQueryId()
{
    return x_GetSelectedId(false);
}


void CwxChooseSeqDlg::GetParams(IHitMatrixDataSource::SParams& params) const
{
    params.m_RowBased = m_SeparateAligns;
    params.m_Direction = (IHitMatrixDataSource::TDirection) m_Orient;
}


int CwxChooseSeqDlg::x_GetIdIndex(const IHitSeqId* id,
                                const IHitMatrixDataSource::TIdVector& ids)
{
    if(id)  {
        for( int i = 0; i < (int) ids.size(); i++ )    {
            if(ids[i]->Equals(*id))
                return i;
        }
    }
    return -1;
}


void CwxChooseSeqDlg::OnOkClick( wxCommandEvent& event )
{
    if(TransferDataFromWindow()  &&  x_Validate())    {
        x_SaveSettings();
        EndModal(wxID_OK);
    }
}


void CwxChooseSeqDlg::OnCancelClick( wxCommandEvent& event )
{
    x_SaveSettings();
    EndModal(wxID_CANCEL);
}


void CwxChooseSeqDlg::OnPosNegRadioSelected( wxCommandEvent& event )
{
    TransferDataFromWindow();
    TransferDataToWindow();
}


void CwxChooseSeqDlg::OnPosRadioSelected( wxCommandEvent& event )
{
    TransferDataFromWindow();
    TransferDataToWindow();
}


void CwxChooseSeqDlg::OnNegRadioSelected( wxCommandEvent& event )
{
    TransferDataFromWindow();
    TransferDataToWindow();
}


bool CwxChooseSeqDlg::TransferDataToWindow()
{
    m_SepCheck->Enable(m_DataSource->CanCreateRowBased());

    m_ShowRadios->Enable( ! m_SeparateAligns);
    int orient = m_SeparateAligns ? CAlnUserOptions::eBothDirections
                                  : m_Orient;
    m_PosAndNeg = orient == 0;
    m_Pos = orient == 1;
    m_Neg = orient == 2;

    return wxDialog::TransferDataToWindow();
}


bool CwxChooseSeqDlg::TransferDataFromWindow()
{
    if(wxDialog::TransferDataFromWindow())  {
        int orient = m_PosAndNeg ? 0 : (m_Pos ? 1 : 2);
        m_Orient = m_SeparateAligns ?   CAlnUserOptions::eBothDirections : orient;
        return true;
    }
    return false;
}


void CwxChooseSeqDlg::OnSubjectSelected( wxListEvent& event )
{
    x_OnSelectionChanged();
}


void CwxChooseSeqDlg::OnSubjectTableDeselected( wxListEvent& event )
{
    x_OnSelectionChanged();
}


void CwxChooseSeqDlg::x_OnSelectionChanged()
{
    if(IsEnabled()) {
        const IHitSeqId* s_id = GetSubjectId();
        _ASSERT(s_id);

        IHitMatrixDataSource::TIdVector ids;
        IHitMatrixDataSource::SParams params;
        GetParams(params);

        m_DataSource->GetAlignedIdsForParams(*s_id, m_AllIds, ids, params);

        // get Query id if possible
        const IHitSeqId* q_id = GetQueryId();
        int index = x_GetIdIndex(q_id, ids);
        x_InitTable(false, *m_DataSource, ids, index);
    }
}


END_NCBI_SCOPE

