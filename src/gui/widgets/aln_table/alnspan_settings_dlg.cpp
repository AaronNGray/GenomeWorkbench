/*  $Id: alnspan_settings_dlg.cpp 20472 2009-12-02 01:11:35Z voronov $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:
 */


#include <ncbi_pch.hpp>

////@begin includes
////@end includes

#include <gui/widgets/aln_table/alnspan_settings_dlg.hpp>

////@begin XPM images
////@end XPM images


/*!
 * CAlnSpanSettingsDlg type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CAlnSpanSettingsDlg, wxDialog )


/*!
 * CAlnSpanSettingsDlg event table definition
 */

BEGIN_EVENT_TABLE( CAlnSpanSettingsDlg, wxDialog )

////@begin CAlnSpanSettingsDlg event table entries
////@end CAlnSpanSettingsDlg event table entries

END_EVENT_TABLE()


/*!
 * CAlnSpanSettingsDlg constructors
 */

CAlnSpanSettingsDlg::CAlnSpanSettingsDlg()
{
    Init();
}

CAlnSpanSettingsDlg::CAlnSpanSettingsDlg( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*!
 * CAlnSpanSettingsDlg creator
 */

bool CAlnSpanSettingsDlg::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CAlnSpanSettingsDlg creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CAlnSpanSettingsDlg creation
    return true;
}


/*!
 * CAlnSpanSettingsDlg destructor
 */

CAlnSpanSettingsDlg::~CAlnSpanSettingsDlg()
{
////@begin CAlnSpanSettingsDlg destruction
////@end CAlnSpanSettingsDlg destruction
}


/*!
 * Member initialisation
 */

void CAlnSpanSettingsDlg::Init()
{
////@begin CAlnSpanSettingsDlg member initialisation
    m_ThreshText = NULL;
    m_ShowIndels = NULL;
////@end CAlnSpanSettingsDlg member initialisation
}


/*!
 * Control creation for CAlnSpanSettingsDlg
 */

void CAlnSpanSettingsDlg::CreateControls()
{
////@begin CAlnSpanSettingsDlg content construction
    // Generated by DialogBlocks, 01/12/2009 19:48:10 (unregistered)

    CAlnSpanSettingsDlg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxStaticBox* itemStaticBoxSizer3Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Static"));
    wxStaticBoxSizer* itemStaticBoxSizer3 = new wxStaticBoxSizer(itemStaticBoxSizer3Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer3->Add(itemBoxSizer4, 1, wxALIGN_CENTER_HORIZONTAL, 5);

    wxStaticText* itemStaticText5 = new wxStaticText( itemDialog1, wxID_STATIC, _("Merging Window:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(itemStaticText5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_ThreshText = new wxTextCtrl( itemDialog1, ID_TEXTCTRL1, _("0"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(m_ThreshText, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_ShowIndels = new wxCheckBox( itemDialog1, ID_CHECKBOX, _("Show Indels"), wxDefaultPosition, wxDefaultSize, 0 );
    m_ShowIndels->SetValue(true);
    itemStaticBoxSizer3->Add(m_ShowIndels, 0, wxALIGN_LEFT|wxALL, 5);

    wxStdDialogButtonSizer* itemStdDialogButtonSizer8 = new wxStdDialogButtonSizer;

    itemBoxSizer2->Add(itemStdDialogButtonSizer8, 0, wxALIGN_RIGHT|wxALL, 5);
    wxButton* itemButton9 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStdDialogButtonSizer8->AddButton(itemButton9);

    wxButton* itemButton10 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStdDialogButtonSizer8->AddButton(itemButton10);

    itemStdDialogButtonSizer8->Realize();

    // Set validators
    m_ThreshText->SetValidator( wxTextValidator(wxFILTER_NUMERIC) );
////@end CAlnSpanSettingsDlg content construction
}


/*!
 * Should we show tooltips?
 */

bool CAlnSpanSettingsDlg::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CAlnSpanSettingsDlg::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CAlnSpanSettingsDlg bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CAlnSpanSettingsDlg bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CAlnSpanSettingsDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CAlnSpanSettingsDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CAlnSpanSettingsDlg icon retrieval
}

int CAlnSpanSettingsDlg::GetThreshold() const
{
    long rv;
    m_ThreshText->GetValue().ToLong( &rv );

    return rv;
}

void CAlnSpanSettingsDlg::SetThreshold( int th )
{
    wxString text;

    m_ThreshText->SetValue( text << th );
}

bool CAlnSpanSettingsDlg::GetShowIndels() const
{
    return m_ShowIndels->GetValue();
}

void CAlnSpanSettingsDlg::SetShowIndels( bool indel )
{
    m_ShowIndels->SetValue( indel );
}

