/*  $Id: wx_histogram_config_dlg.cpp 43724 2019-08-23 15:29:15Z katargir $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Liangshou Wu
 *
 * File Description:
 *
 */
// Generated by DialogBlocks (unregistered), 30/11/2008 23:01:05

#include <ncbi_pch.hpp>////@begin includes
////@end includes


#include "wx_histogram_config_dlg.hpp"
#include <gui/widgets/wx/color_picker_validator.hpp>
#include <gui/widgets/wx/wx_utils.hpp>
#include <wx/bitmap.h>
#include <wx/icon.h>
#include <wx/statbox.h>
#include <wx/textctrl.h>
#include <wx/checkbox.h>
#include <wx/slider.h>
#include <wx/radiobut.h>
#include <wx/stattext.h>
////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE


IMPLEMENT_DYNAMIC_CLASS( CHistConfigDlg, CDialog )

BEGIN_EVENT_TABLE( CHistConfigDlg, CDialog )

////@begin CHistConfigDlg event table entries
    EVT_RADIOBOX( ID_RADIOBOX5, CHistConfigDlg::OnRenderStyleSelected )
    EVT_RADIOBOX( ID_RADIOBOX4, CHistConfigDlg::OnGraphScaleSelected )
    EVT_CHECKBOX( ID_CHECKBOX5, CHistConfigDlg::OnShowRulerClick )
    EVT_CHECKBOX( ID_CHECKBOX4, CHistConfigDlg::OnDrawBackgroundClick )
    EVT_TEXT( ID_TEXTCTRL2, CHistConfigDlg::OnHeightUpdated )
    EVT_CHECKBOX( ID_CLIP_CHK, CHistConfigDlg::OnClipChkClick )
    EVT_SPINCTRL( ID_SPINCTRL, CHistConfigDlg::OnSpinctrlUpdated )
    EVT_SLIDER( ID_SLIDER, CHistConfigDlg::OnGraphOpacityUpdated )
    EVT_COLOURPICKER_CHANGED( ID_COLOURPICKERCTRL4, CHistConfigDlg::OnFGColorChanged )
    EVT_COLOURPICKER_CHANGED( ID_COLOURPICKERCTRL, CHistConfigDlg::OnNegColorChanged )
    EVT_COLOURPICKER_CHANGED( ID_COLOURPICKERCTRL3, CHistConfigDlg::OnBGColorChanged )
    EVT_SLIDER( ID_SLIDER1, CHistConfigDlg::OnOpacityUpdated )
    EVT_COLOURPICKER_CHANGED( ID_COLOURPICKERCTRL6, CHistConfigDlg::OnColorMinChanged )
    EVT_COLOURPICKER_CHANGED( ID_COLOURPICKERCTRL7, CHistConfigDlg::OnColorMaxChanged )
////@end CHistConfigDlg event table entries

END_EVENT_TABLE()

CHistConfigDlg::CHistConfigDlg()
{
    Init();
}

CHistConfigDlg::CHistConfigDlg( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    CreateX(parent, id, caption, pos, size, style);
}

bool CHistConfigDlg::CreateX( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CHistConfigDlg creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY|wxWS_EX_BLOCK_EVENTS);
    CDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CHistConfigDlg creation
    return true;
}

CHistConfigDlg::~CHistConfigDlg()
{
////@begin CHistConfigDlg destruction
////@end CHistConfigDlg destruction
}

void CHistConfigDlg::Init()
{
////@begin CHistConfigDlg member initialisation
    m_HistName = NULL;
    m_RenderStyle = NULL;
    m_GraphScale = NULL;
    m_NeedRuler = NULL;
    m_DrawBackground = NULL;
    m_Height = NULL;
    m_ClipOutliers = NULL;
    m_SDevThreshold = NULL;
    m_ColorBox = NULL;
    m_GraphOpacity = NULL;
    m_fgColor = NULL;
    m_fgNegColor = NULL;
    m_BgColorGroup = NULL;
    m_bgColor = NULL;
    m_BgColorGroup2 = NULL;
    m_Opacity = NULL;
    m_RulerColorGroup = NULL;
    m_LabelColor = NULL;
    m_RulerColor = NULL;
    m_SmearColorGroup = NULL;
    m_ColorMin = NULL;
    m_SmearColorGroup2 = NULL;
    m_ColorMax = NULL;
    m_OutlierColorGroup = NULL;
    m_ColorOutlier = NULL;
////@end CHistConfigDlg member initialisation
}


static void s_UpdateControlColour(wxColourPickerCtrl& control, const CRgbaColor& c)
{
    control.SetColour(wxColour(c.GetRedUC(), c.GetGreenUC(), c.GetBlueUC()));
}

static void s_UpdateValueColor(wxColourPickerCtrl& control, CRgbaColor& c)
{
    wxColor color = control.GetColour();
    c.SetRed(color.Red());
    c.SetGreen(color.Green());
    c.SetBlue(color.Blue());
}

void CHistConfigDlg::CreateControls()
{    
////@begin CHistConfigDlg content construction
    // Generated by DialogBlocks, 23/08/2019 11:10:17 (unregistered)

    CHistConfigDlg* itemCDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemCDialog1->SetSizer(itemBoxSizer2);

    m_HistName = new wxStaticText( itemCDialog1, wxID_STATIC, _("Graph settings for "), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(m_HistName, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT|wxTOP, 5);

    wxStaticLine* itemStaticLine4 = new wxStaticLine( itemCDialog1, wxID_STATIC, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
    itemBoxSizer2->Add(itemStaticLine4, 0, wxGROW|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    wxFlexGridSizer* itemFlexGridSizer5 = new wxFlexGridSizer(0, 2, 0, 0);
    itemBoxSizer2->Add(itemFlexGridSizer5, 0, wxGROW|wxRIGHT, 5);

    wxArrayString m_RenderStyleStrings;
    m_RenderStyleStrings.Add(_("&Smear bar"));
    m_RenderStyleStrings.Add(_("&Histogram"));
    m_RenderStyleStrings.Add(_("&Line graph"));
    m_RenderStyle = new wxRadioBox( itemCDialog1, ID_RADIOBOX5, _("Rendering Style"), wxDefaultPosition, wxDefaultSize, m_RenderStyleStrings, 1, wxRA_SPECIFY_ROWS );
    m_RenderStyle->SetSelection(0);
    itemFlexGridSizer5->Add(m_RenderStyle, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5);

    wxArrayString m_GraphScaleStrings;
    m_GraphScaleStrings.Add(_("&linear"));
    m_GraphScaleStrings.Add(_("&ln"));
    m_GraphScaleStrings.Add(_("&log2"));
    m_GraphScaleStrings.Add(_("&log10"));
    m_GraphScale = new wxRadioBox( itemCDialog1, ID_RADIOBOX4, _("Graph Scale"), wxDefaultPosition, wxDefaultSize, m_GraphScaleStrings, 1, wxRA_SPECIFY_ROWS );
    m_GraphScale->SetSelection(0);
    itemFlexGridSizer5->Add(m_GraphScale, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5);

    itemFlexGridSizer5->AddGrowableCol(0);
    itemFlexGridSizer5->AddGrowableCol(1);

    wxStaticBox* itemStaticBoxSizer8Static = new wxStaticBox(itemCDialog1, wxID_ANY, wxEmptyString);
    wxStaticBoxSizer* itemStaticBoxSizer8 = new wxStaticBoxSizer(itemStaticBoxSizer8Static, wxHORIZONTAL);
    itemBoxSizer2->Add(itemStaticBoxSizer8, 0, wxGROW|wxLEFT|wxRIGHT, 5);

    wxBoxSizer* itemBoxSizer9 = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer8->Add(itemBoxSizer9, 0, wxALIGN_CENTER_VERTICAL, 0);

    wxBoxSizer* itemBoxSizer10 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer9->Add(itemBoxSizer10, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP, 5);

    m_NeedRuler = new wxCheckBox( itemStaticBoxSizer8->GetStaticBox(), ID_CHECKBOX5, _("Show ruler"), wxDefaultPosition, wxDefaultSize, 0 );
    m_NeedRuler->SetValue(true);
    itemBoxSizer10->Add(m_NeedRuler, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5);

    itemBoxSizer10->Add(5, 5, 1, wxGROW|wxLEFT|wxRIGHT, 5);

    m_DrawBackground = new wxCheckBox( itemStaticBoxSizer8->GetStaticBox(), ID_CHECKBOX4, _("Draw background"), wxDefaultPosition, wxDefaultSize, 0 );
    m_DrawBackground->SetValue(false);
    itemBoxSizer10->Add(m_DrawBackground, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5);

    itemBoxSizer10->Add(5, 5, 1, wxGROW|wxLEFT|wxRIGHT, 5);

    wxStaticText* itemStaticText15 = new wxStaticText( itemStaticBoxSizer8->GetStaticBox(), wxID_STATIC, _("Height"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer10->Add(itemStaticText15, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5);

    m_Height = new wxTextCtrl( itemStaticBoxSizer8->GetStaticBox(), ID_TEXTCTRL2, wxEmptyString, wxDefaultPosition, wxSize(40, -1), 0 );
    itemBoxSizer10->Add(m_Height, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 5);

    wxBoxSizer* itemBoxSizer17 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer9->Add(itemBoxSizer17, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    m_ClipOutliers = new wxCheckBox( itemStaticBoxSizer8->GetStaticBox(), ID_CLIP_CHK, _("Clip outliers"), wxDefaultPosition, wxDefaultSize, 0 );
    m_ClipOutliers->SetValue(true);
    itemBoxSizer17->Add(m_ClipOutliers, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 5);

    wxStaticText* itemStaticText19 = new wxStaticText( itemStaticBoxSizer8->GetStaticBox(), wxID_STATIC, _("Standard Deviation Clip Threshold:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer17->Add(itemStaticText19, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_SDevThreshold = new wxSpinCtrl( itemStaticBoxSizer8->GetStaticBox(), ID_SPINCTRL, wxEmptyString, wxDefaultPosition, wxSize(60, -1), wxSP_ARROW_KEYS|wxSP_WRAP, 1, 30, 1 );
    itemBoxSizer17->Add(m_SDevThreshold, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_ColorBox = new wxStaticBox(itemCDialog1, wxID_ANY, _("Colors"));
    wxStaticBoxSizer* itemStaticBoxSizer21 = new wxStaticBoxSizer(m_ColorBox, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer21, 0, wxGROW|wxALL, 5);

    wxFlexGridSizer* itemFlexGridSizer22 = new wxFlexGridSizer(0, 2, 0, 0);
    itemStaticBoxSizer21->Add(itemFlexGridSizer22, 0, wxGROW, 5);

    wxStaticText* itemStaticText23 = new wxStaticText( itemStaticBoxSizer21->GetStaticBox(), wxID_STATIC, _("Graph Opacity"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer22->Add(itemStaticText23, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5);

    m_GraphOpacity = new wxSlider( itemStaticBoxSizer21->GetStaticBox(), ID_SLIDER, 255, 0, 255, wxDefaultPosition, wxSize(100, 20), wxSL_HORIZONTAL );
    itemFlexGridSizer22->Add(m_GraphOpacity, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5);

    itemFlexGridSizer22->AddGrowableCol(1);

    wxFlexGridSizer* itemFlexGridSizer25 = new wxFlexGridSizer(0, 2, 0, 0);
    itemStaticBoxSizer21->Add(itemFlexGridSizer25, 0, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer26 = new wxBoxSizer(wxHORIZONTAL);
    itemFlexGridSizer25->Add(itemBoxSizer26, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);

    m_fgColor = new wxColourPickerCtrl( itemStaticBoxSizer21->GetStaticBox(), ID_COLOURPICKERCTRL4, wxColour(0, 0, 0), wxDefaultPosition, wxDefaultSize, wxCLRP_DEFAULT_STYLE );
    itemBoxSizer26->Add(m_fgColor, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText28 = new wxStaticText( itemStaticBoxSizer21->GetStaticBox(), wxID_STATIC, _("Foreground color"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer26->Add(itemStaticText28, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer29 = new wxBoxSizer(wxHORIZONTAL);
    itemFlexGridSizer25->Add(itemBoxSizer29, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);

    m_fgNegColor = new wxColourPickerCtrl( itemStaticBoxSizer21->GetStaticBox(), ID_COLOURPICKERCTRL, wxColour(0, 0, 0), wxDefaultPosition, wxDefaultSize, wxCLRP_DEFAULT_STYLE );
    itemBoxSizer29->Add(m_fgNegColor, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText31 = new wxStaticText( itemStaticBoxSizer21->GetStaticBox(), wxID_STATIC, _("Color for negative values"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer29->Add(itemStaticText31, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_BgColorGroup = new wxBoxSizer(wxHORIZONTAL);
    itemFlexGridSizer25->Add(m_BgColorGroup, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);

    m_bgColor = new wxColourPickerCtrl( itemStaticBoxSizer21->GetStaticBox(), ID_COLOURPICKERCTRL3, wxColour(0, 0, 0), wxDefaultPosition, wxDefaultSize, wxCLRP_DEFAULT_STYLE );
    m_BgColorGroup->Add(m_bgColor, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText34 = new wxStaticText( itemStaticBoxSizer21->GetStaticBox(), wxID_STATIC, _("Background color"), wxDefaultPosition, wxDefaultSize, 0 );
    m_BgColorGroup->Add(itemStaticText34, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_BgColorGroup2 = new wxBoxSizer(wxHORIZONTAL);
    itemFlexGridSizer25->Add(m_BgColorGroup2, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);

    m_Opacity = new wxSlider( itemStaticBoxSizer21->GetStaticBox(), ID_SLIDER1, 40, 0, 255, wxDefaultPosition, wxSize(100, 20), wxSL_HORIZONTAL );
    m_BgColorGroup2->Add(m_Opacity, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5);

    wxStaticText* itemStaticText37 = new wxStaticText( itemStaticBoxSizer21->GetStaticBox(), wxID_STATIC, _("Opacity"), wxDefaultPosition, wxDefaultSize, 0 );
    m_BgColorGroup2->Add(itemStaticText37, 0, wxALIGN_CENTER_VERTICAL, 5);

    m_RulerColorGroup = new wxBoxSizer(wxHORIZONTAL);
    itemFlexGridSizer25->Add(m_RulerColorGroup, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);

    m_LabelColor = new wxColourPickerCtrl( itemStaticBoxSizer21->GetStaticBox(), ID_COLOURPICKERCTRL5, wxColour(0, 0, 0), wxDefaultPosition, wxDefaultSize, wxCLRP_DEFAULT_STYLE );
    m_RulerColorGroup->Add(m_LabelColor, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText40 = new wxStaticText( itemStaticBoxSizer21->GetStaticBox(), wxID_STATIC, _("Label color"), wxDefaultPosition, wxDefaultSize, 0 );
    m_RulerColorGroup->Add(itemStaticText40, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer41 = new wxBoxSizer(wxHORIZONTAL);
    itemFlexGridSizer25->Add(itemBoxSizer41, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);

    m_RulerColor = new wxColourPickerCtrl( itemStaticBoxSizer21->GetStaticBox(), ID_COLOURPICKERCTRL8, wxColour(0, 0, 0), wxDefaultPosition, wxDefaultSize, wxCLRP_DEFAULT_STYLE );
    itemBoxSizer41->Add(m_RulerColor, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText43 = new wxStaticText( itemStaticBoxSizer21->GetStaticBox(), wxID_STATIC, _("Ruler color"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer41->Add(itemStaticText43, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_SmearColorGroup = new wxBoxSizer(wxHORIZONTAL);
    itemFlexGridSizer25->Add(m_SmearColorGroup, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);

    m_ColorMin = new wxColourPickerCtrl( itemStaticBoxSizer21->GetStaticBox(), ID_COLOURPICKERCTRL6, wxColour(0, 0, 0), wxDefaultPosition, wxDefaultSize, wxCLRP_DEFAULT_STYLE );
    m_SmearColorGroup->Add(m_ColorMin, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText46 = new wxStaticText( itemStaticBoxSizer21->GetStaticBox(), wxID_STATIC, _("Smear color min"), wxDefaultPosition, wxDefaultSize, 0 );
    m_SmearColorGroup->Add(itemStaticText46, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_SmearColorGroup2 = new wxBoxSizer(wxHORIZONTAL);
    itemFlexGridSizer25->Add(m_SmearColorGroup2, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);

    m_ColorMax = new wxColourPickerCtrl( itemStaticBoxSizer21->GetStaticBox(), ID_COLOURPICKERCTRL7, wxColour(0, 0, 0), wxDefaultPosition, wxDefaultSize, wxCLRP_DEFAULT_STYLE );
    m_SmearColorGroup2->Add(m_ColorMax, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText49 = new wxStaticText( itemStaticBoxSizer21->GetStaticBox(), wxID_STATIC, _("Smear color max"), wxDefaultPosition, wxDefaultSize, 0 );
    m_SmearColorGroup2->Add(itemStaticText49, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_OutlierColorGroup = new wxBoxSizer(wxHORIZONTAL);
    itemFlexGridSizer25->Add(m_OutlierColorGroup, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);

    m_ColorOutlier = new wxColourPickerCtrl( itemStaticBoxSizer21->GetStaticBox(), ID_COLOURPICKERCTRL9, wxColour(0, 0, 0), wxDefaultPosition, wxDefaultSize, wxCLRP_DEFAULT_STYLE );
    m_OutlierColorGroup->Add(m_ColorOutlier, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText52 = new wxStaticText( itemStaticBoxSizer21->GetStaticBox(), wxID_STATIC, _("Outlier color"), wxDefaultPosition, wxDefaultSize, 0 );
    m_OutlierColorGroup->Add(itemStaticText52, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemFlexGridSizer25->AddGrowableCol(0);
    itemFlexGridSizer25->AddGrowableCol(1);

    itemBoxSizer2->Add(5, 10, 0, wxGROW|wxALL, 5);

    wxStaticLine* itemStaticLine54 = new wxStaticLine( itemCDialog1, wxID_STATIC, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
    itemBoxSizer2->Add(itemStaticLine54, 0, wxGROW|wxALL, 5);

    wxStdDialogButtonSizer* itemStdDialogButtonSizer55 = new wxStdDialogButtonSizer;

    itemBoxSizer2->Add(itemStdDialogButtonSizer55, 0, wxALIGN_RIGHT|wxALL, 5);
    wxButton* itemButton56 = new wxButton( itemCDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemButton56->SetDefault();
    itemStdDialogButtonSizer55->AddButton(itemButton56);

    wxButton* itemButton57 = new wxButton( itemCDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStdDialogButtonSizer55->AddButton(itemButton57);

    itemStdDialogButtonSizer55->Realize();

    // Set validators
    m_NeedRuler->SetValidator( wxGenericValidator(& m_Config->m_NeedRuler) );
    m_DrawBackground->SetValidator( wxGenericValidator(& m_Config->m_DrawBg) );
    m_LabelColor->SetValidator( CColorPickerValidator(& m_Config->m_LabelColor) );
    m_RulerColor->SetValidator( CColorPickerValidator(& m_Config->m_RulerColor) );
    m_ColorOutlier->SetValidator( CColorPickerValidator(& m_Config->m_OutlierColor) );
////@end CHistConfigDlg content construction
    CHistParams::EType type = m_Config->m_Type;
    switch (type) {
    case CHistParams::eSmearBar:
        m_RenderStyle->SetSelection(0);
        break;
    case CHistParams::eHistogram:
        m_RenderStyle->SetSelection(1);
        break;
    case CHistParams::eLineGraph:
        m_RenderStyle->SetSelection(2);
        break;
    default:
        break;
    }

    m_SmearColorGroup->Show(type == CHistParams::eSmearBar);
    m_SmearColorGroup2->Show(type == CHistParams::eSmearBar);

    m_RulerColorGroup->Show(m_Config->m_NeedRuler);
    m_BgColorGroup->Show(m_Config->m_DrawBg);    
    m_BgColorGroup2->Show(m_Config->m_DrawBg);    
    CHistParams::EScale scale = m_Config->m_Scale;
    switch (scale) {
    case CHistParams::eLinear:
        m_GraphScale->SetSelection(0);
        break;
    case CHistParams::eLoge:
        m_GraphScale->SetSelection(1);
        break;
    case CHistParams::eLog2:
        m_GraphScale->SetSelection(2);
        break;
    case CHistParams::eLog10:
        m_GraphScale->SetSelection(3);
        break;
    default:
        break;
    }
    m_GraphScale->Enable(type != CHistParams::eSmearBar);

    m_OutlierColorGroup->Show(m_Config->m_ClipOutliers && scale == CHistParams::eLinear);
    m_ClipOutliers->Enable(scale == CHistParams::eLinear);
    m_ClipOutliers->SetValue(m_Config->m_ClipOutliers);
    m_SDevThreshold->Enable(scale == CHistParams::eLinear);
    m_SDevThreshold->SetValue(m_Config->m_SDeviationThreshold);
    
    //m_DrawBackground->SetValue(m_Config->m_DrawBg);

    m_Height->SetValue(ToWxString(NStr::DoubleToString(m_Config->m_Height)));

    m_Opacity->SetValue(m_Config->m_bgColor.GetAlphaUC());
    s_UpdateControlColour(*m_bgColor, m_Config->m_bgColor);

    m_GraphOpacity->SetValue(m_Config->m_fgColor.GetAlphaUC());
    s_UpdateControlColour(*m_fgColor, m_Config->m_fgColor);
    s_UpdateControlColour(*m_fgNegColor, m_Config->m_fgNegColor);
    s_UpdateControlColour(*m_ColorMin, m_Config->m_SmearColorMin);
    s_UpdateControlColour(*m_ColorMax, m_Config->m_SmearColorMax);

    string title = "Graph settings for " + m_ConfName;
    m_HistName->SetLabel(ToWxString(title));
    Layout();
}

bool CHistConfigDlg::ShowToolTips()
{
    return true;
}
wxBitmap CHistConfigDlg::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CHistConfigDlg bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CHistConfigDlg bitmap retrieval
}
wxIcon CHistConfigDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CHistConfigDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CHistConfigDlg icon retrieval
}

void CHistConfigDlg::SetConfig(CRef<CHistParams> config)
{
    m_Config.Reset(new CHistParams(*config));
}


void CHistConfigDlg::OnHeightUpdated( wxCommandEvent& event )
{
    try {
        m_Config->m_Height = NStr::StringToDouble(ToStdString(m_Height->GetValue()));
    }
    catch (const CStringException&) {
        // invalid number no change
    }
}

void CHistConfigDlg::OnGraphOpacityUpdated( wxCommandEvent& event )
{
    unsigned char a = (unsigned char)m_GraphOpacity->GetValue();
    m_Config->m_fgColor.SetAlpha(a);
    m_Config->m_fgNegColor.SetAlpha(a);
    m_Config->m_SmearColorMin.SetAlpha(a);
    m_Config->m_SmearColorMax.SetAlpha(a);
}

void CHistConfigDlg::OnOpacityUpdated( wxCommandEvent& event )
{
    m_Config->m_bgColor.SetAlpha((unsigned char)m_Opacity->GetValue());
}

void CHistConfigDlg::OnBGColorChanged( wxColourPickerEvent& event )
{
    s_UpdateValueColor(*m_bgColor, m_Config->m_bgColor);
}

void CHistConfigDlg::OnFGColorChanged( wxColourPickerEvent& event )
{
    s_UpdateValueColor(*m_fgColor, m_Config->m_fgColor);
}

void CHistConfigDlg::OnNegColorChanged( wxColourPickerEvent& event )
{
    s_UpdateValueColor(*m_fgNegColor, m_Config->m_fgNegColor);
}

void CHistConfigDlg::OnColorMinChanged( wxColourPickerEvent& event )
{
    s_UpdateValueColor(*m_ColorMin, m_Config->m_SmearColorMin);
}

void CHistConfigDlg::OnColorMaxChanged( wxColourPickerEvent& event )
{
    s_UpdateValueColor(*m_ColorMax, m_Config->m_SmearColorMax);
}

void CHistConfigDlg::OnShowRulerClick( wxCommandEvent& event )
{
    m_Config->m_NeedRuler = !m_Config->m_NeedRuler;
    m_RulerColorGroup->Show(m_Config->m_NeedRuler);
    Layout();
    Fit();
}


void CHistConfigDlg::OnDrawBackgroundClick( wxCommandEvent& event )
{
    m_Config->m_DrawBg = !m_Config->m_DrawBg;
    m_BgColorGroup->Show(m_Config->m_DrawBg);
    m_BgColorGroup2->Show(m_Config->m_DrawBg);    

    Layout();
    Fit();
}




void CHistConfigDlg::OnClipChkClick( wxCommandEvent& event )
{
    m_Config->m_ClipOutliers = m_ClipOutliers->GetValue();
    m_OutlierColorGroup->Show(m_Config->m_ClipOutliers);
    Layout();
    Fit();
}

void CHistConfigDlg::OnSpinctrlUpdated( wxSpinEvent& event )
{
    m_Config->m_SDeviationThreshold = m_SDevThreshold->GetValue();
}



void CHistConfigDlg::OnGraphScaleSelected( wxCommandEvent& event )
{
    switch (m_GraphScale->GetSelection()) {
    case 0:
        m_Config->m_Scale = CHistParams::eLinear;
        break;
    case 1:
        m_Config->m_Scale = CHistParams::eLoge;
        break;
    case 2:
        m_Config->m_Scale = CHistParams::eLog2;
        break;
    case 3:
        m_Config->m_Scale = CHistParams::eLog10;
        break;
    default:
        throw runtime_error("Unsupport graph scale");
    }
    m_ClipOutliers->Enable(m_Config->m_Scale == CHistParams::eLinear);
    m_SDevThreshold->Enable(m_Config->m_Scale == CHistParams::eLinear);


    // no clipping for log graphs
    if (m_Config->m_Scale != CHistParams::eLinear) {
        m_ClipOutliers->SetValue(false);
        m_Config->m_ClipOutliers = false;
    }
    m_OutlierColorGroup->Show(m_ClipOutliers->GetValue());
    Layout();
    Fit();
}

void CHistConfigDlg::OnRenderStyleSelected( wxCommandEvent& event )
{
    switch (m_RenderStyle->GetSelection()) {
    case 0:
        m_Config->m_Type = CHistParams::eSmearBar;
        break;
    case 1:
        m_Config->m_Type = CHistParams::eHistogram;
        break;
    case 2:
        m_Config->m_Type = CHistParams::eLineGraph;
        break;
    default:
        throw runtime_error("Unsupported rendering style");
    }
    m_SmearColorGroup->Show(m_Config->m_Type == CHistParams::eSmearBar);
    m_SmearColorGroup2->Show(m_Config->m_Type == CHistParams::eSmearBar);

    m_GraphScale->Enable(m_Config->m_Type != CHistParams::eSmearBar);
    Layout();
    Fit();
}

void CHistConfigDlg::SetHistName(const string& title)
{
    _ASSERT(m_HistName);
    m_HistName->SetLabel(ToWxString(title));

}

END_NCBI_SCOPE
