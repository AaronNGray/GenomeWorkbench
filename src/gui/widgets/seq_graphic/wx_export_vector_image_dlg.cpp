/*  $Id: wx_export_vector_image_dlg.cpp 45005 2020-05-06 14:56:57Z evgeniev $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors: Liangshou Wu
 *
 * File Description:
 *
 */
#include <ncbi_pch.hpp>////@begin includes
////@end includes

#include "wx_export_vector_image_dlg.hpp"
#include <wx/filename.h>
#include <wx/msgdlg.h>
#include <wx/checkbox.h>
#include <wx/filedlg.h>
#include <wx/panel.h>
#include <wx/artprov.h>

#include <gui/widgets/wx/regexp_validator.hpp>
#include <gui/widgets/wx/wx_utils.hpp>
#include <gui/widgets/wx/image_grabber.hpp>
#include <gui/widgets/wx/message_box.hpp>
#include <gui/widgets/wx/ind_progress_bar.hpp>
#include <gui/objutils/registry.hpp>
#include <gui/objutils/utils.hpp>
#include <corelib/ncbifile.hpp>
#include "seqgraphic_pane.hpp"

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE

static TVPUnit kMaximumWidth = 14400;

IMPLEMENT_DYNAMIC_CLASS( CwxExportVectorImageDlg, wxDialog )

BEGIN_EVENT_TABLE( CwxExportVectorImageDlg, wxDialog )

////@begin CwxExportVectorImageDlg event table entries
    EVT_TEXT( ID_TEXTCTRL5, CwxExportVectorImageDlg::OnTextctrl5TextUpdated )
    EVT_BUTTON( ID_BITMAPBUTTON, CwxExportVectorImageDlg::OnFilepathClick )
    EVT_BUTTON( ID_SAVE, CwxExportVectorImageDlg::OnSaveClick )
    EVT_BUTTON( ID_OPEN, CwxExportVectorImageDlg::OnOpenClick )
    EVT_BUTTON( ID_CANCEL, CwxExportVectorImageDlg::OnCancelClick )
////@end CwxExportVectorImageDlg event table entries
    EVT_TIMER(-1, CwxExportVectorImageDlg::OnTimer)

END_EVENT_TABLE()

CwxExportVectorImageDlg::CwxExportVectorImageDlg()
    : m_Timer(this)
    , m_Pane(NULL)
    , m_ProgressBar(NULL)
{
    Init();
}

CwxExportVectorImageDlg::CwxExportVectorImageDlg(CPrintOptions::EOutputFormat format, CSeqGraphicPane* pane, wxWindow *parent)    
    : m_Timer(this)
    , m_Pane(pane)
    , m_OutputFormat(format)
{
    Init();
    Create(parent);
}

bool CwxExportVectorImageDlg::Create( wxWindow* parent, wxWindowID id,
                           const wxString& caption,
                           const wxPoint& pos,
                           const wxSize& size,
                           long style )
{
////@begin CwxExportVectorImageDlg creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end CwxExportVectorImageDlg creation
    InvalidateBestSize();
    Layout();
    Fit();
    string extension = CPrintOptions::GetFileExtension(m_OutputFormat);
    m_FileExtension = '.' + extension;
    SetTitle(SYMBOL_CWXEXPORTVECTORIMAGEDLG_TITLE + NStr::ToUpper(extension));
    return true;
}

CwxExportVectorImageDlg::~CwxExportVectorImageDlg()
{
////@begin CwxExportVectorImageDlg destruction
////@end CwxExportVectorImageDlg destruction
    SaveSettings();
}

void CwxExportVectorImageDlg::Init()
{
////@begin CwxExportVectorImageDlg member initialisation
    m_SeqRange = _("0:0");
    m_Panel = NULL;
    m_FileNameBox = NULL;
    m_SeqRangeBox = NULL;
    m_SaveSimplified = NULL;
    m_DisplayTitle = NULL;
    m_InfoSizer = NULL;
    m_Info = NULL;
    m_SaveButton = NULL;
    m_OpenButton = NULL;
////@end CwxExportVectorImageDlg member initialisation
    m_NewFrom = 0;
    m_NewTo = 0;
    m_NewImgWidth = 1;
    m_State = eInitial;
    m_OpenDocument = false;
    m_UserSelectedFilename = false;
    LoadSettings();
}

void CwxExportVectorImageDlg::CreateControls()
{    
////@begin CwxExportVectorImageDlg content construction
    // Generated by DialogBlocks, 05/03/2019 17:20:18 (unregistered)

    CwxExportVectorImageDlg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    m_Panel = new wxPanel( itemDialog1, ID_PANEL3, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
    m_Panel->SetName(wxT("aaaaa"));
    itemBoxSizer2->Add(m_Panel, 0, wxALIGN_CENTER_HORIZONTAL, 5);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxVERTICAL);
    m_Panel->SetSizer(itemBoxSizer4);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer4->Add(itemBoxSizer5, 1, wxGROW|wxLEFT|wxRIGHT|wxTOP, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( m_Panel, wxID_STATIC, _("Save As:"), wxDefaultPosition, wxSize(100, -1), wxALIGN_RIGHT );
    itemBoxSizer5->Add(itemStaticText6, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_FileNameBox = new wxTextCtrl( m_Panel, ID_TEXTCTRL5, wxEmptyString, wxDefaultPosition, wxSize(200, -1), 0 );
    itemBoxSizer5->Add(m_FileNameBox, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBitmapButton* itemBitmapButton8 = new wxBitmapButton( m_Panel, ID_BITMAPBUTTON, itemDialog1->GetBitmapResource(wxT("menu::open")), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW );
    itemBitmapButton8->SetHelpText(_("Select File"));
    if (CwxExportVectorImageDlg::ShowToolTips())
        itemBitmapButton8->SetToolTip(_("Select File"));
    itemBoxSizer5->Add(itemBitmapButton8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer9 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer4->Add(itemBoxSizer9, 0, wxGROW|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    wxStaticText* itemStaticText10 = new wxStaticText( m_Panel, wxID_STATIC, _("Sequence Range:"), wxDefaultPosition, wxSize(100, -1), wxALIGN_RIGHT );
    itemBoxSizer9->Add(itemStaticText10, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_SeqRangeBox = new wxTextCtrl( m_Panel, ID_TEXTCTRL6, wxEmptyString, wxDefaultPosition, wxSize(200, -1), 0 );
    m_SeqRangeBox->SetHelpText(_("Range examples: 1000-2000;  1000..2000; 10,000:2,000,000;  100k:1m;  1000[space]2000; 1000[tab]2000"));
    if (CwxExportVectorImageDlg::ShowToolTips())
        m_SeqRangeBox->SetToolTip(_("Range examples: 1000-2000;  1000..2000; 10,000:2,000,000;  100k:1m;  1000[space]2000; 1000[tab]2000"));
    itemBoxSizer9->Add(m_SeqRangeBox, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    //itemBoxSizer9->Add(5, 5, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer13 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer4->Add(itemBoxSizer13, 0, wxGROW|wxLEFT|wxRIGHT, 5);

    m_SaveSimplified = new wxCheckBox( m_Panel, ID_CHECKBOX6, _("Simplified Graphics"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    m_SaveSimplified->SetValue(false);
    m_SaveSimplified->SetHelpText(_("Removes gradient shading from some elements to support Adobe Illustrator"));
    if (CwxExportVectorImageDlg::ShowToolTips())
        m_SaveSimplified->SetToolTip(_("Do not use gradient shading"));
    itemBoxSizer13->Add(m_SaveSimplified, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_DisplayTitle = new wxCheckBox( m_Panel, ID_CHECKBOX7, _("Add Title Bar"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    m_DisplayTitle->SetValue(false);
    m_DisplayTitle->SetHelpText(_("Add title to top of document"));
    if (CwxExportVectorImageDlg::ShowToolTips())
        m_DisplayTitle->SetToolTip(_("Add title bar to the document with sequence name and range."));
    itemBoxSizer13->Add(m_DisplayTitle, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_InfoSizer = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(m_InfoSizer, 0, wxGROW|wxALL, 5);

    m_Info = new wxStaticText( itemDialog1, wxID_STATIC, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_InfoSizer->Add(m_Info, 1, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT, 5);

    itemBoxSizer2->Add(5, 1, 1, wxALIGN_CENTER_HORIZONTAL|wxALL, 1);

    wxBoxSizer* itemBoxSizer19 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer19, 0, wxALIGN_RIGHT|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    m_SaveButton = new wxButton( itemDialog1, ID_SAVE, _("Save"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer19->Add(m_SaveButton, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT, 5);

    m_OpenButton = new wxButton( itemDialog1, ID_OPEN, _("Save && Open"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer19->Add(m_OpenButton, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT, 5);

    wxButton* itemButton22 = new wxButton( itemDialog1, ID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer19->Add(itemButton22, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT, 5);

    // Set validators
    m_SeqRangeBox->SetValidator( CRegexpValidator("^[ \t]*[1-9][0-9,]*[ \t]*[kKmM]?((([ \t]*([-:]|\\.\\.)[ \t]*)|([ \t]+))[1-9][0-9,]*[ \t]*[kKmM]?)?[ \t]*$","1000\n1000-2000\n1000..2000\n10,000:2,000,000\n100k:1m\n1000 2000\n1000    2000" , & m_SeqRange) );
////@end CwxExportVectorImageDlg content construction
}

void CwxExportVectorImageDlg::SetSeqRange(TSeqPos from, TSeqPos to)
{
    m_OrgRange.Set(from, to);
    string range_str = NStr::NumericToString(from + 1, NStr::fWithCommas);
    range_str += "-";
    range_str += NStr::NumericToString(to, NStr::fWithCommas);
    m_SeqRange = ToWxString(range_str);
    //m_SeqRangeBox->SetValue(m_SeqRange);
    m_Panel->TransferDataToWindow();

    CConstRef<objects::CSeq_id> id =
        m_Pane->GetDataSource()->GetBioseqHandle().GetSeqId();
    id->GetLabel(&m_FileName, objects::CSeq_id::eContent);
    wxString path = ToWxString(m_Path);
    path += wxFileName::GetPathSeparator();
    path += ToStdString(m_FileName + m_FileExtension);
    m_FileNameBox->SetValue(path);
}


void CwxExportVectorImageDlg::SetViewport(const TVPRect& vp)
{
    m_VP = vp;
}


bool CwxExportVectorImageDlg::ShowToolTips()
{
    return true;
}

wxBitmap CwxExportVectorImageDlg::GetBitmapResource( const wxString& name )
{
    return wxArtProvider::GetBitmap(name);
}
wxIcon CwxExportVectorImageDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CwxExportVectorImageDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CwxExportVectorImageDlg icon retrieval
}


void CwxExportVectorImageDlg::OnOpenClick( wxCommandEvent& event )
{
    m_OpenDocument = true;
    OnSaveClick(event);
}


void CwxExportVectorImageDlg::OnSaveClick( wxCommandEvent& event )
{
    if ( !m_Pane ) return;

    if ( !Validate() ) {
        NcbiMessageBox("The input range is invlaid!");
        return;
    }

    m_Panel->TransferDataFromWindow();
    m_NewFrom = 0;
    m_NewTo = 0;

    // validate sequence range
    if ( !x_GetSeqRange(m_NewFrom, m_NewTo)  ||  m_NewFrom >= m_NewTo) {
        NcbiMessageBox("The input range is invalid!");
        return;
    }

    // validate file path
    wxFileName file(m_FileNameBox->GetValue());
    wxString filename = file.GetFullName();
    wxString n = filename.Lower();
    size_t pos = filename.rfind(m_FileExtension);
    if (pos != string::npos) {
        filename = filename.SubString(0, pos-1);
    }
    wxString path = file.GetPath();

    if (path.IsEmpty()) {
        NcbiMessageBox("A directory must be specified!");
        return;
    }
    else if (!wxFileName::DirExists(path) ) {
        NcbiMessageBox("The given directory doesn't exist!");
        return;
    }  
    else if (filename.IsEmpty()) {
        NcbiMessageBox("A file name must be specified!");
        return;
    }

    m_Path = ToStdString(path);
    m_FileName = ToStdString(filename);
    string full_path = CDir::ConcatPath(m_Path, m_FileName + m_FileExtension);

    // Make sure directory is writable:
    CDir dir(m_Path);
    if (!dir.CheckAccess(CDirEntry::fWrite)) {
        NcbiMessageBox("Error - You do not have write permission to the directory: " + m_Path);
        return;
    }

   if (!m_UserSelectedFilename) {
        // Warn user if file exists.  If the file was selected from the file selection
        // dialog we do not need to do this (if not the file came from the registry and probably
        // does already exist)
        CFile f(full_path);
        if (f.Exists()) {
            if (!f.CheckAccess(CDirEntry::fWrite)) {
                NcbiMessageBox("Error - You do not have write permission to the file: " + full_path);
                return;
            }

            int choice = wxMessageBox(wxT("Selected file already exists.  Are you sure you want to  overwrite it?"), 
                                      wxT("Warning"), wxYES_NO  | wxICON_ERROR, this);
            if (choice != wxYES) {
                return;
            }               
        }
    }

    m_NewImgWidth = 
        (TVPUnit)((double)m_VP.Width() / m_OrgRange.GetLength() * (m_NewTo - m_NewFrom + 1));

    if (m_NewImgWidth > kMaximumWidth) {
        string msg = "The Image is too wide. The projected width is ";
        msg += NStr::NumericToString(m_NewImgWidth);
        msg += " which is over the limit (";
        msg += NStr::NumericToString(kMaximumWidth, NStr::fWithCommas);
        msg += "pixels) permitted!";
        NcbiMessageBox(msg);
        return;
    }

    // add a progress bar to indicate that data are being updated
    m_Info->SetLabel(_("Preparing data...  Please Wait!"));
    m_ProgressBar = new CIndProgressBar(this, wxID_ANY, wxDefaultPosition, 240);
    m_InfoSizer->Add(m_ProgressBar, 0, wxALIGN_CENTER|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5);
    m_InfoSizer->Layout();
    InvalidateBestSize();
    Layout();
    Fit();
    m_Panel->Enable(false);
    m_OpenButton->Enable(false);
    m_SaveButton->Enable(false);
    m_State = eCreatingTracks;

    // start the timer to check if the data loading is finished
    m_Timer.Start(300);
}


void CwxExportVectorImageDlg::OnTimer(wxTimerEvent&)
{
    if (m_State == eReadyToSave) {
        m_Timer.Stop();
        m_State = eInitial;


        //m_Pane->AdjustViewPortHeightToImage();
        unique_ptr<IImageGrabber> grabber{ CImageGrabberFactory::CreateImageGrabber(m_OutputFormat, *m_Pane) };

        if (m_DisplayTitle->GetValue()) {
            // Get height of title (if chosen) so that it can be added to the final output size
            TModelUnit title_height = m_Pane->GetConfig()->GetTitleFont()->TextHeight() + TModelUnit(2) -
                m_Pane->GetConfig()->GetTitleFont()->GetFontDescender();
            grabber->SetTitleHeight(title_height);
        }
        else {
            grabber->SetTitleHeight(0);
        }

        grabber->SetOutputInfo(m_Path, m_FileName, CPrintOptions::GetFileExtension(m_OutputFormat));
        grabber->DisableGouraudShading(m_SaveSimplified->GetValue());
        IImageGrabber::eCaptureResult res =
            grabber->GrabImages(0/*dummy value, not used currently*/);

        // Set the cursor to its value prior to the save
        SetCursor(*wxSTANDARD_CURSOR);
        if (res == IImageGrabber::eOpenGLError) {
            wxMessageBox(wxT("Graphics system does not support in-memory image save feature"), 
                wxT("Error Saving"), wxOK);
        } else if (res == IImageGrabber::eFileError) {
            wxMessageBox(wxT("File error occured during save. Make sure file and directory names are valid."), 
                wxT("Error Saving"), wxOK);
        } else if (m_OpenDocument) {
            // May vary from actual name if user did not end file name with proper extension
            wxString full_path = ToWxString(CDir::ConcatPath(m_Path, m_FileName + m_FileExtension));
            wxLaunchDefaultApplication(full_path);
            m_OpenDocument = false;
        }
        EndModal(wxID_CANCEL);
    } else if (m_State == eLoadingData  &&  m_Pane->AllJobsFinished()) {
        m_Timer.Stop();
        string extension = CPrintOptions::GetFileExtension(m_OutputFormat);
        m_Info->SetLabel(_("Saving image to ") + NStr::ToUpper(extension) + "...");
        m_ProgressBar->Show(false);
        m_Timer.Start(100);
        m_State = eReadyToSave;
        SetCursor(*wxHOURGLASS_CURSOR);
    } else if (m_State == eCreatingTracks  &&  m_Pane->AllTracksCreated()) {
        m_Pane->SetViewportWidth(m_NewFrom, m_NewTo, m_NewImgWidth);    
        m_Pane->AdjustViewPortHeightToImage();
        m_Pane->UpdateData(m_NewFrom, m_NewTo);
        m_State = eLoadingData;
    }
}

static const string kSaveVectorImageBaseKey("GBPlugins.SaveVectorImageDialog");
static const string kVectorImagePathKey = "DocumentPath";

void CwxExportVectorImageDlg::LoadSettings()
{
    CGuiRegistry& gui_reg = CGuiRegistry::GetInstance();
    CRegistryReadView view = gui_reg.GetReadView(kSaveVectorImageBaseKey);
    string file_path = view.GetString(kVectorImagePathKey, "");

    wxFileName file(ToWxString(file_path));
    wxString filename = file.GetFullName();
    wxString path = file.GetPath();

    if ( !path.empty()  && wxFileName::DirExists(path) ) {
        m_Path = file_path;
    } else {
        // create a default path under user folder
        m_Path = ToStdString(wxGetHomeDir());
    }
}


void CwxExportVectorImageDlg::SaveSettings() const
{
    if ( !m_Path.empty() ) {
        CGuiRegistry& gui_reg = CGuiRegistry::GetInstance();
        CRegistryWriteView view = gui_reg.GetWriteView(kSaveVectorImageBaseKey);
        view.Set(kVectorImagePathKey, m_Path);
    }
}


void CwxExportVectorImageDlg::OnFilepathClick( wxCommandEvent& event )
{
    string full_name = ToAsciiStdString(m_FileNameBox->GetValue());

    // If full_name is just a directory
    string path = full_name;
    string fname;    

    CFile f(ToAsciiStdString(m_FileNameBox->GetValue()));
    // If full_name is a valid directory and (existing) file
    if (f.IsFile()) {
        path = f.GetDir();
        fname = f.GetName();
    }
    else if (!f.IsDir()) {        
        string d = f.GetDir();
        CDir dir(d);
        // if file_name is valid direcotry and not-yet-created file:
        if (dir.IsDir()) {
            path = f.GetDir();
            fname = f.GetName();
        }
    }

    wxFileDialog dlg(this, wxT("Set File Name"),
        ToWxString(path), ToWxString(fname),
        ToWxString(m_FileExtension), wxFD_SAVE|wxFD_OVERWRITE_PROMPT);

    if (dlg.ShowModal() != wxID_OK)
        return;

    wxString filename = dlg.GetPath();
    m_FileNameBox->SetValue(filename);
    m_FileName = dlg.GetFilename();
    m_Path = dlg.GetDirectory();
    m_UserSelectedFilename = true;
}


void CwxExportVectorImageDlg::OnCancelClick( wxCommandEvent& event )
{
    // Cancel all jobs
    m_Timer.Stop();
    EndModal(wxID_CANCEL);
}


bool CwxExportVectorImageDlg::x_GetSeqRange(TSeqPos& from, TSeqPos& to) const
{
    string pos_str = ToStdString(m_SeqRange);
    long f, t;
    bool valid = CSeqUtils::StringToRange(pos_str, f, t);
    if (valid  &&  f > 0  &&  t > 0) {
        from = (TSeqPos)(f - 1);
        to = (TSeqPos)(t);
        return true;
    }
    return false;
}

void CwxExportVectorImageDlg::OnTextctrl5TextUpdated( wxCommandEvent& event )
{
    m_UserSelectedFilename = false;
    event.Skip();
}

END_NCBI_SCOPE


