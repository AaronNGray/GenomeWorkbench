/*  $Id: wx_track_settings_dlg.cpp 23952 2011-06-23 19:12:28Z wuliangs $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:
 *
 * File Description:
 *
 */
#include <ncbi_pch.hpp>////@begin includes
////@end includes
#include <wx/bitmap.h>
#include <wx/icon.h>
#include <wx/textctrl.h>
#include <wx/stattext.h>
#include <wx/button.h>
#include <wx/sizer.h>
#include <wx/choice.h>
#include <wx/combobox.h>


#include "wx_track_settings_dlg.hpp"
#include <gui/widgets/seq_graphic/feature_track.hpp>
#include <gui/widgets/seq_graphic/all_other_features_track.hpp>
#include <gui/widgets/wx/wx_utils.hpp>
#include <objects/seqfeat/SeqFeatData.hpp>

BEGIN_NCBI_SCOPE

USING_SCOPE(objects);

////@begin XPM images
////@end XPM images

IMPLEMENT_DYNAMIC_CLASS( CwxTrackSettingsDlg, wxDialog )

BEGIN_EVENT_TABLE( CwxTrackSettingsDlg, wxDialog )

////@begin CwxTrackSettingsDlg event table entries
    EVT_CHOICE( ID_CHOICE, CwxTrackSettingsDlg::OnTrackTypeChanged )

    EVT_BUTTON( wxID_OK, CwxTrackSettingsDlg::OnOkClick )

////@end CwxTrackSettingsDlg event table entries

END_EVENT_TABLE()

CwxTrackSettingsDlg::CwxTrackSettingsDlg()
{
    Init();
}

CwxTrackSettingsDlg::CwxTrackSettingsDlg( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    CreateX(parent, id, caption, pos, size, style);
}

bool CwxTrackSettingsDlg::CreateX( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CwxTrackSettingsDlg creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CwxTrackSettingsDlg creation
    return true;
}

CwxTrackSettingsDlg::~CwxTrackSettingsDlg()
{
////@begin CwxTrackSettingsDlg destruction
////@end CwxTrackSettingsDlg destruction
}

void CwxTrackSettingsDlg::Init()
{
////@begin CwxTrackSettingsDlg member initialisation
    m_TrackType = NULL;
    m_SubtypeGroup = NULL;
    m_Subtype = NULL;
    m_TrackName = NULL;
    m_TrackFilter = NULL;
    m_Annots = NULL;
////@end CwxTrackSettingsDlg member initialisation
}

void CwxTrackSettingsDlg::CreateControls()
{    
////@begin CwxTrackSettingsDlg content construction
    // Generated by DialogBlocks, 10/05/2011 16:10:49 (unregistered)

    CwxTrackSettingsDlg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_RIGHT|wxLEFT|wxRIGHT, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, _("Track type:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_TrackTypeStrings;
    m_TrackType = new wxChoice( itemDialog1, ID_CHOICE, wxDefaultPosition, wxSize(150, -1), m_TrackTypeStrings, 0 );
    itemBoxSizer3->Add(m_TrackType, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_SubtypeGroup = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(m_SubtypeGroup, 0, wxALIGN_RIGHT|wxLEFT|wxRIGHT, 5);

    wxStaticText* itemStaticText7 = new wxStaticText( itemDialog1, wxID_STATIC, _("Feature subtype:"), wxDefaultPosition, wxDefaultSize, 0 );
    if (CwxTrackSettingsDlg::ShowToolTips())
        itemStaticText7->SetToolTip(_("Feature subtype storage key, such as STS and gene"));
    m_SubtypeGroup->Add(itemStaticText7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_SubtypeStrings;
    m_Subtype = new wxChoice( itemDialog1, ID_CHOICE1, wxDefaultPosition, wxSize(150, -1), m_SubtypeStrings, 0 );
    if (CwxTrackSettingsDlg::ShowToolTips())
        m_Subtype->SetToolTip(_("Feature subtype storage key, such as STS and gene"));
    m_SubtypeGroup->Add(m_Subtype, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer9 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer9, 0, wxALIGN_RIGHT|wxLEFT|wxRIGHT, 5);

    wxStaticText* itemStaticText10 = new wxStaticText( itemDialog1, wxID_STATIC, _("Track title:"), wxDefaultPosition, wxDefaultSize, 0 );
    if (CwxTrackSettingsDlg::ShowToolTips())
        itemStaticText10->SetToolTip(_("Track title/name shown on the track title bar. It doesn't need to be unique, but a unique name may help differentiate it from others."));
    itemBoxSizer9->Add(itemStaticText10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_TrackName = new wxTextCtrl( itemDialog1, ID_TEXTCTRL, wxEmptyString, wxDefaultPosition, wxSize(150, -1), 0 );
    if (CwxTrackSettingsDlg::ShowToolTips())
        m_TrackName->SetToolTip(_("Track title/name shown on the track title bar. It doesn't need to be unique, but a unique name may help differentiate it from others."));
    itemBoxSizer9->Add(m_TrackName, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer12 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer12, 0, wxALIGN_RIGHT|wxLEFT|wxRIGHT, 5);

    wxStaticText* itemStaticText13 = new wxStaticText( itemDialog1, wxID_STATIC, _("Filter:"), wxDefaultPosition, wxDefaultSize, 0 );
    if (CwxTrackSettingsDlg::ShowToolTips())
        itemStaticText13->SetToolTip(_("Track-specific filter, not all tracks support filters. It is optional."));
    itemBoxSizer12->Add(itemStaticText13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_TrackFilter = new wxTextCtrl( itemDialog1, ID_TEXTCTRL1, wxEmptyString, wxDefaultPosition, wxSize(150, -1), 0 );
    if (CwxTrackSettingsDlg::ShowToolTips())
        m_TrackFilter->SetToolTip(_("Track-specific filter, not all tracks support filters.  It is optional."));
    itemBoxSizer12->Add(m_TrackFilter, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer15 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer15, 0, wxALIGN_RIGHT|wxLEFT|wxRIGHT, 5);

    wxStaticText* itemStaticText16 = new wxStaticText( itemDialog1, wxID_STATIC, _("Annotation names:"), wxDefaultPosition, wxDefaultSize, 0 );
    if (CwxTrackSettingsDlg::ShowToolTips())
        itemStaticText16->SetToolTip(_("Type in specific annotation names or select one of preset categories. More than one annotations separated using any of \",;|\" are acceptable, e.g. NA000000015.1,NA000000026.1"));
    itemBoxSizer15->Add(itemStaticText16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_AnnotsStrings;
    m_Annots = new wxComboBox( itemDialog1, ID_COMBOBOX, wxEmptyString, wxDefaultPosition, wxSize(150, -1), m_AnnotsStrings, wxCB_DROPDOWN );
    if (CwxTrackSettingsDlg::ShowToolTips())
        m_Annots->SetToolTip(_("Type in specific annotation names or select one of preset categories. More than one annotations separated using any of \",;|\" are acceptable, e.g. NA000000015.1,NA000000026.1."));
    itemBoxSizer15->Add(m_Annots, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemBoxSizer2->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStdDialogButtonSizer* itemStdDialogButtonSizer19 = new wxStdDialogButtonSizer;

    itemBoxSizer2->Add(itemStdDialogButtonSizer19, 0, wxALIGN_RIGHT|wxALL, 0);
    wxButton* itemButton20 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxSize(70, 24), 0 );
    itemButton20->SetDefault();
    itemStdDialogButtonSizer19->AddButton(itemButton20);

    wxButton* itemButton21 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxSize(70, 24), 0 );
    itemStdDialogButtonSizer19->AddButton(itemButton21);

    itemStdDialogButtonSizer19->Realize();

////@end CwxTrackSettingsDlg content construction
}

bool CwxTrackSettingsDlg::ShowToolTips()
{
    return true;
}
wxBitmap CwxTrackSettingsDlg::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CwxTrackSettingsDlg bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CwxTrackSettingsDlg bitmap retrieval
}
wxIcon CwxTrackSettingsDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CwxTrackSettingsDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CwxTrackSettingsDlg icon retrieval
}

void CwxTrackSettingsDlg::OnOkClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK in CwxTrackSettingsDlg.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK in CwxTrackSettingsDlg. 
}

void CwxTrackSettingsDlg::OnTrackTypeChanged( wxCommandEvent& event )
{
    if (m_TrackType->GetStringSelection() ==
        ToWxString(CFeatureTrackFactory::GetTypeInfo().GetId())) {
        m_SubtypeGroup->Show(true);
    } else {
        m_SubtypeGroup->Show(false);
    }
    // Before editing this code, remove the block markers.
    event.Skip();
    Layout();
}

void CwxTrackSettingsDlg::SetTrackName(const wxString& name)
{
    m_TrackName->SetValue(name);
}

void CwxTrackSettingsDlg::InitTrackTypes(
    const CTrackConfigManager::TFactoryMap& factories)
{
	m_Subtype->Freeze();
	m_TrackType->Freeze();
	m_Annots->Freeze();

	m_Subtype->Clear();
	m_TrackType->Clear();
	m_Annots->Clear();

    m_Annots->Append(_("All"));
    m_Annots->Append(_("Named"));
    m_Annots->Append(_("Unnamed"));

    const CFeatList& feats(*CSeqFeatData::GetFeatList());
    ITERATE(CFeatList, iter, feats) {
        if (iter->GetSubtype() != CSeqFeatData::eSubtype_any) {
            m_Subtype->Append(ToWxString(iter->GetStoragekey()));
        }
    }
    m_Subtype->Select(0);
    
    ITERATE (CTrackConfigManager::TFactoryMap, iter, factories) {
        if (iter->first !=
            CAllOtherFeaturesTrackFactory::GetTypeInfo().GetId()) {
            m_TrackType->Append(ToWxString(iter->first));
        }
    }
    m_TrackType->Select(0);
    
	m_Subtype->Thaw();
	m_TrackType->Thaw();
	m_Annots->Thaw();
    
    m_SubtypeGroup->Show(false);
    Layout();
}

wxString CwxTrackSettingsDlg::GetTrackName() const
{
    return m_TrackName->GetValue();
}

wxString CwxTrackSettingsDlg::GetTrackFilter() const
{
    return m_TrackFilter->GetValue();
}

wxString CwxTrackSettingsDlg::GetTrackType() const
{
    return m_TrackType->GetStringSelection();
}
    
wxString CwxTrackSettingsDlg::GetSubtype() const
{
    return m_Subtype->GetStringSelection();
}

wxString CwxTrackSettingsDlg::GetAnnots() const
{
    return m_Annots->GetValue();
}

END_NCBI_SCOPE
