/*  $Id: test_clients.cpp 30785 2014-07-23 20:48:35Z katargir $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Andrey Yazhuk
 *
 * File Description:
 */

#include <ncbi_pch.hpp>

#include <gui/opengl.h>
#include <corelib/ncbitime.hpp>

// Generated by DialogBlocks (unregistered), 24/04/2007 11:16:56

////@end includes

#include <gui/widgets/wx/test_clients.hpp>
#include <gui/widgets/wx/wx_utils.hpp>

#include <wx/timer.h>
#include <wx/sizer.h>
#include <wx/menu.h>
#include <wx/icon.h>
#include <wx/artprov.h>
#include <wx/imaglist.h>


IMPLEMENT_DYNAMIC_CLASS( ncbi::CClockPanelWMClient, wxPanel )

BEGIN_NCBI_SCOPE


BEGIN_EVENT_TABLE( CClockPanelWMClient, wxPanel )
    EVT_TIMER(1000, CClockPanelWMClient::OnTimer)
END_EVENT_TABLE()


CClockPanelWMClient::CClockPanelWMClient()
:   m_Timer(this, 1000)
{
    Init();
}

CClockPanelWMClient::CClockPanelWMClient(wxWindow* parent)
:   wxPanel(),
    m_Timer(this, 1000)
{
    Init();
    Create(parent, wxID_ANY, wxPoint(0,0), wxSize(0,0));
}

bool CClockPanelWMClient::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    wxPanel::Create( parent, id, pos, size, style );
    
    CreateControls();

    x_Update();
    m_Timer.Start(1000);
    return true;
}


CClockPanelWMClient::~CClockPanelWMClient()
{
    LOG_POST("~CClockPanelWMClient()");
}

void CClockPanelWMClient::Init()
{
    m_HTMLWindow = NULL;

    SetColor(CRgbaColor(224, 224, 255));
    SetName(wxT("Clock"));
}

void CClockPanelWMClient::CreateControls()
{
    CClockPanelWMClient* itemPanel1 = this;

    if (ShowToolTips())
        this->SetToolTip(wxT("Clock View tooltip"));
    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    long style = wxHW_SCROLLBAR_AUTO | wxNO_BORDER |wxHSCROLL | wxVSCROLL;
    m_HTMLWindow = new wxHtmlWindow( itemPanel1, ID_HTMLWINDOW2, wxDefaultPosition,
                                    wxDefaultSize, style);
    itemBoxSizer2->Add(m_HTMLWindow, 1, wxGROW|wxALL, 0);
}


wxWindow* CClockPanelWMClient::GetWindow()
{   
    return this;    
}


string CClockPanelWMClient::GetClientLabel(IWMClient::ELabel) const
{   
    return "Clock WM Client";   
}


IWMClient::CFingerprint CClockPanelWMClient::GetFingerprint() const
{
    return CFingerprint(GetClientLabel(IWMClient::eDetailed),false);
}


const CRgbaColor* CClockPanelWMClient::GetColor() const 
{   
    return &m_Color;    
}


void CClockPanelWMClient::SetColor(const CRgbaColor& color) 
{
    m_Color = color;
    SetBackgroundColour(ConvertColor(m_Color));
}


string CClockPanelWMClient::GetIconAlias() const
{
    return "";
}


const wxMenu* CClockPanelWMClient::GetMenu()
{
    wxMenu* menu = new wxMenu();
    wxMenu* edit_submenu = new wxMenu;

    edit_submenu->Append(wxID_PASTE, wxT("Paste"), wxT(""), wxITEM_NORMAL);
    edit_submenu->Append(wxID_COPY, wxT("Copy"), wxT(""), wxITEM_NORMAL);
    edit_submenu->Append(wxID_ANY, wxT("Clock"), wxT(""), wxITEM_NORMAL);
    edit_submenu->Append(wxID_CUT, wxT("Cut"), wxT(""), wxITEM_NORMAL);

    menu->Append(wxID_ANY, wxT("Edit"), edit_submenu);

    return menu;
}


void CClockPanelWMClient::UpdateMenu(wxMenu& root_menu)
{
}


bool CClockPanelWMClient::ShowToolTips()
{
    return true;
}


void CClockPanelWMClient::OnTimer(wxTimerEvent& event)
{
    if(IsShown())    {
        x_Update();
    }
}

void CClockPanelWMClient::x_Update()
{
    if(m_HTMLWindow)    {
        ncbi::CTime time(ncbi::CTime::eCurrent);
        string s = time.AsString();

        string html = "<h1>My Clock</h1></br><p>Local time : <b>" + s + "</b>.</p>";

        m_HTMLWindow->SetPage(ToWxString(html));
    }
}


bool CClockPanelWMClient::Show(bool show)
{
    bool ok = wxPanel::Show(show);
    if(show)    {
        x_Update();
    }
    return ok;
}

////////////////////////////////////////////////////////////////////////////////
/// CHTMLWMClient
int CHTMLWMClient::m_Count = 0;

CHTMLWMClient::CHTMLWMClient(wxWindow* parent)
: wxHtmlWindow(parent, wxID_ANY,  wxDefaultPosition, wxSize(0,0), wxNO_BORDER)
{
    wxString title = wxT("Test HTML View ") + wxString::Format(wxT("%d"), m_Count++);
    wxString s = wxT("<h1>") + title + wxT("</h1><p> This is test view.</p>");

    SetName(title);
    SetPage(s);
}


////////////////////////////////////////////////////////////////////////////////
/// CTreeWMClient
CTreeWMClient::CTreeWMClient(wxWindow* parent)
: wxTreeCtrl(parent, wxID_ANY,  wxDefaultPosition, wxSize(0,0), wxTR_HAS_BUTTONS | wxNO_BORDER)
{
    SetWindowStyle(wxTR_DEFAULT_STYLE | wxNO_BORDER);

    wxImageList* imglist = new wxImageList(16, 16, true, 2);
    imglist->Add(wxArtProvider::GetBitmap(wxART_FOLDER, wxART_OTHER, wxSize(16,16)));
    imglist->Add(wxArtProvider::GetBitmap(wxART_NORMAL_FILE, wxART_OTHER, wxSize(16,16)));
    AssignImageList(imglist);

    wxTreeItemId root = AddRoot(wxT("wxAUI Project"), 0);
    wxArrayTreeItemIds items;

    items.Add(AppendItem(root, wxT("Item 1"), 0));
    items.Add(AppendItem(root, wxT("Item 2"), 0));
    items.Add(AppendItem(root, wxT("Item 3"), 0));
    items.Add(AppendItem(root, wxT("Item 4"), 0));
    items.Add(AppendItem(root, wxT("Item 5"), 0));

    int i, count;
    for (i = 0, count = (int)items.Count(); i < count; ++i)
    {
        wxTreeItemId id = items.Item(i);
        AppendItem(id, wxT("Subitem 1"), 1);
        AppendItem(id, wxT("Subitem 2"), 1);
        AppendItem(id, wxT("Subitem 3"), 1);
        AppendItem(id, wxT("Subitem 4"), 1);
        AppendItem(id, wxT("Subitem 5"), 1);
    }
    Expand(root);
}


///////////////////////////////////////////////////////////////////////////////
/// CGLTestWMClient

BEGIN_EVENT_TABLE(ncbi::CGLTestWMClient, CGLCanvas)
    EVT_SIZE(CGLTestWMClient::OnSize)
END_EVENT_TABLE()

CGLTestWMClient::CGLTestWMClient(wxWindow* parent)
: CGLCanvas(parent, wxID_ANY)
{
    SetSize(0,0);
    m_Port.SetModelLimitsRect(TModelRect(0, 0, 1, 1));
    m_Port.SetVisibleRect(TModelRect(0, 0, 1, 1));
}

void CGLTestWMClient::x_Render()
{
    glClearColor(0.5, 0.5, 0.5, 1.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    m_Port.OpenOrtho();

    glColor3d(0.5, 0.5, 1.0);
    glRectd(0.1, 0.1, 0.9, 0.9);

    m_Port.Close();
}


void CGLTestWMClient::OnSize(wxSizeEvent& event)
{
    wxSize size = event.GetSize();
    TVPRect rc_vp(0, 0, size.GetWidth(), size.GetHeight());
    m_Port.SetViewport(rc_vp);
    event.Skip();
}


END_NCBI_SCOPE
