/*  $Id: bam_coverage_graph_panel.cpp 44756 2020-03-05 18:44:36Z shkeda $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Liangshou Wu
 */


// Generated by DialogBlocks (unregistered), 02/03/2011 09:12:09

#include <ncbi_pch.hpp>
#include <gui/widgets/loaders/bam_coverage_graph_panel.hpp>
#include <gui/widgets/wx/wx_utils.hpp>
#include <gui/utils/job_future.hpp>

#include <corelib/ncbifile.hpp>
#include <wx/dirdlg.h>
#include <wx/filename.h>
#include <wx/checkbox.h>
#include <wx/radiobut.h>
#include <wx/sizer.h>
#include <wx/stattext.h>
#include <wx/statbox.h>
#include <wx/button.h>
#include <wx/msgdlg.h>
#include <wx/textctrl.h>
#include <wx/filedlg.h>

#include <gui/widgets/loaders/assembly_sel_panel.hpp>

#include <sra/readers/bam/bamread.hpp>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE
USING_SCOPE(objects);

/*!
 * CBamCoverageGraphPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CBamCoverageGraphPanel, wxPanel )


/*!
 * CBamCoverageGraphPanel event table definition
 */

BEGIN_EVENT_TABLE( CBamCoverageGraphPanel, wxPanel )

////@begin CBamCoverageGraphPanel event table entries
    EVT_IDLE( CBamCoverageGraphPanel::OnIdle )
////@end CBamCoverageGraphPanel event table entries

END_EVENT_TABLE()


/*!
 * CBamCoverageGraphPanel constructors
 */

CBamCoverageGraphPanel::CBamCoverageGraphPanel()
{
    Init();
}

CBamCoverageGraphPanel::CBamCoverageGraphPanel( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*!
 * CBamCoverageGraphPanel creator
 */

bool CBamCoverageGraphPanel::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CBamCoverageGraphPanel creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CBamCoverageGraphPanel creation

    return true;
}


/*!
 * CBamCoverageGraphPanel destructor
 */

CBamCoverageGraphPanel::~CBamCoverageGraphPanel()
{
////@begin CBamCoverageGraphPanel destruction
////@end CBamCoverageGraphPanel destruction
}


/*!
 * Member initialisation
 */

void CBamCoverageGraphPanel::Init()
{
////@begin CBamCoverageGraphPanel member initialisation
    m_BamAssembly = NULL;
    m_AssemblyPanel = NULL;
////@end CBamCoverageGraphPanel member initialisation
}


/*!
 * Control creation for CBamCoverageGraphPanel
 */

// Fix Solaris/DialogBlocks issue
#ifndef _T
    #define _T wxT
#endif

void CBamCoverageGraphPanel::CreateControls()
{    
////@begin CBamCoverageGraphPanel content construction
    CBamCoverageGraphPanel* itemPanel1 = this;

    wxStaticBox* itemStaticBoxSizer1Static = new wxStaticBox(itemPanel1, wxID_ANY, _("Assembly Options"));
    wxStaticBoxSizer* itemStaticBoxSizer1 = new wxStaticBoxSizer(itemStaticBoxSizer1Static, wxVERTICAL);
    itemPanel1->SetSizer(itemStaticBoxSizer1);

    wxStaticBox* itemStaticBoxSizer2Static = new wxStaticBox(itemStaticBoxSizer1->GetStaticBox(), wxID_ANY, _("BAM File Assembly Identifier"));
    wxStaticBoxSizer* itemStaticBoxSizer2 = new wxStaticBoxSizer(itemStaticBoxSizer2Static, wxHORIZONTAL);
    itemStaticBoxSizer1->Add(itemStaticBoxSizer2, 0, wxGROW|wxALL, 5);

    m_BamAssembly = new wxStaticText( itemStaticBoxSizer2->GetStaticBox(), wxID_STATIC, _("N/A"), wxDefaultPosition, wxSize(213, -1), wxALIGN_LEFT|wxSTATIC_BORDER );
    itemStaticBoxSizer2->Add(m_BamAssembly, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer1->Add(itemBoxSizer4, 0, wxGROW|wxLEFT|wxRIGHT, 5);

    m_AssemblyPanel = new CAssemblySelPanel( itemStaticBoxSizer1->GetStaticBox(), ID_PANEL9, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
    itemBoxSizer4->Add(m_AssemblyPanel, 1, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5);

////@end CBamCoverageGraphPanel content construction
}


void CBamCoverageGraphPanel::SetBamFiles(const set<string>& bam_files)
{
    if (bam_files.empty()) return;

    m_BamFiles = bam_files;
    m_BamAssemblyFuture = job_async([bam_files](ICanceled& canceled) {
        string bamAssembly;
        try {
            for (const auto& iter : bam_files) {
                if (canceled.IsCanceled()) 
                    break;
                CBamRawDb db(iter);
                //string header = db.GetHeaderText();
                const string& header = db.GetHeader().GetText();
                if (header.empty())
                    continue;
                if (canceled.IsCanceled()) 
                    break;
                list<string> lines;
                NStr::Split(header, "\n\r", lines, NStr::fSplit_Tokenize);
                for (const auto& line : lines) {
                    if (line.size() > 3 && line.substr(0, 3) == "@SQ") {
                        list<string> fields;
                        NStr::Split(line, "\t", fields, NStr::fSplit_Tokenize);
                        for (const auto& field : fields) {
                            if (field.size() > 3 && field.substr(0, 3) == "AS:") {
                                bamAssembly = field.substr(3);
                                break;
                            }
                        }
                        if (!bamAssembly.empty())
                            break;
                    }
                }
                if (!bamAssembly.empty())
                    break;
            }
        } catch (const exception& e) {
            ERR_POST(Error << e.what());
        }
        return bamAssembly;
    }, "Retrieving BAM Assembly");

    m_BamAssembly->SetLabel(wxT("Pending..."));
    m_BamAssembly->SetToolTip(wxT("BAM Assembly tag is being retrieved..."));
}


bool CBamCoverageGraphPanel::IsInputValid()
{
    return m_AssemblyPanel->TransferDataFromWindow();
}



/*!
 * Should we show tooltips?
 */

bool CBamCoverageGraphPanel::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CBamCoverageGraphPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CBamCoverageGraphPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CBamCoverageGraphPanel bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CBamCoverageGraphPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CBamCoverageGraphPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CBamCoverageGraphPanel icon retrieval
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BROWSEBUTTON
 */


static const char* kMappingAssembly = ".MapAssembly";

void CBamCoverageGraphPanel::LoadSettings()
{
    if( ! m_RegPath.empty())   {
        CGuiRegistry& gui_reg = CGuiRegistry::GetInstance();
        CRegistryReadView view = gui_reg.GetReadView(m_RegPath + kMappingAssembly);

        m_AssemblyPanel->GetData().LoadSettings(view);
    }
}

void CBamCoverageGraphPanel::SaveSettings() const
{
    if ( !m_RegPath.empty() ) {
        CGuiRegistry& gui_reg = CGuiRegistry::GetInstance();
        CRegistryWriteView view = gui_reg.GetWriteView(m_RegPath + kMappingAssembly);

        m_AssemblyPanel->GetData().SaveSettings(view);
    }
}


/*!
 * wxEVT_IDLE event handler for ID_CBAMCOVERAGEGRAPHPANEL
 */

void CBamCoverageGraphPanel::OnIdle(wxIdleEvent& event) 
{
    if (m_BamAssemblyFuture.IsComplete()) {
        try {
            string bam_assembly = m_BamAssemblyFuture();
            if (!bam_assembly.empty()) {
                wxString str = ToWxString(bam_assembly);
                m_BamAssembly->SetLabel(str);
                m_BamAssembly->SetToolTip(str);
            } else {
                m_BamAssembly->SetLabel(wxT("N/A"));
                m_BamAssembly->SetToolTip(wxEmptyString);
            }


        } catch (const std::exception& e) {
        }
        m_BamAssemblyFuture.reset(); // not neccessary but recommended to release resources
    } else
     event.Skip();
}


END_NCBI_SCOPE




