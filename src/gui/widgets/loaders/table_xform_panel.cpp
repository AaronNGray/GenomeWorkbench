/*  $Id: table_xform_panel.cpp 43756 2019-08-28 16:45:50Z katargir $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors: Bob Falk
 *
 * File Description:
 *
 */

#include <ncbi_pch.hpp>////@begin includes
////@end includes

#include "table_xform_panel.hpp"
#include <gui/objutils/registry.hpp>
#include <gui/objutils/interface_registry.hpp>
#include <gui/objutils/table_data.hpp>
#include <gui/widgets/wx/async_call.hpp>
#include <gui/widgets/wx/file_extensions.hpp>

#include <objmgr/object_manager.hpp>
#include <objects/general/Object_id.hpp>

BEGIN_NCBI_SCOPE
USING_SCOPE(objects);

IMPLEMENT_DYNAMIC_CLASS( CTableXformPanel, wxPanel )

BEGIN_EVENT_TABLE( CTableXformPanel, wxPanel )

////@begin CTableXformPanel event table entries
    EVT_BUTTON( ID_SAVEIMPORTPARMS, CTableXformPanel::OnSaveImportParmsClick )
    EVT_RADIOBUTTON( ID_CONVERTTOFEATURES, CTableXformPanel::OnConvertToFeaturesSelected )
    EVT_RADIOBUTTON( ID_CREATELOCATIONS, CTableXformPanel::OnCreateLocationsSelected )
    EVT_RADIOBUTTON( ID_CONVERTTOSNP, CTableXformPanel::OnConvertToSnpSelected )
    EVT_RADIOBUTTON( ID_DONOTCONVERT, CTableXformPanel::OnDoNotConvertSelected )
////@end CTableXformPanel event table entries

END_EVENT_TABLE()

CTableXformPanel::CTableXformPanel()
{
    Init();
}

CTableXformPanel::CTableXformPanel( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}

bool CTableXformPanel::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CTableXformPanel creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CTableXformPanel creation
    return true;
}

CTableXformPanel::~CTableXformPanel()
{
////@begin CTableXformPanel destruction
////@end CTableXformPanel destruction
}

void CTableXformPanel::Init()
{
////@begin CTableXformPanel member initialisation
    m_ConvertToFeatures = NULL;
    m_CreateLocations = NULL;
    m_ConvertToSnips = NULL;
    m_KeepTableUnchanged = NULL;
    m_XformInfo = NULL;
    m_TableDataListCtrl = NULL;
////@end CTableXformPanel member initialisation

    m_Scope.Reset(new CScope(*CObjectManager::GetInstance()));

    m_LastXform = eNoTransform;
}

void CTableXformPanel::CreateControls()
{    
////@begin CTableXformPanel content construction
    // Generated by DialogBlocks, 14/05/2019 11:42:24 (unregistered)

    CTableXformPanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxStaticText* itemStaticText3 = new wxStaticText( itemPanel1, wxID_STATIC, _("Create Features or Locations from Table Columns"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText3->SetFont(wxFont(10, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Tahoma")));
    itemBoxSizer2->Add(itemStaticText3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer4, 0, wxALIGN_LEFT|wxALL, 5);

    wxButton* itemButton5 = new wxButton( itemPanel1, ID_SAVEIMPORTPARMS, _("Save Import Parameters..."), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(itemButton5, 0, wxALIGN_LEFT|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer6Static = new wxStaticBox(itemPanel1, wxID_ANY, _("Choose to create locations, features, or keep the table as is, then click \"Next\""));
    wxStaticBoxSizer* itemStaticBoxSizer6 = new wxStaticBoxSizer(itemStaticBoxSizer6Static, wxHORIZONTAL);
    itemBoxSizer4->Add(itemStaticBoxSizer6, 1, wxGROW|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer7Static = new wxStaticBox(itemStaticBoxSizer6->GetStaticBox(), wxID_ANY, _("Transformation Type"));
    wxStaticBoxSizer* itemStaticBoxSizer7 = new wxStaticBoxSizer(itemStaticBoxSizer7Static, wxVERTICAL);
    itemStaticBoxSizer6->Add(itemStaticBoxSizer7, 0, wxALIGN_TOP|wxALL, 5);

    m_ConvertToFeatures = new wxRadioButton( itemStaticBoxSizer7->GetStaticBox(), ID_CONVERTTOFEATURES, _("Convert to Feature Table"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    m_ConvertToFeatures->SetValue(false);
    m_ConvertToFeatures->SetHelpText(_("Add and update fields needed to view rows as region features."));
    if (CTableXformPanel::ShowToolTips())
        m_ConvertToFeatures->SetToolTip(_("Add and update fields needed to view rows as region features."));
    itemStaticBoxSizer7->Add(m_ConvertToFeatures, 0, wxALIGN_LEFT|wxALL, 5);

    m_CreateLocations = new wxRadioButton( itemStaticBoxSizer7->GetStaticBox(), ID_CREATELOCATIONS, _("Create Locations"), wxDefaultPosition, wxDefaultSize, 0 );
    m_CreateLocations->SetValue(false);
    m_CreateLocations->SetHelpText(_("Add location fields to the table derived from the original table data.  Open the table in the Generic Table View."));
    if (CTableXformPanel::ShowToolTips())
        m_CreateLocations->SetToolTip(_("Add location fields to the table derived from the original table data.  Open the table in the Generic Table View."));
    itemStaticBoxSizer7->Add(m_CreateLocations, 0, wxALIGN_LEFT|wxALL, 5);

    m_ConvertToSnips = new wxRadioButton( itemStaticBoxSizer7->GetStaticBox(), ID_CONVERTTOSNP, _("Create SNP Variation Features"), wxDefaultPosition, wxDefaultSize, 0 );
    m_ConvertToSnips->SetValue(false);
    m_ConvertToSnips->SetHelpText(_("Add and update fields needed to view rows as snps (variations)."));
    if (CTableXformPanel::ShowToolTips())
        m_ConvertToSnips->SetToolTip(_("Add and update fields needed to view rows as snps (variations)."));
    itemStaticBoxSizer7->Add(m_ConvertToSnips, 0, wxALIGN_LEFT|wxALL, 5);

    m_KeepTableUnchanged = new wxRadioButton( itemStaticBoxSizer7->GetStaticBox(), ID_DONOTCONVERT, _("Keep Table Unchanged"), wxDefaultPosition, wxDefaultSize, 0 );
    m_KeepTableUnchanged->SetValue(true);
    itemStaticBoxSizer7->Add(m_KeepTableUnchanged, 0, wxALIGN_LEFT|wxALL, 5);

    m_XformInfo = new wxStaticText( itemStaticBoxSizer6->GetStaticBox(), wxID_STATIC, _("                    \"\n\n\n\n\n                    \"\n                  "), wxDefaultPosition, wxSize(360, -1), wxALIGN_LEFT|wxST_NO_AUTORESIZE );
    itemStaticBoxSizer6->Add(m_XformInfo, 1, wxGROW|wxALL, 10);

    wxStaticBox* itemStaticBoxSizer13Static = new wxStaticBox(itemPanel1, wxID_ANY, _("Table Data"));
    wxStaticBoxSizer* itemStaticBoxSizer13 = new wxStaticBoxSizer(itemStaticBoxSizer13Static, wxHORIZONTAL);
    itemBoxSizer2->Add(itemStaticBoxSizer13, 1, wxGROW|wxLEFT, 5);

    wxPanel* itemPanel14 = new wxPanel( itemStaticBoxSizer13->GetStaticBox(), ID_TABLEXFORMPANEL, wxDefaultPosition, wxDefaultSize, wxNO_BORDER|wxTAB_TRAVERSAL );
    itemStaticBoxSizer13->Add(itemPanel14, 1, wxGROW|wxTOP, 5);

    wxBoxSizer* itemBoxSizer15 = new wxBoxSizer(wxHORIZONTAL);
    itemPanel14->SetSizer(itemBoxSizer15);

    m_TableDataListCtrl = new CTableDataListCtrl( itemPanel14, ID_CTABLEDATALISTCTRL, wxDefaultPosition, wxSize(100, 100), 0 );
    itemBoxSizer15->Add(m_TableDataListCtrl, 1, wxGROW|wxALL, 5);

////@end CTableXformPanel content construction
}

bool CTableXformPanel::Show(bool show)
{   
    bool res = wxPanel::Show(show);

    // Force the panel to layout correctly right away
    if (show) {
        m_TableDataListCtrl->ClearAll();
        this->GetParent()->Layout();   

        /// Create an ITableData-derived data source from set-annot
        SConstScopedObject  so(m_AnnotTableData->GetContainer(), m_Scope);
        CIRef<ITableData> table_data;
        table_data.Reset(CreateObjectInterface<ITableData>(so, NULL));

        /// If successful, use the new datasource to initialize the list control
        if (table_data) {
            m_TableDataListCtrl->InitDataSource(*table_data);
            Refresh();
        }
    }

    return res;
}

void CTableXformPanel::SetMainTitle(const wxString& title)
{
   //m_MainBox->SetLabel(title);
}

bool CTableXformPanel::x_AddLocations(string& errMsg, ICanceled& canceled)
{
    if (canceled.IsCanceled())
        return false;

    string msg;
    vector<CTableAnnotDataSource::STableLocation> locations =
        m_AnnotTableData->FindLocations(msg, false);

    if (canceled.IsCanceled())
        return false;

    if (locations.size() == 0) {
        ERR_POST(Info << "Table Import - Unable to create locations: " << msg);
        errMsg = msg + string(" - Unable to create locations");
        return false;
    }

    bool success = false;
    for (size_t i = 0; i < locations.size(); ++i) {
        if (canceled.IsCanceled())
            return false;

        bool result = false;
        try {
            if (!locations[i].m_IsRsid)
                result = m_AnnotTableData->AddSeqLoc(locations[i], i + 1, &canceled);
            else
                result = m_AnnotTableData->AddSnpSeqLoc(locations[i], i + 1, &canceled);

            if (result)
                success = true; // function returns success if any locs are added
        }
        catch (CException& c) {
            LOG_POST(Error << "Adding location #: " << i << " to table: " << c.GetMsg());
        }

        if (result) {
            ERR_POST(Info << "Table Import - Added location using columns: ");
            ERR_POST(Info << locations[i].GetColumnInfo());
        }
        else {
            errMsg = "Table Import - Error adding location to table";
            ERR_POST(Info << "Table Import - Error adding location to table using columns: ");
            ERR_POST(Info << locations[i].GetColumnInfo());
        }
    }
    return success && !canceled.IsCanceled();
}

bool CTableXformPanel::x_CreateFeatures(bool create_snps, string& errMsg, ICanceled& canceled)
{
    if (canceled.IsCanceled())
        return false;

    string msg;
    vector<CTableAnnotDataSource::STableLocation> locations =
        m_AnnotTableData->FindLocations(msg, false);

    if (canceled.IsCanceled())
        return false;

    // Any location can be a feature, but only 1.  If we find more than 1
    // we choose to to create any features. 
    if (locations.size() > 1) {
        ERR_POST(Info << "Table Import - Unable to create features: more than 1 location found");
        errMsg = "Unable to create features - table has more than 1 location per row";
        return false;
    }
    // unable to identify columns needed to create location info needed by features.
    else if (locations.size() == 0) {
        ERR_POST(Info << "Table Import - Unable to create features: " << msg);
        errMsg = msg + string(" - Unable to create features");
        return false;
    }
    else if (create_snps &&
        (locations[0].m_IsRsid == false || locations[0].m_GenotypeCol == -1)) {
        ERR_POST(Info << "Table Import - Unable to create SNiPs: table must have an RSID and Genotype column specified");
        errMsg = "Unable to create SNiPs: table must have an RSID and Genotype column specified";
        return false;
    }


    bool success = false;
    try {
        if (create_snps) {
            success = m_AnnotTableData->CreateSnps(locations[0], &canceled);
        }
        else {  // create regions features (for snip ids or locations)
            if (!locations[0].m_IsRsid)
                success = m_AnnotTableData->CreateFeature(locations[0], &canceled);
            else
                success = m_AnnotTableData->CreateSnpFeature(locations[0], &canceled);
        }
    }
    catch (CException& c) {
        LOG_POST(Error << "Error converting table to feature table: " << c.GetMsg());
    }

    if (success) {
        ERR_POST(Info << "Table Import - Transformed into feature table using columns: ");
        ERR_POST(Info << locations[0].GetColumnInfo());
    }
    else {
        errMsg = "Table Import - Error transforming into feature table";
        ERR_POST(Info << "Table Import - Error transforming into feature table using columns: ");
        ERR_POST(Info << locations[0].GetColumnInfo());
    }
    return success && !canceled.IsCanceled();
}


bool CTableXformPanel::IsInputValid()
{
    // Do the actual transformation here.  
    if (m_KeepTableUnchanged->GetValue()) {
        m_LastXform = eNoTransform;
        return true;
    }
   
    if (m_CreateLocations->GetValue()) {
        // Create features asynchronously so user can see progress
        string errMsg;
        if (GUI_AsyncExec(
            [this, &errMsg](ICanceled& canceled) { return this->x_AddLocations(errMsg, canceled);  },
            wxT("Adding locations..."))) {
            m_LastXform = eAddLocs;
            return true;
        }

        if (!errMsg.empty())
            wxMessageBox(errMsg);

        return false;
    }
    else if (m_ConvertToFeatures->GetValue()) {
        // Create features asynchronously so user can see progress
        string errMsg;
        if (GUI_AsyncExec(
            [this, &errMsg](ICanceled& canceled) { return this->x_CreateFeatures(false, errMsg, canceled); },
            wxT("Creating features..."))) {
            m_LastXform = eRegionFeatures;
            return true;
        }

        if (!errMsg.empty())
            wxMessageBox(errMsg);

        return false;
    }
    else if (m_ConvertToSnips->GetValue()) {
        // Create features asynchronously so user can see progress
        string errMsg;
        if (GUI_AsyncExec(
            [this, &errMsg](ICanceled& canceled) { return this->x_CreateFeatures(true, errMsg, canceled); },
            wxT("Creating features..."))) {
            m_LastXform = eRegionFeatures;
            return true;
        }

        if (!errMsg.empty())
            wxMessageBox(errMsg);

        return false;
    }

    return true;
}

void CTableXformPanel::SetRegistryPath( const string& path )
{
    m_RegPath = path;
}

static const string kTransformationTypeTag = "TransformationType";

void CTableXformPanel::LoadSettings()
{
    if ( !m_RegPath.empty() ) {
        CGuiRegistry& gui_reg = CGuiRegistry::GetInstance();
        CRegistryReadView view = gui_reg.GetReadView(m_RegPath);
        m_LastXform = eTransformType(view.GetInt(kTransformationTypeTag, (int)eNoTransform));

        m_CreateLocations->SetValue(false);
        m_ConvertToFeatures->SetValue(false);
        m_KeepTableUnchanged->SetValue(false);

        switch (m_LastXform) {
            case eRegionFeatures:
                m_ConvertToFeatures->SetValue(true);
                break;
            case eAddLocs:
                m_CreateLocations->SetValue(true);
                break;
            case eNoTransform:
                m_KeepTableUnchanged->SetValue(true);
                break;
            default:
                m_KeepTableUnchanged->SetValue(true);
        }
    }

    x_SetHelpText();
}


void CTableXformPanel::SaveSettings() const
{
}

bool CTableXformPanel::ShowToolTips()
{
    return true;
}

wxBitmap CTableXformPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CTableXformPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CTableXformPanel bitmap retrieval
}
wxIcon CTableXformPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CTableXformPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CTableXformPanel icon retrieval
}

void CTableXformPanel::OnCreateLocationsSelected( wxCommandEvent& event )
{
    string msg;
    vector<CTableAnnotDataSource::STableLocation> locations =
        m_AnnotTableData->FindLocations(msg, false);

    // unable to identify columns needed to create location
    if (locations.size() == 0) {        
        wxMessageBox(msg + " - Unable to create locations");
    }
    
    x_SetHelpText();
}

void CTableXformPanel::OnConvertToFeaturesSelected( wxCommandEvent& event )
{
    string msg;
    vector<CTableAnnotDataSource::STableLocation> locations =
        m_AnnotTableData->FindLocations(msg, false);

    // Any location can be a feature, but only 1.  If we find more than 1
    // we choose to to create any features. 
    if (locations.size() > 1) {
        wxMessageBox("Unable to create features - table has more than 1 location per row");
    }
    // unable to identify columns needed to create location info needed by features.
    else if (locations.size() == 0) {
        wxMessageBox(msg + " - Unable to create features");
    }

    x_SetHelpText();
}

void CTableXformPanel::OnConvertToSnpSelected( wxCommandEvent& event )
{
    string msg;
    vector<CTableAnnotDataSource::STableLocation> locations =
        m_AnnotTableData->FindLocations(msg, false);

    // Any location can be a feature, but only 1.  If we find more than 1
    // we choose to to create any features. 
    if (locations.size() > 1) {
        wxMessageBox("Unable to create features - table has more than 1 location per row");
    }
    // unable to identify columns needed to create location info needed by features.
    else if (locations.size() == 0) {
        wxMessageBox(msg + " - Unable to create features");
    }
    else if (locations[0].m_IsRsid == false || locations[0].m_GenotypeCol == -1) {
        wxMessageBox("Unable to create SNP features from table - table must have an RSID and Genotype column specified");
    }

    x_SetHelpText();
}

void CTableXformPanel::OnDoNotConvertSelected( wxCommandEvent& event )
{
    // Just save table as-is.
    x_SetHelpText();
}

void CTableXformPanel::x_SetHelpText()
{
    if (m_KeepTableUnchanged->GetValue()) {
       m_XformInfo->SetLabel("Save the table with no changes");
    }
    else if (m_ConvertToFeatures->GetValue()) {
        m_XformInfo->SetLabel(
        "Convert current table into a table of features \
that can be displayed in the Graphical Sequence View by enabling \
\"Other Features\" with sub-track \"region\".");
    }
    else if (m_CreateLocations->GetValue()) {
        m_XformInfo->SetLabel(
        "Add location column(s) to the table based on existing \
ID and position fields.  Double-click on locations in the Generic \
Table View to open them in their own default view.  Generic Table View \
also broadcasts the locations which can be seen in Selection Inspector."); 
    }
    else if (m_ConvertToSnips->GetValue()) {
        m_XformInfo->SetLabel(
        "Convert current table into a table of SNP features \
that can be displayed in the Graphical Sequence View by enabling \
\"Other Features\" with sub-track \"region\"."); 
    }

    int width;
    m_XformInfo->GetClientSize(&width, nullptr);
    m_XformInfo->Wrap(width);

//ID and position fields.  Open the saved table in the Generic Table \
//View that lets you double-click on locations to open them in their default \
//view and also broadcasts them which can be seen in Selection Inspector."); 
}

void CTableXformPanel::OnSaveImportParmsClick( wxCommandEvent& event )
{
    wxFileDialog dlg(this, wxT("Select a file"), wxT(""), wxT(""),
        CFileExtensions::GetDialogFilter(CFileExtensions::kASN) + wxT("|") +
        CFileExtensions::GetDialogFilter(CFileExtensions::kAllFiles),
        wxFD_SAVE|wxFD_OVERWRITE_PROMPT);

    if (dlg.ShowModal() != wxID_OK)
        return;

    CNcbiOfstream out_file(dlg.GetPath().fn_str());
    if (!out_file) {
        wxMessageBox("Error opening selected file: " + dlg.GetPath(), "File Error");
        return;
    }
    
    string transformation_type = "none";
    if (m_CreateLocations->GetValue()) 
        transformation_type = "seqlocs";
    else if (m_ConvertToFeatures->GetValue())
        transformation_type = "features";

    try {
        CUser_object user_object;

        user_object.SetType().SetStr() = "table load parameters";
        user_object.AddField("conversion-type", transformation_type);

        m_ImportedTableData->ExportTableParms(user_object); 
        
        out_file << MSerial_AsnText << user_object;
    }
    catch (CException& ex) {
        wxMessageBox(ToWxString(ex.GetMsg()), "Error");
    }

}


END_NCBI_SCOPE

