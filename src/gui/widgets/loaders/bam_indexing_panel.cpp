/*  $Id: bam_indexing_panel.cpp 43791 2019-08-30 16:48:54Z katargir $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data,  the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties,  express or implied,  including
 *  warranties of performance,  merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Authors:  Liangshou Wu
 */


// Generated by DialogBlocks (unregistered), 11/03/2011 15:58:40

#include <ncbi_pch.hpp>

#include <gui/widgets/wx/wx_utils.hpp>
#include <wx/filename.h>
#include <wx/sizer.h>
#include <wx/stattext.h>
#include <wx/button.h>
#include <wx/textctrl.h>
#include <wx/filedlg.h>
#include <wx/msgdlg.h>


////@begin includes
////@end includes

#include <gui/widgets/loaders/bam_indexing_panel.hpp>

////@begin XPM images
////@end XPM images

BEGIN_NCBI_SCOPE


/*!
 * CBamIndexingPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CBamIndexingPanel, wxPanel )


/*!
 * CBamIndexingPanel event table definition
 */

BEGIN_EVENT_TABLE( CBamIndexingPanel, wxPanel )

////@begin CBamIndexingPanel event table entries
    EVT_BUTTON( ID_BUTTON6, CBamIndexingPanel::OnButton6Click )

////@end CBamIndexingPanel event table entries

END_EVENT_TABLE()


/*!
 * CBamIndexingPanel constructors
 */

CBamIndexingPanel::CBamIndexingPanel()
{
    Init();
}

CBamIndexingPanel::CBamIndexingPanel( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*!
 * CBamIndexingPanel creator
 */

bool CBamIndexingPanel::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CBamIndexingPanel creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CBamIndexingPanel creation
    return true;
}


/*!
 * CBamIndexingPanel destructor
 */

CBamIndexingPanel::~CBamIndexingPanel()
{
////@begin CBamIndexingPanel destruction
////@end CBamIndexingPanel destruction
}


/*!
 * Member initialisation
 */

void CBamIndexingPanel::Init()
{
////@begin CBamIndexingPanel member initialisation
    m_SamtoolsPath = NULL;
////@end CBamIndexingPanel member initialisation
}


/*!
 * Control creation for CBamIndexingPanel
 */

void CBamIndexingPanel::CreateControls()
{    
////@begin CBamIndexingPanel content construction
    CBamIndexingPanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemPanel1->SetSizer(itemBoxSizer2);

    wxStaticText* itemStaticText3 = new wxStaticText( itemPanel1, wxID_STATIC, _("The required index file can't be found. The index file must \nreside in the same directory as the BAM file.  The index file \nshould be named by appending \".bai\" to the bam file name.\n\nPlease locate Samtools to generate the index file. The open \nsource tool can be downloaded from:\nhttp://samtools.sourceforge.net/"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer2->Add(itemStaticText3, 0, wxALIGN_LEFT|wxALL, 5);

    itemBoxSizer2->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer5, 0, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemPanel1, wxID_STATIC, _("Samtools:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemStaticText6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_SamtoolsPath = new wxTextCtrl( itemPanel1, ID_TEXTCTRL9, wxEmptyString, wxDefaultPosition, wxSize(160, -1), 0 );
    itemBoxSizer5->Add(m_SamtoolsPath, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton8 = new wxButton( itemPanel1, ID_BUTTON6, _("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemButton8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemBoxSizer2->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText10 = new wxStaticText( itemPanel1, wxID_STATIC, _("Indexing process may take from seconds to minutes \ndepending on the Bam file size and whether the Bam \nfile is sorted. "), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer2->Add(itemStaticText10, 0, wxALIGN_LEFT|wxALL, 5);

////@end CBamIndexingPanel content construction
}


void CBamIndexingPanel::SetBamFilePath(const string& path)
{
    m_BamFilePath = wxString::FromUTF8(path.c_str());
}


void CBamIndexingPanel::SetSamtoolsPath(const string& path)
{
    m_SamtoolsPath->SetValue(wxString::FromUTF8(path.c_str()));
}


string CBamIndexingPanel::GetSamtoolsPath() const
{
    return string(FindExeFile(m_SamtoolsPath->GetValue()).ToUTF8());
}

bool CBamIndexingPanel::IsInputValid()
{
    wxString err_msg, path = m_SamtoolsPath->GetValue();
    wxString fullPath = FindExeFile(path);

    if (path.IsEmpty()) {
        err_msg = wxT("Please locate Samtools!\n");
    } else if (fullPath.IsEmpty()) {
        err_msg = wxT("The input Samtools doesn't exist! Samtools: ");
        err_msg += path;
    } else if ( !wxFileName::IsFileExecutable(fullPath) ) {
        err_msg = wxT("The input Samtools is not an executable! Samtools: ");
        err_msg += fullPath;       
    } else if ( !wxFileName::IsDirWritable(m_BamFilePath) ) {
        err_msg = wxT("No write permission to the BAM file directory: ");
        err_msg += m_BamFilePath;
    }

    if ( !err_msg.IsEmpty() ) {
        wxMessageBox(err_msg, wxT("BAM index file - error in input"),
            wxOK | wxICON_ERROR, this);
        return false;
    }

    return true;
}


/*!
 * Should we show tooltips?
 */

bool CBamIndexingPanel::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CBamIndexingPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CBamIndexingPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CBamIndexingPanel bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CBamIndexingPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CBamIndexingPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CBamIndexingPanel icon retrieval
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON6
 */

void CBamIndexingPanel::OnButton6Click( wxCommandEvent& event )
{
    wxFileDialog dlg(this, wxT("Select the Samtools"), m_SamtoolsPath->GetValue(), wxT(""),
        wxT("Samtools (") wxALL_FILES_PATTERN wxT(")|") wxALL_FILES_PATTERN,
        wxFD_OPEN);

    if (dlg.ShowModal() != wxID_OK)
        return;

    m_SamtoolsPath->SetValue(dlg.GetPath());    
}

END_NCBI_SCOPE
